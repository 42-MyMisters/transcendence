{"ast":null,"code":"var _jsxFileName = \"/data/front/src/pages/ChatPage.tsx\",\n  _s = $RefreshSig$();\nimport BackGround from \"../components/BackGround\";\nimport TopBar from \"../components/TopBar\";\nimport ChatRoomList from \"../components/ChatPage/ChatRoomList\";\nimport ChatUserList from \"../components/ChatPage/ChatUserList\";\nimport ChatArea from \"../components/ChatPage/ChatArea\";\nimport ChatRoomUserList from \"../components/ChatPage/ChatRoomUserList\";\nimport { useAtom } from \"jotai\";\nimport { userInfoModalAtom, passwordInputModalAtom, roomModalAtom, inviteModalAtom, gameInviteModalAtom } from \"../components/atom/ModalAtom\";\nimport UserInfoModal from \"../components/ChatPage/UserInfoModal\";\nimport RoomModal from \"../components/ChatPage/RoomModal\";\nimport RoomInviteModal from \"../components/ChatPage/RoomInviteModal\";\nimport PasswordModal from \"../components/ChatPage/PasswordModal\";\nimport { refreshTokenAtom } from \"../components/atom/LoginAtom\";\nimport { UserAtom, TFAAtom } from \"../components/atom/UserAtom\";\nimport { useEffect } from \"react\";\nimport * as socket from \"../socket/chat.socket\";\nimport * as chatAtom from \"../components/atom/ChatAtom\";\nimport { GetMyInfo, RefreshToken, LogOut } from \"../event/api.request\";\nimport { useNavigate } from \"react-router-dom\";\nimport GameInviteModal from \"../components/GamePage/GameInviteModal\";\nimport { PressKey, AdminLogPrinter } from \"../event/event.util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatPage() {\n  _s();\n  const [userInfoModal, setUserInfoModal] = useAtom(userInfoModalAtom);\n  const [roomModal, setRoomModal] = useAtom(roomModalAtom);\n  const [inviteModal, setInviteModal] = useAtom(inviteModalAtom);\n  const [pwInputModal, setPwInputModal] = useAtom(passwordInputModalAtom);\n  const [userInfo, setUserInfo] = useAtom(UserAtom);\n  const [isFirstLogin, setIsFirstLogin] = useAtom(chatAtom.isFirstLoginAtom);\n  const [hasLogin, setHasLogin] = useAtom(chatAtom.hasLoginAtom);\n  const [roomList, setRoomList] = useAtom(chatAtom.roomListAtom);\n  const [userList, setUserList] = useAtom(chatAtom.userListAtom);\n  const [dmHistoryList, setDmHistoryList] = useAtom(chatAtom.dmHistoryListAtom);\n  const [followingList, setFollowingList] = useAtom(chatAtom.followingListAtom);\n  const [blockList, setBlockList] = useAtom(chatAtom.blockListAtom);\n  const [focusRoom, setFocusRoom] = useAtom(chatAtom.focusRoomAtom);\n  const [socketState, setSocketState] = useAtom(chatAtom.socketStateAtom);\n  const navigate = useNavigate();\n  const [, setRefreshToken] = useAtom(refreshTokenAtom);\n  const [gameInviteModal, setGameInviteModal] = useAtom(gameInviteModalAtom);\n  const [adminConsole, setAdminConsole] = useAtom(chatAtom.adminConsoleAtom);\n  const [passwordModal, setPasswordModal] = useAtom(passwordInputModalAtom);\n  const [clickRoom] = useAtom(chatAtom.clickRoomAtom);\n  const [tfa, setTfa] = useAtom(TFAAtom);\n  PressKey([\"F4\"], () => {\n    setAdminConsole(prev => !prev);\n  });\n  const getRoomList = () => {\n    AdminLogPrinter(adminConsole, \"\\n\\ngetRoomList\");\n    Object.entries(roomList).forEach(_ref => {\n      let [key, value] = _ref;\n      if (value.detail !== undefined) {\n        AdminLogPrinter(adminConsole, `\\n[ ${value.roomName} : ${key}] - ${value.roomType}`);\n        Object.entries(value.detail).forEach(_ref2 => {\n          let [key, value] = _ref2;\n          if (key === \"userList\") {\n            Object.entries(value).forEach(_ref3 => {\n              let [key, value] = _ref3;\n              AdminLogPrinter(adminConsole, `uid: ${key}, value: ${JSON.stringify(value)}`);\n            });\n          } else {\n            AdminLogPrinter(adminConsole, `key: ${key}, value: ${JSON.stringify(value)}`);\n          }\n        });\n      } else {\n        AdminLogPrinter(adminConsole, `[ ${value.roomName} ] \\nvalue: ${JSON.stringify(value)}`);\n      }\n    });\n  };\n  const getUserList = () => {\n    AdminLogPrinter(adminConsole, \"\\n\\ngetUserList\");\n    Object.entries(userList).forEach(_ref4 => {\n      let [key, value] = _ref4;\n      AdminLogPrinter(adminConsole, `[ ${value.userDisplayName} ]\\nkey: ${key}, value: ${JSON.stringify(value)}`);\n    });\n  };\n  const getDMList = () => {\n    AdminLogPrinter(adminConsole, \"\\n\\ngetDmHitoryList\");\n    Object.entries(dmHistoryList).forEach(_ref5 => {\n      let [key, value] = _ref5;\n      AdminLogPrinter(adminConsole, `[ ${value.userDisplayName} ]\\nkey: ${key}, value: ${JSON.stringify(value)}`);\n    });\n  };\n  const getFollowingList = () => {\n    AdminLogPrinter(adminConsole, `\\n\\ngetFollowingList`);\n    Object.entries(followingList).forEach(_ref6 => {\n      let [key, value] = _ref6;\n      AdminLogPrinter(adminConsole, `[ ${value.userDisplayName} ]\\nkey: ${key}, value: ${JSON.stringify(value)}`);\n    });\n  };\n  const showSocketState = () => {\n    AdminLogPrinter(adminConsole, `socket state: ${socketState}`);\n  };\n  const getBlockList = () => {\n    AdminLogPrinter(adminConsole, `\\n\\ngetBlockList`);\n    Object.entries(blockList).forEach(_ref7 => {\n      var _userList$Number;\n      let [key, value] = _ref7;\n      AdminLogPrinter(adminConsole, `[ ${(_userList$Number = userList[Number(key)]) === null || _userList$Number === void 0 ? void 0 : _userList$Number.userDisplayName} ]\\nkey: ${key}, value: ${JSON.stringify(value)}`);\n    });\n  };\n  const showMyinfo = () => {\n    AdminLogPrinter(adminConsole, `showMyinfo ${JSON.stringify(userInfo)}}`);\n  };\n  const showServerUser = () => {\n    AdminLogPrinter(adminConsole, \"\\nshow server user list\");\n    socket.socket.emit(\"server-user-list\");\n  };\n  const showServerRoom = () => {\n    AdminLogPrinter(adminConsole, \"\\nshow server room list\");\n    socket.socket.emit(\"server-room-list\");\n  };\n  const logOutHandler = () => {\n    LogOut(adminConsole, setRefreshToken, navigate, \"/\");\n    setHasLogin(false);\n    setIsFirstLogin(true);\n  };\n  const quitRoomRelativeModal = () => {\n    setUserInfoModal(false);\n    setInviteModal(false);\n    // setRoomModal(false);\n    // setPwInputModal(false);\n  };\n\n  async function getMyinfoHandler() {\n    const getMeResponse = await GetMyInfo(adminConsole, setUserInfo, setTfa, true);\n    if (getMeResponse == 401) {\n      const refreshResponse = await RefreshToken(adminConsole);\n      if (refreshResponse !== 201) {\n        logOutHandler();\n      } else {\n        const getMeResponse = await GetMyInfo(adminConsole, setUserInfo, setTfa, true);\n        if (getMeResponse == 401) {\n          logOutHandler();\n        }\n      }\n    }\n  }\n  useEffect(() => {\n    socket.socket.onAny(function (eventName) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      AdminLogPrinter(adminConsole, \"incoming \", eventName, args);\n    });\n    // catch all outgoing events\n    socket.socket.onAnyOutgoing(function (eventName) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      AdminLogPrinter(adminConsole, \"outgoing \", eventName, args);\n    });\n    socket.socket.on(\"connect\", () => {\n      if (socket.socket.connected) {\n        //This attribute describes whether the socket is currently connected to the server.\n        if (socket.socket.recovered) {\n          // any missed packets will be received\n        } else {\n          // new or unrecoverable session\n          AdminLogPrinter(adminConsole, \"socket connected : \" + socket.socket.id);\n        }\n      }\n      setSocketState(true);\n    });\n    //https://socket.io/docs/v4/client-socket-instance/#disconnect\n    socket.socket.on(\"disconnect\", reason => {\n      AdminLogPrinter(adminConsole, \"socket disconnected reason: \" + reason);\n      /**\n       *  BAD, will throw an error\n       *  socket.emit(\"disconnect\");\n      */\n      if (reason === \"io server disconnect\") {\n        // the disconnection was initiated by the server, you need to reconnect manually\n        AdminLogPrinter(adminConsole, 'socket disconnected by server');\n        socket.socket.removeAllListeners();\n      }\n      // else the socket will automatically try to reconnect\n      AdminLogPrinter(adminConsole, \"socket disconnected\");\n      setSocketState(false);\n    });\n    // the connection is denied by the server in a middleware function\n    socket.socket.on(\"connect_error\", err => {\n      if (err.message === \"unauthorized\") {\n        // handle each case\n      }\n      AdminLogPrinter(adminConsole, err.message); // prints the message associated with the error\n    });\n\n    socket.socket.on(\"multiple-login\", () => {\n      // \talert(`multiple login detected!`);\n      LogOut(adminConsole, setRefreshToken, navigate, \"/\", 'refresh');\n      setHasLogin(false);\n      setIsFirstLogin(true);\n    });\n    return () => {\n      socket.socket.off(\"connect\");\n      socket.socket.off(\"disconnect\");\n      socket.socket.off(\"connect_error\");\n      socket.socket.offAny();\n      socket.socket.offAnyOutgoing();\n      socket.socket.off(\"multiple-login\");\n    };\n  }, []);\n  useEffect(() => {\n    socket.socket.on(\"logout\", () => {\n      LogOut(adminConsole, setRefreshToken, navigate, \"/\");\n      setHasLogin(false);\n      setIsFirstLogin(true);\n    });\n    return () => {\n      socket.socket.off(\"logout\");\n    };\n  }, []);\n  useEffect(() => {\n    socket.socket.on(\"dm-list\", (resDmUserList, mergeDmList) => {\n      const tempDmRoomList = {};\n      setDmHistoryList({\n        ...resDmUserList\n      });\n      setUserList(prevUserList => ({\n        ...prevUserList,\n        ...resDmUserList\n      }));\n      Object.entries(resDmUserList).forEach(_ref8 => {\n        let [dmUser] = _ref8;\n        tempDmRoomList[Number(dmUser)] = {\n          roomName: 'DM',\n          roomType: 'dm',\n          isJoined: true,\n          detail: {\n            userList: {\n              [Number(dmUser)]: {\n                userRoomPower: 'member',\n                userRoomStatus: 'normal'\n              },\n              [userInfo.uid]: {\n                userRoomPower: 'member',\n                userRoomStatus: 'normal'\n              }\n            },\n            messageList: [],\n            myRoomStatus: 'normal',\n            myRoomPower: 'member'\n          }\n        };\n      });\n      Object.entries(mergeDmList).forEach(atom => {\n        if (Number(atom[1].senderId) === userInfo.uid) {\n          var _tempDmRoomList$Numbe, _atom$, _atom$2, _atom$3, _tempDmRoomList$Numbe2, _atom$4;\n          // from me\n          const tempMessageList = (_tempDmRoomList$Numbe = tempDmRoomList[Number((_atom$ = atom[1]) === null || _atom$ === void 0 ? void 0 : _atom$.receiverId)].detail) === null || _tempDmRoomList$Numbe === void 0 ? void 0 : _tempDmRoomList$Numbe.messageList;\n          tempMessageList === null || tempMessageList === void 0 ? void 0 : tempMessageList.unshift({\n            userId: userInfo.uid,\n            userName: userInfo.nickname,\n            message: (_atom$2 = atom[1]) === null || _atom$2 === void 0 ? void 0 : _atom$2.message,\n            isMe: true,\n            number: tempMessageList.length\n          });\n          tempDmRoomList[Number((_atom$3 = atom[1]) === null || _atom$3 === void 0 ? void 0 : _atom$3.receiverId)] = {\n            roomName: 'DM',\n            roomType: 'dm',\n            isJoined: true,\n            detail: {\n              userList: {\n                ...((_tempDmRoomList$Numbe2 = tempDmRoomList[Number((_atom$4 = atom[1]) === null || _atom$4 === void 0 ? void 0 : _atom$4.receiverId)].detail) === null || _tempDmRoomList$Numbe2 === void 0 ? void 0 : _tempDmRoomList$Numbe2.userList)\n              },\n              myRoomPower: 'member',\n              myRoomStatus: 'normal',\n              messageList: tempMessageList\n            }\n          };\n        } else {\n          var _tempDmRoomList$Numbe3, _tempDmRoomList$Numbe4, _atom$5, _atom$6, _resDmUserList$Number, _atom$7, _atom$8, _atom$9, _tempDmRoomList$Numbe5, _tempDmRoomList$Numbe6, _atom$10;\n          // to me\n          if (atom[1].blockFromReceiver) {\n            return;\n          }\n          const tempMessageList = (_tempDmRoomList$Numbe3 = tempDmRoomList[Number((_atom$5 = atom[1]) === null || _atom$5 === void 0 ? void 0 : _atom$5.senderId)]) === null || _tempDmRoomList$Numbe3 === void 0 ? void 0 : (_tempDmRoomList$Numbe4 = _tempDmRoomList$Numbe3.detail) === null || _tempDmRoomList$Numbe4 === void 0 ? void 0 : _tempDmRoomList$Numbe4.messageList;\n          tempMessageList === null || tempMessageList === void 0 ? void 0 : tempMessageList.unshift({\n            userId: Number((_atom$6 = atom[1]) === null || _atom$6 === void 0 ? void 0 : _atom$6.senderId),\n            userName: (_resDmUserList$Number = resDmUserList[Number((_atom$7 = atom[1]) === null || _atom$7 === void 0 ? void 0 : _atom$7.senderId)]) === null || _resDmUserList$Number === void 0 ? void 0 : _resDmUserList$Number.userDisplayName,\n            message: (_atom$8 = atom[1]) === null || _atom$8 === void 0 ? void 0 : _atom$8.message,\n            isMe: false,\n            number: tempMessageList.length\n          });\n          tempDmRoomList[Number((_atom$9 = atom[1]) === null || _atom$9 === void 0 ? void 0 : _atom$9.senderId)] = {\n            roomName: 'DM',\n            roomType: 'dm',\n            isJoined: true,\n            detail: {\n              userList: {\n                ...((_tempDmRoomList$Numbe5 = tempDmRoomList[Number((_atom$10 = atom[1]) === null || _atom$10 === void 0 ? void 0 : _atom$10.senderId)]) === null || _tempDmRoomList$Numbe5 === void 0 ? void 0 : (_tempDmRoomList$Numbe6 = _tempDmRoomList$Numbe5.detail) === null || _tempDmRoomList$Numbe6 === void 0 ? void 0 : _tempDmRoomList$Numbe6.userList)\n              },\n              myRoomPower: 'member',\n              myRoomStatus: 'normal',\n              messageList: tempMessageList\n            }\n          };\n        }\n      });\n      setRoomList(prevRoomList => ({\n        ...prevRoomList,\n        ...tempDmRoomList\n      }));\n    });\n    return () => {\n      socket.socket.off(\"dm-list\");\n    };\n  }, [userInfo, roomList, dmHistoryList, userList]);\n  useEffect(() => {\n    socket.socket.on(\"room-list\", resRoomList => {\n      setRoomList(prevRoomList => ({\n        ...prevRoomList,\n        ...resRoomList\n      }));\n    });\n    socket.socket.on(\"follow-list\", resFollowingList => {\n      setFollowingList({\n        ...resFollowingList\n      });\n      setUserList(prevUserList => ({\n        ...resFollowingList,\n        ...prevUserList\n      }));\n    });\n    socket.socket.on(\"block-list\", resBlockList => {\n      setBlockList({\n        ...resBlockList\n      });\n    });\n    socket.socket.on(\"user-list\", resUserList => {\n      setUserList(prevUserList => ({\n        ...prevUserList,\n        ...resUserList\n      }));\n    });\n    return () => {\n      socket.socket.off(\"room-list\");\n      socket.socket.off(\"follow-list\");\n      socket.socket.off(\"block-list\");\n      socket.socket.off(\"user-list\");\n    };\n  }, [userList, roomList, followingList, blockList]);\n  useEffect(() => {\n    socket.socket.on(\"room-list-update\", _ref9 => {\n      let {\n        action,\n        roomId,\n        roomName,\n        roomType\n      } = _ref9;\n      switch (action) {\n        case 'new':\n          {\n            const newRoomList = {};\n            newRoomList[roomId] = {\n              roomName,\n              roomType,\n              isJoined: false\n            };\n            AdminLogPrinter(adminConsole, `room-list-update new: ${JSON.stringify(newRoomList)}`);\n            AdminLogPrinter(adminConsole, `room-list-update origin: ${JSON.stringify(roomList)}`);\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n            break;\n          }\n        case 'delete':\n          {\n            const newRoomList = {\n              ...roomList\n            };\n            delete newRoomList[roomId];\n            setRoomList({\n              ...newRoomList\n            });\n            if (focusRoom == roomId) {\n              setFocusRoom(-1);\n            }\n            if (passwordModal && roomId === clickRoom) {\n              setPasswordModal(false);\n            }\n            break;\n          }\n        case 'edit':\n          {\n            var _roomList$roomId;\n            const newRoomList = {};\n            newRoomList[roomId] = {\n              roomName,\n              roomType,\n              isJoined: (_roomList$roomId = roomList[roomId]) === null || _roomList$roomId === void 0 ? void 0 : _roomList$roomId.isJoined,\n              detail: roomList[roomId].detail || {}\n            };\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n            if (passwordModal && roomId === clickRoom) {\n              setPasswordModal(false);\n            }\n            break;\n          }\n      }\n    });\n    return () => {\n      socket.socket.off(\"room-list-update\");\n    };\n  }, [roomList, focusRoom, passwordModal, clickRoom]);\n  useEffect(() => {\n    socket.socket.on(\"room-clear\", () => {\n      quitRoomRelativeModal();\n      setRoomList({});\n      setFocusRoom(-1);\n    });\n    socket.socket.on(\"user-clear\", () => {\n      setUserList({});\n    });\n    return () => {\n      socket.socket.off(\"room-clear\");\n      socket.socket.off(\"user-clear\");\n    };\n  }, [roomList, userList, setRoomList, setUserList]);\n  useEffect(() => {\n    socket.socket.on(\"room-join\", _ref10 => {\n      let {\n        roomId,\n        roomName,\n        roomType,\n        roomUserList = {},\n        myPower,\n        status,\n        method = ''\n      } = _ref10;\n      switch (status) {\n        case 'ok':\n          {\n            AdminLogPrinter(adminConsole, `join [${roomName}]room`);\n            const newRoomList = {};\n            newRoomList[roomId] = {\n              roomName,\n              roomType,\n              isJoined: true,\n              detail: {\n                userList: {\n                  ...roomUserList\n                },\n                messageList: [],\n                myRoomStatus: 'normal',\n                myRoomPower: myPower\n              }\n            };\n            AdminLogPrinter(adminConsole, `room - join new: ${JSON.stringify(newRoomList)}`);\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n            if (method !== 'invite') {\n              setFocusRoom(roomId);\n            }\n            if (roomType === 'dm') {\n              const newDmUser = {};\n              newDmUser[roomId] = {\n                userDisplayName: userList[roomId].userDisplayName,\n                userProfileUrl: userList[roomId].userProfileUrl,\n                userStatus: userList[roomId].userStatus,\n                dmStatus: method === 'invite' ? 'unread' : 'read'\n              };\n              setDmHistoryList(prevDmHistoryList => ({\n                ...prevDmHistoryList,\n                ...newDmUser\n              }));\n              setUserList(prevUserList => ({\n                ...prevUserList,\n                ...newDmUser\n              }));\n            }\n            break;\n          }\n        case 'ko':\n          {\n            if (roomList[roomId].isJoined === false) {\n              alert(`fail to join[${roomName}]room`);\n            }\n            break;\n          }\n      }\n    });\n    return () => {\n      socket.socket.off(\"room-join\");\n    };\n  }, [roomList, userList, dmHistoryList]);\n  useEffect(() => {\n    socket.socket.on(\"room-in-action\", _ref11 => {\n      var _roomList$roomId2;\n      let {\n        roomId,\n        action,\n        targetId\n      } = _ref11;\n      if (((_roomList$roomId2 = roomList[roomId]) === null || _roomList$roomId2 === void 0 ? void 0 : _roomList$roomId2.isJoined) !== true) {\n        return;\n      }\n      switch (action) {\n        case 'newMember':\n          {\n            if (targetId === userInfo.uid) {\n              return;\n            } else {\n              var _roomList$roomId$deta;\n              const newUser = {};\n              newUser[targetId] = {\n                userRoomStatus: 'normal',\n                userRoomPower: 'member'\n              };\n              const newUserList = {\n                ...((_roomList$roomId$deta = roomList[roomId].detail) === null || _roomList$roomId$deta === void 0 ? void 0 : _roomList$roomId$deta.userList),\n                ...newUser\n              };\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              });\n            }\n            break;\n          }\n        case 'ban':\n        case 'leave':\n        case 'kick':\n          {\n            if (targetId === userInfo.uid) {\n              if (roomList[roomId].roomType === 'private') {\n                const newRoomList = {\n                  ...roomList\n                };\n                delete newRoomList[roomId];\n                setRoomList({\n                  ...newRoomList\n                });\n              } else {\n                const newRoomList = {};\n                newRoomList[roomId] = {\n                  roomName: roomList[roomId].roomName,\n                  roomType: roomList[roomId].roomType,\n                  isJoined: false\n                };\n                setRoomList({\n                  ...roomList,\n                  ...newRoomList\n                });\n              }\n              if (focusRoom === roomId) {\n                setFocusRoom(-1);\n                quitRoomRelativeModal();\n              }\n            } else {\n              var _roomList$roomId$deta2;\n              const newUserList = (_roomList$roomId$deta2 = roomList[roomId].detail) === null || _roomList$roomId$deta2 === void 0 ? void 0 : _roomList$roomId$deta2.userList;\n              delete newUserList[targetId];\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              });\n            }\n            break;\n          }\n        case 'mute':\n        case 'normal':\n          {\n            if (targetId === userInfo.uid) {\n              var _roomList$roomId$deta3, _roomList$roomId$deta4;\n              if (action === 'mute' && ((_roomList$roomId$deta3 = roomList[roomId].detail) === null || _roomList$roomId$deta3 === void 0 ? void 0 : _roomList$roomId$deta3.myRoomStatus) === 'mute') {\n                return;\n              }\n              const newUserList = (_roomList$roomId$deta4 = roomList[roomId].detail) === null || _roomList$roomId$deta4 === void 0 ? void 0 : _roomList$roomId$deta4.userList;\n              newUserList[targetId] = {\n                ...newUserList[targetId],\n                userRoomStatus: action\n              };\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              }, action);\n            } else {\n              var _roomList$roomId$deta5;\n              const newUserList = (_roomList$roomId$deta5 = roomList[roomId].detail) === null || _roomList$roomId$deta5 === void 0 ? void 0 : _roomList$roomId$deta5.userList;\n              newUserList[targetId] = {\n                ...newUserList[targetId],\n                userRoomStatus: action\n              };\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              });\n            }\n            break;\n          }\n        case 'owner':\n        case 'admin':\n          {\n            if (targetId === userInfo.uid) {\n              var _roomList$roomId$deta6;\n              const newUserList = (_roomList$roomId$deta6 = roomList[roomId].detail) === null || _roomList$roomId$deta6 === void 0 ? void 0 : _roomList$roomId$deta6.userList;\n              newUserList[targetId] = {\n                ...newUserList[targetId],\n                userRoomPower: action\n              };\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              }, undefined, action);\n            } else {\n              var _roomList$roomId$deta7;\n              const newUserList = (_roomList$roomId$deta7 = roomList[roomId].detail) === null || _roomList$roomId$deta7 === void 0 ? void 0 : _roomList$roomId$deta7.userList;\n              newUserList[targetId] = {\n                ...newUserList[targetId],\n                userRoomPower: action\n              };\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              });\n            }\n            break;\n          }\n      }\n    });\n    return () => {\n      socket.socket.off(\"room-in-action\");\n    };\n  }, [roomList, userInfo, focusRoom]);\n  useEffect(() => {\n    socket.socket.on(\"user-update\", _ref12 => {\n      let {\n        userId,\n        userDisplayName,\n        userProfileUrl,\n        userStatus\n      } = _ref12;\n      const newUser = {};\n      newUser[userId] = {\n        userDisplayName,\n        userProfileUrl,\n        userStatus\n      };\n      AdminLogPrinter(adminConsole, `user-update: ${userDisplayName}: ${userStatus}`);\n      setUserList(prevUserList => ({\n        ...prevUserList,\n        ...newUser\n      }));\n    });\n    return () => {\n      socket.socket.off(\"user-update\");\n    };\n  }, [userList, isFirstLogin]);\n  useEffect(() => {\n    socket.socket.on(\"message\", _ref13 => {\n      let {\n        roomId,\n        from,\n        message\n      } = _ref13;\n      const block = blockList[from] ? true : false;\n      switch (block) {\n        case true:\n          {\n            AdminLogPrinter(adminConsole, `message from ${from} is blocked`);\n            break;\n          }\n        case false:\n          {\n            var _roomList$roomId$deta8, _roomList$roomId$deta9;\n            AdminLogPrinter(adminConsole, `message from ${from} is received: ${message}`);\n            const newMessageList = (_roomList$roomId$deta8 = roomList[roomId].detail) === null || _roomList$roomId$deta8 === void 0 ? void 0 : _roomList$roomId$deta8.messageList;\n            newMessageList.unshift({\n              userId: from,\n              userName: userList[from].userDisplayName,\n              message,\n              isMe: userInfo.uid === from ? true : false,\n              number: (_roomList$roomId$deta9 = roomList[roomId].detail) === null || _roomList$roomId$deta9 === void 0 ? void 0 : _roomList$roomId$deta9.messageList.length\n            });\n            const newDetail = {\n              ...roomList[roomId].detail,\n              messageList: [...newMessageList]\n            };\n            const newRoomList = {};\n            newRoomList[roomId] = {\n              roomName: roomList[roomId].roomName,\n              roomType: roomList[roomId].roomType,\n              isJoined: roomList[roomId].isJoined,\n              detail: newDetail\n            };\n            if (roomList[roomId].roomType === 'dm' && focusRoom !== roomId) {\n              const newDmUser = {};\n              newDmUser[roomId] = {\n                userDisplayName: userList[roomId].userDisplayName,\n                userProfileUrl: userList[roomId].userProfileUrl,\n                userStatus: userList[roomId].userStatus,\n                dmStatus: 'unread'\n              };\n              setUserList({\n                ...userList,\n                ...newDmUser\n              });\n            }\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n            break;\n          }\n      }\n    });\n    return () => {\n      socket.socket.off(\"message\");\n    };\n  }, [roomList, blockList, userList, userInfo, focusRoom]);\n  async function firstLogin() {\n    if (isFirstLogin) {\n      await getMyinfoHandler();\n      setTimeout(() => {\n        socket.socket.connect();\n      }, 420);\n      setIsFirstLogin(false);\n    }\n  }\n  useEffect(() => {\n    if (isFirstLogin) {\n      firstLogin();\n    }\n  }, [firstLogin]);\n  return /*#__PURE__*/_jsxDEV(BackGround, {\n    children: [adminConsole ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getMyinfoHandler,\n        children: \" /user/me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showMyinfo,\n        children: \" show /user/me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getRoomList,\n        children: \" roomList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getUserList,\n        children: \" userList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getDMList,\n        children: \" dmHistoryList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getFollowingList,\n        children: \" FollowList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getBlockList,\n        children: \" BlockList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showServerUser,\n        children: \" show server user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showServerRoom,\n        children: \" show server room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showSocketState,\n        children: \" socket state\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setGameInviteModal(true),\n        children: \" gameinvite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 8\n    }, this) : '', /*#__PURE__*/_jsxDEV(TopBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 4\n    }, this), userInfoModal ? /*#__PURE__*/_jsxDEV(UserInfoModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 21\n    }, this) : null, roomModal ? /*#__PURE__*/_jsxDEV(RoomModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 17\n    }, this) : null, inviteModal ? /*#__PURE__*/_jsxDEV(RoomInviteModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 19\n    }, this) : null, pwInputModal ? /*#__PURE__*/_jsxDEV(PasswordModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 20\n    }, this) : null, gameInviteModal ? /*#__PURE__*/_jsxDEV(GameInviteModal, {\n      from: \"yuhwang\",\n      AcceptBtn: () => {\n        setGameInviteModal(false);\n      },\n      DeclineBtn: () => {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 5\n    }, this) : null, /*#__PURE__*/_jsxDEV(ChatRoomList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 699,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ChatUserList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ChatRoomUserList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 667,\n    columnNumber: 3\n  }, this);\n}\n_s(ChatPage, \"MqlefJMNHo/LP+R321SpsLzMnVc=\", false, function () {\n  return [useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useNavigate, useAtom, useAtom, useAtom, useAtom, useAtom, useAtom];\n});\n_c = ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["BackGround","TopBar","ChatRoomList","ChatUserList","ChatArea","ChatRoomUserList","useAtom","userInfoModalAtom","passwordInputModalAtom","roomModalAtom","inviteModalAtom","gameInviteModalAtom","UserInfoModal","RoomModal","RoomInviteModal","PasswordModal","refreshTokenAtom","UserAtom","TFAAtom","useEffect","socket","chatAtom","GetMyInfo","RefreshToken","LogOut","useNavigate","GameInviteModal","PressKey","AdminLogPrinter","jsxDEV","_jsxDEV","ChatPage","_s","userInfoModal","setUserInfoModal","roomModal","setRoomModal","inviteModal","setInviteModal","pwInputModal","setPwInputModal","userInfo","setUserInfo","isFirstLogin","setIsFirstLogin","isFirstLoginAtom","hasLogin","setHasLogin","hasLoginAtom","roomList","setRoomList","roomListAtom","userList","setUserList","userListAtom","dmHistoryList","setDmHistoryList","dmHistoryListAtom","followingList","setFollowingList","followingListAtom","blockList","setBlockList","blockListAtom","focusRoom","setFocusRoom","focusRoomAtom","socketState","setSocketState","socketStateAtom","navigate","setRefreshToken","gameInviteModal","setGameInviteModal","adminConsole","setAdminConsole","adminConsoleAtom","passwordModal","setPasswordModal","clickRoom","clickRoomAtom","tfa","setTfa","prev","getRoomList","Object","entries","forEach","_ref","key","value","detail","undefined","roomName","roomType","_ref2","_ref3","JSON","stringify","getUserList","_ref4","userDisplayName","getDMList","_ref5","getFollowingList","_ref6","showSocketState","getBlockList","_ref7","_userList$Number","Number","showMyinfo","showServerUser","emit","showServerRoom","logOutHandler","quitRoomRelativeModal","getMyinfoHandler","getMeResponse","refreshResponse","onAny","eventName","_len","arguments","length","args","Array","_key","onAnyOutgoing","_len2","_key2","on","connected","recovered","id","reason","removeAllListeners","err","message","off","offAny","offAnyOutgoing","resDmUserList","mergeDmList","tempDmRoomList","prevUserList","_ref8","dmUser","isJoined","userRoomPower","userRoomStatus","uid","messageList","myRoomStatus","myRoomPower","atom","senderId","_tempDmRoomList$Numbe","_atom$","_atom$2","_atom$3","_tempDmRoomList$Numbe2","_atom$4","tempMessageList","receiverId","unshift","userId","userName","nickname","isMe","number","_tempDmRoomList$Numbe3","_tempDmRoomList$Numbe4","_atom$5","_atom$6","_resDmUserList$Number","_atom$7","_atom$8","_atom$9","_tempDmRoomList$Numbe5","_tempDmRoomList$Numbe6","_atom$10","blockFromReceiver","prevRoomList","resRoomList","resFollowingList","resBlockList","resUserList","_ref9","action","roomId","newRoomList","_roomList$roomId","_ref10","roomUserList","myPower","status","method","newDmUser","userProfileUrl","userStatus","dmStatus","prevDmHistoryList","alert","_ref11","_roomList$roomId2","targetId","_roomList$roomId$deta","newUser","newUserList","setNewDetailToNewRoom","_roomList$roomId$deta2","_roomList$roomId$deta3","_roomList$roomId$deta4","_roomList$roomId$deta5","_roomList$roomId$deta6","_roomList$roomId$deta7","_ref12","_ref13","from","block","_roomList$roomId$deta8","_roomList$roomId$deta9","newMessageList","newDetail","firstLogin","setTimeout","connect","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","AcceptBtn","DeclineBtn","_c","$RefreshReg$"],"sources":["/data/front/src/pages/ChatPage.tsx"],"sourcesContent":["import BackGround from \"../components/BackGround\";\nimport TopBar from \"../components/TopBar\";\nimport ChatRoomList from \"../components/ChatPage/ChatRoomList\";\nimport ChatUserList from \"../components/ChatPage/ChatUserList\";\nimport ChatArea from \"../components/ChatPage/ChatArea\";\nimport ChatRoomUserList from \"../components/ChatPage/ChatRoomUserList\";\n\nimport { useAtom } from \"jotai\";\nimport {\n\tuserInfoModalAtom,\n\tpasswordInputModalAtom,\n\troomModalAtom,\n\tinviteModalAtom,\n\tgameInviteModalAtom,\n} from \"../components/atom/ModalAtom\";\n\nimport UserInfoModal from \"../components/ChatPage/UserInfoModal\";\nimport RoomModal from \"../components/ChatPage/RoomModal\";\nimport RoomInviteModal from \"../components/ChatPage/RoomInviteModal\";\nimport PasswordModal from \"../components/ChatPage/PasswordModal\";\n\nimport { refreshTokenAtom } from \"../components/atom/LoginAtom\";\nimport { UserAtom, TFAAtom } from \"../components/atom/UserAtom\";\nimport type * as userType from \"../components/atom/UserAtom\";\nimport { useEffect, useState } from \"react\";\n\nimport * as socket from \"../socket/chat.socket\";\nimport * as chatAtom from \"../components/atom/ChatAtom\";\nimport type * as chatType from \"../socket/chat.dto\";\nimport { GetMyInfo, RefreshToken, LogOut } from \"../event/api.request\";\nimport { useNavigate } from \"react-router-dom\";\nimport GameInviteModal from \"../components/GamePage/GameInviteModal\";\n\nimport { PressKey, AdminLogPrinter } from \"../event/event.util\";\n\nexport default function ChatPage() {\n\tconst [userInfoModal, setUserInfoModal] = useAtom(userInfoModalAtom);\n\tconst [roomModal, setRoomModal] = useAtom(roomModalAtom);\n\tconst [inviteModal, setInviteModal] = useAtom(inviteModalAtom);\n\tconst [pwInputModal, setPwInputModal] = useAtom(passwordInputModalAtom);\n\n\tconst [userInfo, setUserInfo] = useAtom(UserAtom);\n\tconst [isFirstLogin, setIsFirstLogin] = useAtom(chatAtom.isFirstLoginAtom);\n\tconst [hasLogin, setHasLogin] = useAtom(chatAtom.hasLoginAtom);\n\n\tconst [roomList, setRoomList] = useAtom(chatAtom.roomListAtom);\n\tconst [userList, setUserList] = useAtom(chatAtom.userListAtom);\n\tconst [dmHistoryList, setDmHistoryList] = useAtom(chatAtom.dmHistoryListAtom);\n\tconst [followingList, setFollowingList] = useAtom(chatAtom.followingListAtom);\n\tconst [blockList, setBlockList] = useAtom(chatAtom.blockListAtom);\n\tconst [focusRoom, setFocusRoom] = useAtom(chatAtom.focusRoomAtom);\n\tconst [socketState, setSocketState] = useAtom(chatAtom.socketStateAtom);\n\n\tconst navigate = useNavigate();\n\tconst [, setRefreshToken] = useAtom(refreshTokenAtom);\n\n\tconst [gameInviteModal, setGameInviteModal] = useAtom(gameInviteModalAtom);\n\tconst [adminConsole, setAdminConsole] = useAtom(chatAtom.adminConsoleAtom);\n\tconst [passwordModal, setPasswordModal] = useAtom(passwordInputModalAtom);\n\tconst [clickRoom] = useAtom(chatAtom.clickRoomAtom);\n\tconst [tfa, setTfa] = useAtom(TFAAtom);\n\n\tPressKey([\"F4\"], () => {\n\t\tsetAdminConsole((prev) => !prev);\n\t});\n\n\tconst getRoomList = () => {\n\t\tAdminLogPrinter(adminConsole, \"\\n\\ngetRoomList\");\n\t\tObject.entries(roomList).forEach(([key, value]) => {\n\t\t\tif (value.detail !== undefined) {\n\t\t\t\tAdminLogPrinter(adminConsole, `\\n[ ${value.roomName} : ${key}] - ${value.roomType}`);\n\t\t\t\tObject.entries(value.detail).forEach(([key, value]) => {\n\t\t\t\t\tif (key === \"userList\") {\n\t\t\t\t\t\tObject.entries(value).forEach(([key, value]) => {\n\t\t\t\t\t\t\tAdminLogPrinter(adminConsole, `uid: ${key}, value: ${JSON.stringify(value)}`);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tAdminLogPrinter(adminConsole, `key: ${key}, value: ${JSON.stringify(value)}`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tAdminLogPrinter(adminConsole, `[ ${value.roomName} ] \\nvalue: ${JSON.stringify(value)}`);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst getUserList = () => {\n\t\tAdminLogPrinter(adminConsole, \"\\n\\ngetUserList\");\n\t\tObject.entries(userList).forEach(([key, value]) => {\n\t\t\tAdminLogPrinter(adminConsole, `[ ${value.userDisplayName} ]\\nkey: ${key}, value: ${JSON.stringify(value)}`);\n\t\t});\n\t};\n\n\tconst getDMList = () => {\n\t\tAdminLogPrinter(adminConsole, \"\\n\\ngetDmHitoryList\");\n\t\tObject.entries(dmHistoryList).forEach(([key, value]) => {\n\t\t\tAdminLogPrinter(adminConsole, `[ ${value.userDisplayName} ]\\nkey: ${key}, value: ${JSON.stringify(value)}`);\n\t\t});\n\t};\n\n\tconst getFollowingList = () => {\n\t\tAdminLogPrinter(adminConsole, `\\n\\ngetFollowingList`);\n\t\tObject.entries(followingList).forEach(([key, value]) => {\n\t\t\tAdminLogPrinter(adminConsole, `[ ${value.userDisplayName} ]\\nkey: ${key}, value: ${JSON.stringify(value)}`);\n\t\t});\n\t};\n\n\tconst showSocketState = () => {\n\t\tAdminLogPrinter(adminConsole, `socket state: ${socketState}`);\n\t};\n\n\n\tconst getBlockList = () => {\n\t\tAdminLogPrinter(adminConsole, `\\n\\ngetBlockList`);\n\t\tObject.entries(blockList).forEach(([key, value]) => {\n\t\t\tAdminLogPrinter(adminConsole, `[ ${userList[Number(key)]?.userDisplayName} ]\\nkey: ${key}, value: ${JSON.stringify(value)}`);\n\t\t});\n\n\t};\n\n\tconst showMyinfo = () => {\n\t\tAdminLogPrinter(adminConsole, `showMyinfo ${JSON.stringify(userInfo)}}`);\n\t};\n\n\tconst showServerUser = () => {\n\t\tAdminLogPrinter(adminConsole, \"\\nshow server user list\");\n\t\tsocket.socket.emit(\"server-user-list\");\n\t};\n\n\tconst showServerRoom = () => {\n\t\tAdminLogPrinter(adminConsole, \"\\nshow server room list\");\n\t\tsocket.socket.emit(\"server-room-list\");\n\t};\n\n\tconst logOutHandler = () => {\n\t\tLogOut(adminConsole, setRefreshToken, navigate, \"/\");\n\t\tsetHasLogin(false);\n\t\tsetIsFirstLogin(true);\n\t};\n\n\tconst quitRoomRelativeModal = () => {\n\t\tsetUserInfoModal(false);\n\t\tsetInviteModal(false);\n\t\t// setRoomModal(false);\n\t\t// setPwInputModal(false);\n\t}\n\n\tasync function getMyinfoHandler() {\n\t\tconst getMeResponse = await GetMyInfo(adminConsole, setUserInfo, setTfa, true);\n\t\tif (getMeResponse == 401) {\n\t\t\tconst refreshResponse = await RefreshToken(adminConsole);\n\t\t\tif (refreshResponse !== 201) {\n\t\t\t\tlogOutHandler();\n\t\t\t} else {\n\t\t\t\tconst getMeResponse = await GetMyInfo(adminConsole, setUserInfo, setTfa, true);\n\t\t\t\tif (getMeResponse == 401) {\n\t\t\t\t\tlogOutHandler();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tsocket.socket.onAny((eventName, ...args) => {\n\t\t\tAdminLogPrinter(adminConsole, \"incoming \", eventName, args);\n\t\t});\n\t\t// catch all outgoing events\n\t\tsocket.socket.onAnyOutgoing((eventName, ...args) => {\n\t\t\tAdminLogPrinter(adminConsole, \"outgoing \", eventName, args);\n\t\t});\n\t\tsocket.socket.on(\"connect\", () => {\n\t\t\tif (socket.socket.connected) {\n\t\t\t\t//This attribute describes whether the socket is currently connected to the server.\n\t\t\t\tif (socket.socket.recovered) {\n\t\t\t\t\t// any missed packets will be received\n\t\t\t\t} else {\n\t\t\t\t\t// new or unrecoverable session\n\t\t\t\t\tAdminLogPrinter(adminConsole, \"socket connected : \" + socket.socket.id);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetSocketState(true);\n\t\t});\n\t\t//https://socket.io/docs/v4/client-socket-instance/#disconnect\n\t\tsocket.socket.on(\"disconnect\", (reason) => {\n\t\t\tAdminLogPrinter(adminConsole, \"socket disconnected reason: \" + reason);\n\t\t\t/**\n\t\t\t *  BAD, will throw an error\n\t\t\t *  socket.emit(\"disconnect\");\n\t\t\t*/\n\t\t\tif (reason === \"io server disconnect\") {\n\t\t\t\t// the disconnection was initiated by the server, you need to reconnect manually\n\t\t\t\tAdminLogPrinter(adminConsole, 'socket disconnected by server');\n\t\t\t\tsocket.socket.removeAllListeners();\n\t\t\t}\n\t\t\t// else the socket will automatically try to reconnect\n\t\t\tAdminLogPrinter(adminConsole, \"socket disconnected\");\n\t\t\tsetSocketState(false);\n\t\t});\n\t\t// the connection is denied by the server in a middleware function\n\t\tsocket.socket.on(\"connect_error\", (err) => {\n\t\t\tif (err.message === \"unauthorized\") {\n\t\t\t\t// handle each case\n\t\t\t}\n\t\t\tAdminLogPrinter(adminConsole, err.message); // prints the message associated with the error\n\t\t});\n\t\tsocket.socket.on(\"multiple-login\", () => {\n\t\t\t// \talert(`multiple login detected!`);\n\t\t\tLogOut(adminConsole, setRefreshToken, navigate, \"/\", 'refresh');\n\t\t\tsetHasLogin(false);\n\t\t\tsetIsFirstLogin(true);\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"connect\");\n\t\t\tsocket.socket.off(\"disconnect\");\n\t\t\tsocket.socket.off(\"connect_error\");\n\t\t\tsocket.socket.offAny();\n\t\t\tsocket.socket.offAnyOutgoing();\n\t\t\tsocket.socket.off(\"multiple-login\");\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"logout\", () => {\n\t\t\tLogOut(adminConsole, setRefreshToken, navigate, \"/\");\n\t\t\tsetHasLogin(false);\n\t\t\tsetIsFirstLogin(true);\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"logout\");\n\t\t};\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"dm-list\", (resDmUserList, mergeDmList) => {\n\t\t\tconst tempDmRoomList: chatType.roomListDto = {};\n\n\t\t\tsetDmHistoryList({ ...resDmUserList });\n\t\t\tsetUserList((prevUserList) => ({ ...prevUserList, ...resDmUserList }));\n\t\t\tObject.entries(resDmUserList).forEach(([dmUser]) => {\n\t\t\t\ttempDmRoomList[Number(dmUser)] = {\n\t\t\t\t\troomName: 'DM',\n\t\t\t\t\troomType: 'dm',\n\t\t\t\t\tisJoined: true,\n\t\t\t\t\tdetail: {\n\t\t\t\t\t\tuserList: {\n\t\t\t\t\t\t\t[Number(dmUser)]: {\n\t\t\t\t\t\t\t\tuserRoomPower: 'member',\n\t\t\t\t\t\t\t\tuserRoomStatus: 'normal',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t[userInfo.uid]: {\n\t\t\t\t\t\t\t\tuserRoomPower: 'member',\n\t\t\t\t\t\t\t\tuserRoomStatus: 'normal',\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmessageList: [],\n\t\t\t\t\t\tmyRoomStatus: 'normal',\n\t\t\t\t\t\tmyRoomPower: 'member'\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tObject.entries(mergeDmList).forEach((atom: any[]) => {\n\t\t\t\tif (Number(atom[1].senderId!) === userInfo.uid) { // from me\n\t\t\t\t\tconst tempMessageList: chatType.roomMessageDto[] = tempDmRoomList[Number(atom[1]?.receiverId!)].detail?.messageList!;\n\t\t\t\t\ttempMessageList?.unshift({\n\t\t\t\t\t\tuserId: userInfo.uid,\n\t\t\t\t\t\tuserName: userInfo.nickname,\n\t\t\t\t\t\tmessage: atom[1]?.message!,\n\t\t\t\t\t\tisMe: true,\n\t\t\t\t\t\tnumber: tempMessageList.length\n\t\t\t\t\t});\n\t\t\t\t\ttempDmRoomList[Number(atom[1]?.receiverId!)] = {\n\t\t\t\t\t\troomName: 'DM',\n\t\t\t\t\t\troomType: 'dm',\n\t\t\t\t\t\tisJoined: true,\n\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\tuserList: { ...tempDmRoomList[Number(atom[1]?.receiverId!)].detail?.userList },\n\t\t\t\t\t\t\tmyRoomPower: 'member',\n\t\t\t\t\t\t\tmyRoomStatus: 'normal',\n\t\t\t\t\t\t\tmessageList: tempMessageList\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else { // to me\n\t\t\t\t\tif (atom[1].blockFromReceiver) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst tempMessageList: chatType.roomMessageDto[] = tempDmRoomList[Number(atom[1]?.senderId!)]?.detail?.messageList!;\n\t\t\t\t\ttempMessageList?.unshift({\n\t\t\t\t\t\tuserId: Number(atom[1]?.senderId!),\n\t\t\t\t\t\tuserName: resDmUserList[Number(atom[1]?.senderId!)]?.userDisplayName,\n\t\t\t\t\t\tmessage: atom[1]?.message!,\n\t\t\t\t\t\tisMe: false,\n\t\t\t\t\t\tnumber: tempMessageList.length\n\t\t\t\t\t});\n\t\t\t\t\ttempDmRoomList[Number(atom[1]?.senderId!)] = {\n\t\t\t\t\t\troomName: 'DM',\n\t\t\t\t\t\troomType: 'dm',\n\t\t\t\t\t\tisJoined: true,\n\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\tuserList: { ...tempDmRoomList[Number(atom[1]?.senderId!)]?.detail?.userList },\n\t\t\t\t\t\t\tmyRoomPower: 'member',\n\t\t\t\t\t\t\tmyRoomStatus: 'normal',\n\t\t\t\t\t\t\tmessageList: tempMessageList\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tsetRoomList((prevRoomList) => ({ ...prevRoomList, ...tempDmRoomList }));\n\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"dm-list\");\n\t\t};\n\t}, [userInfo, roomList, dmHistoryList, userList]);\n\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"room-list\", (resRoomList: chatType.roomListDto) => {\n\t\t\tsetRoomList((prevRoomList) => ({ ...prevRoomList, ...resRoomList }));\n\t\t});\n\t\tsocket.socket.on(\"follow-list\", (resFollowingList: chatType.userDto) => {\n\t\t\tsetFollowingList({ ...resFollowingList });\n\t\t\tsetUserList((prevUserList) => ({ ...resFollowingList, ...prevUserList }));\n\t\t});\n\t\tsocket.socket.on(\"block-list\", (resBlockList: chatType.userSimpleDto) => {\n\t\t\tsetBlockList({ ...resBlockList });\n\t\t});\n\t\tsocket.socket.on(\"user-list\", (resUserList: chatType.userDto) => {\n\t\t\tsetUserList((prevUserList) => ({ ...prevUserList, ...resUserList }))\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"room-list\");\n\t\t\tsocket.socket.off(\"follow-list\");\n\t\t\tsocket.socket.off(\"block-list\");\n\t\t\tsocket.socket.off(\"user-list\");\n\t\t}\n\t}, [userList, roomList, followingList, blockList]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"room-list-update\", ({\n\t\t\taction,\n\t\t\troomId,\n\t\t\troomName,\n\t\t\troomType,\n\t\t}: {\n\t\t\taction: 'new' | 'delete' | 'edit';\n\t\t\troomId: number;\n\t\t\troomName: string;\n\t\t\troomType: 'open' | 'protected' | 'private';\n\t\t}) => {\n\t\t\tswitch (action) {\n\t\t\t\tcase 'new': {\n\t\t\t\t\tconst newRoomList: chatType.roomListDto = {};\n\t\t\t\t\tnewRoomList[roomId] = {\n\t\t\t\t\t\troomName,\n\t\t\t\t\t\troomType,\n\t\t\t\t\t\tisJoined: false,\n\t\t\t\t\t};\n\t\t\t\t\tAdminLogPrinter(adminConsole, `room-list-update new: ${JSON.stringify(newRoomList)}`);\n\t\t\t\t\tAdminLogPrinter(adminConsole, `room-list-update origin: ${JSON.stringify(roomList)}`);\n\t\t\t\t\tsetRoomList({ ...roomList, ...newRoomList });\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'delete': {\n\t\t\t\t\tconst newRoomList: chatType.roomListDto = { ...roomList };\n\t\t\t\t\tdelete newRoomList[roomId];\n\t\t\t\t\tsetRoomList({ ...newRoomList });\n\t\t\t\t\tif (focusRoom == roomId) {\n\t\t\t\t\t\tsetFocusRoom(-1);\n\t\t\t\t\t}\n\t\t\t\t\tif (passwordModal && roomId === clickRoom) {\n\t\t\t\t\t\tsetPasswordModal(false);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'edit': {\n\t\t\t\t\tconst newRoomList: chatType.roomListDto = {};\n\t\t\t\t\tnewRoomList[roomId] = {\n\t\t\t\t\t\troomName,\n\t\t\t\t\t\troomType,\n\t\t\t\t\t\tisJoined: roomList[roomId]?.isJoined,\n\t\t\t\t\t\tdetail: roomList[roomId].detail || {} as chatType.roomDetailDto,\n\t\t\t\t\t};\n\t\t\t\t\tsetRoomList({ ...roomList, ...newRoomList });\n\t\t\t\t\tif (passwordModal && roomId === clickRoom) {\n\t\t\t\t\t\tsetPasswordModal(false);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"room-list-update\");\n\t\t};\n\t}, [roomList, focusRoom, passwordModal, clickRoom]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"room-clear\", () => {\n\t\t\tquitRoomRelativeModal();\n\t\t\tsetRoomList({});\n\t\t\tsetFocusRoom(-1);\n\t\t});\n\t\tsocket.socket.on(\"user-clear\", () => {\n\t\t\tsetUserList({});\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"room-clear\");\n\t\t\tsocket.socket.off(\"user-clear\");\n\t\t};\n\t}, [roomList, userList, setRoomList, setUserList]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"room-join\", ({\n\t\t\troomId,\n\t\t\troomName,\n\t\t\troomType,\n\t\t\troomUserList = {},\n\t\t\tmyPower,\n\t\t\tstatus,\n\t\t\tmethod = ''\n\t\t}: {\n\t\t\troomId: number,\n\t\t\troomName: string,\n\t\t\troomType: 'open' | 'protected' | 'private' | 'dm',\n\t\t\troomUserList: chatType.userInRoomListDto,\n\t\t\tmyPower: chatType.userRoomPower,\n\t\t\tstatus: 'ok' | 'ko',\n\t\t\tmethod?: 'invite' | ''\n\t\t}) => {\n\t\t\tswitch (status) {\n\t\t\t\tcase 'ok': {\n\t\t\t\t\tAdminLogPrinter(adminConsole, `join [${roomName}]room`);\n\t\t\t\t\tconst newRoomList: chatType.roomListDto = {};\n\t\t\t\t\tnewRoomList[roomId] = {\n\t\t\t\t\t\troomName,\n\t\t\t\t\t\troomType,\n\t\t\t\t\t\tisJoined: true,\n\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\tuserList: { ...roomUserList },\n\t\t\t\t\t\t\tmessageList: [],\n\t\t\t\t\t\t\tmyRoomStatus: 'normal',\n\t\t\t\t\t\t\tmyRoomPower: myPower\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tAdminLogPrinter(adminConsole, `room - join new: ${JSON.stringify(newRoomList)}`);\n\t\t\t\t\tsetRoomList({ ...roomList, ...newRoomList });\n\t\t\t\t\tif (method !== 'invite') {\n\t\t\t\t\t\tsetFocusRoom(roomId);\n\t\t\t\t\t}\n\t\t\t\t\tif (roomType === 'dm') {\n\t\t\t\t\t\tconst newDmUser: chatType.userDto = {};\n\t\t\t\t\t\tnewDmUser[roomId] = {\n\t\t\t\t\t\t\tuserDisplayName: userList[roomId].userDisplayName,\n\t\t\t\t\t\t\tuserProfileUrl: userList[roomId].userProfileUrl,\n\t\t\t\t\t\t\tuserStatus: userList[roomId].userStatus,\n\t\t\t\t\t\t\tdmStatus: method === 'invite' ? 'unread' : 'read',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsetDmHistoryList((prevDmHistoryList) => ({ ...prevDmHistoryList, ...newDmUser }));\n\t\t\t\t\t\tsetUserList((prevUserList) => ({ ...prevUserList, ...newDmUser }));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'ko': {\n\t\t\t\t\tif (roomList[roomId].isJoined === false) {\n\t\t\t\t\t\talert(`fail to join[${roomName}]room`);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"room-join\");\n\t\t};\n\t}, [roomList, userList, dmHistoryList]);\n\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"room-in-action\", ({\n\t\t\troomId,\n\t\t\taction,\n\t\t\ttargetId\n\t\t}: {\n\t\t\troomId: number;\n\t\t\taction: 'ban' | 'kick' | 'mute' | 'admin' | 'normal' | 'owner' | 'leave' | 'newMember';\n\t\t\ttargetId: number\n\t\t}) => {\n\t\t\tif (roomList[roomId]?.isJoined !== true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch (action) {\n\t\t\t\tcase 'newMember': {\n\t\t\t\t\tif (targetId === userInfo.uid) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst newUser: chatType.userInRoomListDto = {};\n\t\t\t\t\t\tnewUser[targetId] = {\n\t\t\t\t\t\t\tuserRoomStatus: 'normal',\n\t\t\t\t\t\t\tuserRoomPower: 'member'\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = { ...roomList[roomId].detail?.userList!, ...newUser };\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList })\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'ban':\n\t\t\t\tcase 'leave':\n\t\t\t\tcase 'kick': {\n\t\t\t\t\tif (targetId === userInfo.uid) {\n\t\t\t\t\t\tif (roomList[roomId].roomType === 'private') {\n\t\t\t\t\t\t\tconst newRoomList: chatType.roomListDto = { ...roomList };\n\t\t\t\t\t\t\tdelete newRoomList[roomId];\n\t\t\t\t\t\t\tsetRoomList({ ...newRoomList });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst newRoomList: chatType.roomListDto = {};\n\t\t\t\t\t\t\tnewRoomList[roomId] = {\n\t\t\t\t\t\t\t\troomName: roomList[roomId].roomName,\n\t\t\t\t\t\t\t\troomType: roomList[roomId].roomType,\n\t\t\t\t\t\t\t\tisJoined: false,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetRoomList({ ...roomList, ...newRoomList });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (focusRoom === roomId) {\n\t\t\t\t\t\t\tsetFocusRoom(-1);\n\t\t\t\t\t\t\tquitRoomRelativeModal();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n\t\t\t\t\t\tdelete newUserList[targetId];\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList });\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'mute':\n\t\t\t\tcase 'normal': {\n\t\t\t\t\tif (targetId === userInfo.uid) {\n\t\t\t\t\t\tif (action === 'mute' && roomList[roomId].detail?.myRoomStatus === 'mute') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n\t\t\t\t\t\tnewUserList[targetId] = { ...newUserList[targetId], userRoomStatus: action };\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList }, action);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n\t\t\t\t\t\tnewUserList[targetId] = { ...newUserList[targetId], userRoomStatus: action };\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList });\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'owner':\n\t\t\t\tcase 'admin': {\n\t\t\t\t\tif (targetId === userInfo.uid) {\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n\t\t\t\t\t\tnewUserList[targetId] = { ...newUserList[targetId], userRoomPower: action };\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList }, undefined, action);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n\t\t\t\t\t\tnewUserList[targetId] = { ...newUserList[targetId], userRoomPower: action };\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList });\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"room-in-action\");\n\t\t}\n\t}, [roomList, userInfo, focusRoom]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"user-update\", ({\n\t\t\tuserId,\n\t\t\tuserDisplayName,\n\t\t\tuserProfileUrl,\n\t\t\tuserStatus\n\t\t}: {\n\t\t\tuserId: number,\n\t\t\tuserDisplayName: string\n\t\t\tuserProfileUrl: string;\n\t\t\tuserStatus: 'online' | 'offline' | 'inGame';\n\t\t}) => {\n\t\t\tconst newUser: chatType.userDto = {};\n\t\t\tnewUser[userId] = {\n\t\t\t\tuserDisplayName,\n\t\t\t\tuserProfileUrl,\n\t\t\t\tuserStatus,\n\t\t\t};\n\t\t\tAdminLogPrinter(adminConsole, `user-update: ${userDisplayName}: ${userStatus}`);\n\t\t\tsetUserList((prevUserList) => ({ ...prevUserList, ...newUser }));\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"user-update\");\n\t\t}\n\t}, [userList, isFirstLogin]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"message\", ({\n\t\t\troomId,\n\t\t\tfrom,\n\t\t\tmessage\n\t\t}: {\n\t\t\troomId: number,\n\t\t\tfrom: number,\n\t\t\tmessage: string\n\t\t}) => {\n\t\t\tconst block = blockList[from] ? true : false;\n\t\t\tswitch (block) {\n\t\t\t\tcase true: {\n\t\t\t\t\tAdminLogPrinter(adminConsole, `message from ${from} is blocked`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase false: {\n\t\t\t\t\tAdminLogPrinter(adminConsole, `message from ${from} is received: ${message}`);\n\t\t\t\t\tconst newMessageList: chatType.roomMessageDto[] = roomList[roomId].detail?.messageList!;\n\t\t\t\t\tnewMessageList.unshift({\n\t\t\t\t\t\tuserId: from,\n\t\t\t\t\t\tuserName: userList[from].userDisplayName,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tisMe: userInfo.uid === from ? true : false,\n\t\t\t\t\t\tnumber: roomList[roomId].detail?.messageList.length!\n\t\t\t\t\t});\n\t\t\t\t\tconst newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, messageList: [...newMessageList] };\n\t\t\t\t\tconst newRoomList: chatType.roomListDto = {};\n\t\t\t\t\tnewRoomList[roomId] = {\n\t\t\t\t\t\troomName: roomList[roomId].roomName,\n\t\t\t\t\t\troomType: roomList[roomId].roomType,\n\t\t\t\t\t\tisJoined: roomList[roomId].isJoined,\n\t\t\t\t\t\tdetail: newDetail as chatType.roomDetailDto\n\t\t\t\t\t};\n\t\t\t\t\tif (roomList[roomId].roomType === 'dm' && focusRoom !== roomId) {\n\t\t\t\t\t\tconst newDmUser: chatType.userDto = {};\n\t\t\t\t\t\tnewDmUser[roomId] = {\n\t\t\t\t\t\t\tuserDisplayName: userList[roomId].userDisplayName,\n\t\t\t\t\t\t\tuserProfileUrl: userList[roomId].userProfileUrl,\n\t\t\t\t\t\t\tuserStatus: userList[roomId].userStatus,\n\t\t\t\t\t\t\tdmStatus: 'unread',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsetUserList({ ...userList, ...newDmUser });\n\t\t\t\t\t}\n\t\t\t\t\tsetRoomList({ ...roomList, ...newRoomList });\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"message\");\n\t\t};\n\t}, [roomList, blockList, userList, userInfo, focusRoom]);\n\n\tasync function firstLogin() {\n\t\tif (isFirstLogin) {\n\t\t\tawait getMyinfoHandler();\n\t\t\tsetTimeout(() => {\n\t\t\t\tsocket.socket.connect();\n\t\t\t}, 420);\n\t\t\tsetIsFirstLogin(false);\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (isFirstLogin) {\n\t\t\tfirstLogin();\n\t\t}\n\t}, [firstLogin]);\n\n\n\treturn (\n\t\t<BackGround>\n\t\t\t{\n\t\t\t\tadminConsole\n\t\t\t\t\t? <div>\n\t\t\t\t\t\t<button onClick={getMyinfoHandler}> /user/me</button>\n\t\t\t\t\t\t<button onClick={showMyinfo}> show /user/me</button>\n\t\t\t\t\t\t<button onClick={getRoomList}> roomList</button>\n\t\t\t\t\t\t<button onClick={getUserList}> userList</button>\n\t\t\t\t\t\t<button onClick={getDMList}> dmHistoryList</button>\n\t\t\t\t\t\t<button onClick={getFollowingList}> FollowList</button>\n\t\t\t\t\t\t<button onClick={getBlockList}> BlockList</button>\n\t\t\t\t\t\t<button onClick={showServerUser}> show server user</button>\n\t\t\t\t\t\t<button onClick={showServerRoom}> show server room</button>\n\t\t\t\t\t\t<button onClick={showSocketState}> socket state</button>\n\t\t\t\t\t\t<button onClick={() => setGameInviteModal(true)}> gameinvite</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t: ''\n\t\t\t}\n\t\t\t<TopBar />\n\t\t\t{userInfoModal ? <UserInfoModal /> : null}\n\t\t\t{roomModal ? <RoomModal /> : null}\n\t\t\t{inviteModal ? <RoomInviteModal /> : null}\n\t\t\t{pwInputModal ? <PasswordModal /> : null}\n\t\t\t{gameInviteModal ? (\n\t\t\t\t<GameInviteModal\n\t\t\t\t\tfrom=\"yuhwang\"\n\t\t\t\t\tAcceptBtn={() => {\n\t\t\t\t\t\tsetGameInviteModal(false);\n\t\t\t\t\t}}\n\t\t\t\t\tDeclineBtn={() => { }}\n\t\t\t\t/>\n\t\t\t) : null}\n\t\t\t<ChatRoomList />\n\t\t\t<ChatUserList />\n\t\t\t<ChatArea />\n\t\t\t<ChatRoomUserList />\n\t\t</BackGround>\n\t);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}