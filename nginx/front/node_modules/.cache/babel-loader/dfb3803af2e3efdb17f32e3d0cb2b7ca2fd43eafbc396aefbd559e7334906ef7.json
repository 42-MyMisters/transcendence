{"ast":null,"code":"var _jsxFileName = \"/data/front/src/pages/GamePage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport BackGround from \"../components/BackGround\";\nimport \"../components/GamePage/PingPong\";\nimport PingPong from \"../components/GamePage/PingPong\";\nimport TopBar from \"../components/TopBar\";\nimport { useAtom } from \"jotai\";\nimport { isGameStartedAtom, isLoadingAtom, isPrivateAtom, serverClientTimeDiffAtom } from \"../components/atom/GameAtom\";\nimport * as game from \"../socket/game.socket\";\nimport * as chatAtom from \"../components/atom/ChatAtom\";\nimport { gameResultModalAtom } from \"../components/atom/ModalAtom\";\nimport GameResultModal from \"../components/GamePage/GameResultModal\";\nimport LadderBoard from \"../components/GamePage/LadderBoard\";\nimport Waiting from \"../components/GamePage/Waiting\";\nimport { AdminLogPrinter, PressKey } from \"../event/event.util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamePage() {\n  _s();\n  const [showComponent, setShowComponent] = useState(true);\n  const [gameResultModal, setGameResultModal] = useAtom(gameResultModalAtom);\n  const [isLoading, setIsLoading] = useAtom(isLoadingAtom);\n  const [isPrivate, setIsPrivate] = useAtom(isPrivateAtom);\n  const [isGameStart, setIsGameStart] = useAtom(isGameStartedAtom);\n  const [adminConsole, setAdminConsole] = useAtom(chatAtom.adminConsoleAtom);\n  const [serverClientTimeDiff, setServerClientTimeDiff] = useAtom(serverClientTimeDiffAtom);\n  let pingInterval;\n\n  // 1 sec delay for init value\n  let pingRTTmin = 2000;\n  PressKey([\"F4\"], () => {\n    setAdminConsole(prev => !prev);\n  });\n  useEffect(() => {\n    if (isLoading === false) {\n      AdminLogPrinter(adminConsole, \"gameSocket connection\");\n      game.gameSocket.connect();\n      setIsLoading(true);\n    }\n    return () => {\n      game.gameSocket.disconnect();\n    };\n  }, [game.gameSocket]);\n  const connectionEventHandler = () => {\n    if (game.gameSocket.connected) {\n      //This attribute describes whether the socket is currently connected to the server.\n      if (game.gameSocket.recovered) {\n        // any missed packets will be received\n      } else {\n        // new or unrecoverable session\n        AdminLogPrinter(adminConsole, \"gameSocket connected\");\n        pingInterval = setInterval(pingEvent, 1000);\n      }\n    }\n  };\n\n  //https://socket.io/docs/v4/client-socket-instance/#disconnect\n  const disconnectionEventHandler = reason => {\n    if (reason === \"io server disconnect\") {}\n    clearInterval(pingInterval);\n    // setIsQueue(false);\n    setIsLoading(false);\n    setIsPrivate(false);\n    AdminLogPrinter(adminConsole, \"gameSocket disconnected\");\n  };\n  const pingEvent = () => {\n    const curTime = Date.now();\n    const pingEventHandler = serverTime => {\n      const now = Date.now();\n      const pingRTT = now - curTime;\n      AdminLogPrinter(adminConsole, `pingRTT: ${pingRTT}ms`);\n      if (pingRTTmin > pingRTT) {\n        pingRTTmin = pingRTT;\n        const adjServerTime = serverTime + pingRTTmin / 2;\n        AdminLogPrinter(adminConsole, `updated serverClientTimeDiff: ${serverClientTimeDiff}ms`);\n        setServerClientTimeDiff(now - adjServerTime);\n        AdminLogPrinter(adminConsole, `updated serverClientTimeDiff: ${serverClientTimeDiff}ms`);\n      }\n      AdminLogPrinter(adminConsole, `pingRTTmin: ${pingRTTmin}ms`);\n    };\n    game.gameSocket.emit(\"ping\", pingEventHandler);\n    return () => {\n      game.gameSocket.off(\"ping\", pingEventHandler);\n    };\n  };\n  const startEventHandler = () => {\n    AdminLogPrinter(adminConsole, \"game start\");\n    setIsLoading(false);\n    setIsGameStart(true);\n  };\n  useEffect(() => {\n    AdminLogPrinter(adminConsole, `useeffect: isLoading: ${isLoading}, isPrivate: ${isPrivate}, isGameStart: ${isGameStart}`);\n  }, [isLoading, isPrivate, isGameStart]);\n  useEffect(() => {\n    game.gameSocket.on(\"connect\", connectionEventHandler);\n    game.gameSocket.on(\"disconnect\", disconnectionEventHandler);\n    game.gameSocket.on(\"gameStart\", startEventHandler);\n    // game.gameSocket.on(\"isQueue\", queueEventHandler);\n    // game.gameSocket.on(\"isLoading\", loadingEventHandler);\n    return () => {\n      game.gameSocket.off(\"connect\", connectionEventHandler);\n      game.gameSocket.off(\"disconnect\", disconnectionEventHandler);\n      game.gameSocket.off(\"gameStart\", startEventHandler);\n      // game.gameSocket.off(\"isQueue\", queueEventHandler);\n      // game.gameSocket.off(\"isLoading\", loadingEventHandler);\n    };\n  }, [isLoading, isPrivate, isGameStart]);\n  return /*#__PURE__*/_jsxDEV(BackGround, {\n    children: [adminConsole ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const loading = !isLoading;\n          setIsLoading(loading);\n        },\n        children: \"LadderRanking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const gameOverModal = !gameResultModal;\n          setGameResultModal(gameOverModal);\n        },\n        children: \"GameOver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(TopBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), isLoading ? isPrivate ? /*#__PURE__*/_jsxDEV(Waiting, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(LadderBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }, this) : isGameStart ? /*#__PURE__*/_jsxDEV(PingPong, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Waiting, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this), gameResultModal ? /*#__PURE__*/_jsxDEV(GameResultModal, {\n      result: true,\n      leftScore: 5,\n      rightScore: 4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 26\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n_s(GamePage, \"kzVjedPcGPOiiz7JWjYgQwZt5wk=\", false, function () {\n  return [useAtom, useAtom, useAtom, useAtom, useAtom, useAtom];\n});\n_c = GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["useEffect","useState","BackGround","PingPong","TopBar","useAtom","isGameStartedAtom","isLoadingAtom","isPrivateAtom","serverClientTimeDiffAtom","game","chatAtom","gameResultModalAtom","GameResultModal","LadderBoard","Waiting","AdminLogPrinter","PressKey","jsxDEV","_jsxDEV","GamePage","_s","showComponent","setShowComponent","gameResultModal","setGameResultModal","isLoading","setIsLoading","isPrivate","setIsPrivate","isGameStart","setIsGameStart","adminConsole","setAdminConsole","adminConsoleAtom","serverClientTimeDiff","setServerClientTimeDiff","pingInterval","pingRTTmin","prev","gameSocket","connect","disconnect","connectionEventHandler","connected","recovered","setInterval","pingEvent","disconnectionEventHandler","reason","clearInterval","curTime","Date","now","pingEventHandler","serverTime","pingRTT","adjServerTime","emit","off","startEventHandler","on","children","onClick","loading","fileName","_jsxFileName","lineNumber","columnNumber","gameOverModal","result","leftScore","rightScore","_c","$RefreshReg$"],"sources":["/data/front/src/pages/GamePage.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport BackGround from \"../components/BackGround\";\nimport \"../components/GamePage/PingPong\";\nimport PingPong from \"../components/GamePage/PingPong\";\nimport TopBar from \"../components/TopBar\";\n\nimport { useAtom } from \"jotai\";\nimport {\n  isGameStartedAtom,\n  isLoadingAtom,\n  isPrivateAtom,\n  serverClientTimeDiffAtom,\n} from \"../components/atom/GameAtom\";\n\nimport * as game from \"../socket/game.socket\";\n\nimport * as chatAtom from \"../components/atom/ChatAtom\";\nimport { gameResultModalAtom } from \"../components/atom/ModalAtom\";\nimport GameResultModal from \"../components/GamePage/GameResultModal\";\nimport LadderBoard from \"../components/GamePage/LadderBoard\";\n\nimport Waiting from \"../components/GamePage/Waiting\";\nimport { AdminLogPrinter, PressKey } from \"../event/event.util\";\n\nexport default function GamePage() {\n  const [showComponent, setShowComponent] = useState(true);\n  const [gameResultModal, setGameResultModal] = useAtom(gameResultModalAtom);\n\n  const [isLoading, setIsLoading] = useAtom(isLoadingAtom);\n  const [isPrivate, setIsPrivate] = useAtom(isPrivateAtom);\n  const [isGameStart, setIsGameStart] = useAtom(isGameStartedAtom);\n\n  const [adminConsole, setAdminConsole] = useAtom(chatAtom.adminConsoleAtom);\n\n  const [serverClientTimeDiff, setServerClientTimeDiff] = useAtom(serverClientTimeDiffAtom);\n\n  let pingInterval: NodeJS.Timer;\n\n  // 1 sec delay for init value\n  let pingRTTmin: number = 2000;\n\n  PressKey([\"F4\"], () => {\n    setAdminConsole((prev) => !prev);\n  });\n\n  useEffect(() => {\n    if (isLoading === false) {\n      AdminLogPrinter(adminConsole, \"gameSocket connection\");\n      game.gameSocket.connect();\n      setIsLoading(true);\n    }\n    return () => {\n      game.gameSocket.disconnect();\n    };\n  }, [game.gameSocket]);\n\n  const connectionEventHandler = () => {\n    if (game.gameSocket.connected) {\n      //This attribute describes whether the socket is currently connected to the server.\n      if (game.gameSocket.recovered) {\n        // any missed packets will be received\n      } else {\n        // new or unrecoverable session\n        AdminLogPrinter(adminConsole, \"gameSocket connected\");\n        pingInterval = setInterval(pingEvent, 1000);\n      }\n    }\n  };\n\n  //https://socket.io/docs/v4/client-socket-instance/#disconnect\n  const disconnectionEventHandler = (reason: string) => {\n    if (reason === \"io server disconnect\") {\n    }\n    clearInterval(pingInterval);\n    // setIsQueue(false);\n    setIsLoading(false);\n    setIsPrivate(false);\n    AdminLogPrinter(adminConsole, \"gameSocket disconnected\");\n  };\n\n  const pingEvent = () => {\n    const curTime = Date.now();\n    const pingEventHandler = (serverTime: number) => {\n      const now = Date.now();\n      const pingRTT = now - curTime;\n      AdminLogPrinter(adminConsole, `pingRTT: ${pingRTT}ms`);\n      if (pingRTTmin > pingRTT) {\n        pingRTTmin = pingRTT;\n        const adjServerTime = serverTime + pingRTTmin / 2;\n        AdminLogPrinter(adminConsole, `updated serverClientTimeDiff: ${serverClientTimeDiff}ms`);\n        setServerClientTimeDiff(now - adjServerTime);\n        AdminLogPrinter(adminConsole, `updated serverClientTimeDiff: ${serverClientTimeDiff}ms`);\n      }\n      AdminLogPrinter(adminConsole, `pingRTTmin: ${pingRTTmin}ms`);\n    };\n    game.gameSocket.emit(\"ping\", pingEventHandler);\n    return () => {\n      game.gameSocket.off(\"ping\", pingEventHandler);\n    };\n  };\n\n  const startEventHandler = () => {\n    AdminLogPrinter(adminConsole, \"game start\");\n    setIsLoading(false);\n    setIsGameStart(true);\n  };\n\n  useEffect(() => {\n    AdminLogPrinter(\n      adminConsole,\n      `useeffect: isLoading: ${isLoading}, isPrivate: ${isPrivate}, isGameStart: ${isGameStart}`\n    );\n  }, [isLoading, isPrivate, isGameStart]);\n\n  useEffect(() => {\n    game.gameSocket.on(\"connect\", connectionEventHandler);\n    game.gameSocket.on(\"disconnect\", disconnectionEventHandler);\n    game.gameSocket.on(\"gameStart\", startEventHandler);\n    // game.gameSocket.on(\"isQueue\", queueEventHandler);\n    // game.gameSocket.on(\"isLoading\", loadingEventHandler);\n    return () => {\n      game.gameSocket.off(\"connect\", connectionEventHandler);\n      game.gameSocket.off(\"disconnect\", disconnectionEventHandler);\n      game.gameSocket.off(\"gameStart\", startEventHandler);\n      // game.gameSocket.off(\"isQueue\", queueEventHandler);\n      // game.gameSocket.off(\"isLoading\", loadingEventHandler);\n    };\n  }, [isLoading, isPrivate, isGameStart]);\n\n  return (\n    <BackGround>\n      {adminConsole ? (\n        <div>\n          <button\n            onClick={() => {\n              const loading = !isLoading;\n              setIsLoading(loading);\n            }}\n          >\n            LadderRanking\n          </button>\n          <button\n            onClick={() => {\n              const gameOverModal = !gameResultModal;\n              setGameResultModal(gameOverModal);\n            }}\n          >\n            GameOver\n          </button>\n        </div>\n      ) : (\n        \"\"\n      )}\n      <TopBar />\n      {isLoading ? (\n        isPrivate ? (\n          <Waiting />\n        ) : (\n          <LadderBoard />\n        )\n      ) : isGameStart ? (\n        <PingPong />\n      ) : (\n        <Waiting />\n      )}\n      {gameResultModal ? <GameResultModal result={true} leftScore={5} rightScore={4} /> : null}\n    </BackGround>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}