{"ast":null,"code":"var _s = $RefreshSig$();\nimport { io } from 'socket.io-client';\nimport { useAtom } from \"jotai\";\nimport * as chatAtom from '../components/atom/SocketAtom';\nimport * as userAtom from '../components/atom/UserAtom';\nconst URL = \"http://localhost:4000\";\nconst NameSpace = \"/sock\";\nexport const socket = io(`${URL}${NameSpace}`, {\n  auth: cb => {\n    cb({\n      token: localStorage.getItem(\"refreshToken\")\n    });\n  },\n  autoConnect: false,\n  transports: [\"websocket\"]\n  // reconnectionDelay: 1000, // defaults to 1000\n  // reconnectionDelayMax: 10000, // defaults to 5000\n  // withCredentials: true,\n  // path: \"/socket.io\",\n});\n\nexport function OnSocketCoreEvent() {\n  // catch all incoming events\n  socket.onAny(function (eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    console.log(\"incoming \", eventName, args);\n  });\n\n  // catch all outgoing events\n  socket.prependAny(function (eventName) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    console.log(\"outgoing \", eventName, args);\n  });\n  socket.on(\"connect\", () => {\n    if (socket.connected) {\n      //This attribute describes whether the socket is currently connected to the server.\n      if (socket.recovered) {\n        // any missed packets will be received\n      } else {\n        // new or unrecoverable session\n        console.log(\"socket connected : \" + socket.id);\n      }\n    }\n  });\n\n  //https://socket.io/docs/v4/client-socket-instance/#disconnect\n  socket.on(\"disconnect\", reason => {\n    /**\n     *  BAD, will throw an error\n     *  socket.emit(\"disconnect\");\n    */\n    if (reason === \"io server disconnect\") {\n      // the disconnection was initiated by the server, you need to reconnect manually\n    }\n    // else the socket will automatically try to reconnect\n    console.log(\"socket disconnected\");\n  });\n\n  // the connection is denied by the server in a middleware function\n  socket.on(\"connect_error\", err => {\n    if (err.message === \"unauthorized\") {\n      // handle each case\n    }\n    console.log(err.message); // prints the message associated with the error\n  });\n}\n_c = OnSocketCoreEvent;\nexport function OnSocketChatEvent() {\n  _s();\n  const [roomList, setRoomList] = useAtom(chatAtom.roomListAtom);\n  const [userList, setUserList] = useAtom(chatAtom.userListAtom);\n  const [userBlockList, setUserBlockList] = useAtom(chatAtom.userBlockListAtom);\n  const [dmHistoryList, setDmHistoryList] = useAtom(chatAtom.dmHistoryListAtom);\n  const [focusRoom, setFocusRoom] = useAtom(chatAtom.focusRoomAtom);\n  const [userInfo, setUserInfo] = useAtom(userAtom.UserAtom);\n  socket.on(\"room-list-notify\", _ref => {\n    let {\n      action,\n      roomId,\n      roomName,\n      roomType\n    } = _ref;\n    switch (action) {\n      case 'add':\n        {\n          const newRoomList = {};\n          newRoomList[roomId] = {\n            roomName,\n            roomType,\n            isJoined: false\n          };\n          setRoomList({\n            ...roomList,\n            ...newRoomList\n          });\n          break;\n        }\n      case 'delete':\n        {\n          const newRoomList = {\n            ...roomList\n          };\n          delete newRoomList[roomId];\n          setRoomList({\n            ...newRoomList\n          });\n          break;\n        }\n    }\n  });\n  socket.on(\"room-join\", _ref2 => {\n    let {\n      roomId,\n      roomName,\n      roomType,\n      userList = {},\n      myPower,\n      status\n    } = _ref2;\n    switch (status) {\n      case 'ok':\n        {\n          const newRoomList = {};\n          newRoomList[roomId] = {\n            roomName,\n            roomType,\n            isJoined: true,\n            detail: {\n              userList: {\n                ...userList\n              },\n              messageList: [],\n              myRoomStatus: 'normal',\n              myRoomPower: myPower\n            }\n          };\n          setRoomList({\n            ...roomList,\n            ...newRoomList\n          });\n          setFocusRoom(roomId);\n          break;\n        }\n      case 'ko':\n        {\n          if (roomList[roomId].isJoined === false) {\n            alert(`fail to join [${roomName}] room`);\n          }\n          break;\n        }\n    }\n  });\n  socket.on(\"room-inaction\", _ref3 => {\n    let {\n      roomId,\n      action,\n      targetId\n    } = _ref3;\n    switch (action) {\n      case 'newMember':\n        {\n          if (targetId === userInfo.uid) {\n            return;\n          } else {\n            var _roomList$roomId$deta;\n            const newUserList = (_roomList$roomId$deta = roomList[roomId].detail) === null || _roomList$roomId$deta === void 0 ? void 0 : _roomList$roomId$deta.userList;\n            const newUser = {};\n            newUser[targetId] = {\n              userRoomStatus: 'normal',\n              userRoomPower: 'member'\n            };\n            const newDetail = {\n              ...roomList[roomId].detail,\n              userList: {\n                ...newUserList,\n                ...newUser\n              }\n            };\n            const newRoomList = {\n              ...roomList[roomId],\n              ...newDetail\n            };\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n          }\n          break;\n        }\n      case 'ban':\n        {\n          if (targetId === userInfo.uid) {\n            emitRoomLeave({\n              roomList,\n              setRoomList,\n              focusRoom,\n              setFocusRoom\n            }, roomId, true);\n          } else {\n            var _roomList$roomId$deta2;\n            const newUserList = (_roomList$roomId$deta2 = roomList[roomId].detail) === null || _roomList$roomId$deta2 === void 0 ? void 0 : _roomList$roomId$deta2.userList;\n            delete newUserList[targetId];\n            const newDetail = {\n              ...roomList[roomId].detail,\n              userList: {\n                ...newUserList\n              }\n            };\n            const newRoomList = {\n              ...roomList[roomId],\n              ...newDetail\n            };\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n          }\n          break;\n        }\n      case 'leave':\n        {\n          if (targetId === userInfo.uid) {\n            return;\n          } else {\n            var _roomList$roomId$deta3;\n            const newUserList = (_roomList$roomId$deta3 = roomList[roomId].detail) === null || _roomList$roomId$deta3 === void 0 ? void 0 : _roomList$roomId$deta3.userList;\n            delete newUserList[targetId];\n            const newDetail = {\n              ...roomList[roomId].detail,\n              userList: {\n                ...newUserList\n              }\n            };\n            const newRoomList = {\n              ...roomList[roomId],\n              ...newDetail\n            };\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n          }\n          break;\n        }\n      case 'kick':\n        {\n          if (targetId === userInfo.uid) {\n            emitRoomLeave({\n              roomList,\n              setRoomList,\n              focusRoom,\n              setFocusRoom\n            }, roomId);\n          } else {\n            var _roomList$roomId$deta4;\n            const newUserList = (_roomList$roomId$deta4 = roomList[roomId].detail) === null || _roomList$roomId$deta4 === void 0 ? void 0 : _roomList$roomId$deta4.userList;\n            delete newUserList[targetId];\n            const newDetail = {\n              ...roomList[roomId].detail,\n              userList: {\n                ...newUserList\n              }\n            };\n            const newRoomList = {\n              ...roomList[roomId],\n              ...newDetail\n            };\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n          }\n          break;\n        }\n      case 'mute':\n      case 'normal':\n        {\n          if (targetId === userInfo.uid) {\n            const newDetail = {\n              ...roomList[roomId].detail,\n              myRoomStatus: action\n            };\n            const newRoomList = {\n              ...roomList[roomId],\n              ...newDetail\n            };\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n          } else {\n            var _roomList$roomId$deta5;\n            const newUserList = (_roomList$roomId$deta5 = roomList[roomId].detail) === null || _roomList$roomId$deta5 === void 0 ? void 0 : _roomList$roomId$deta5.userList;\n            newUserList[targetId] = {\n              ...newUserList[targetId],\n              userRoomStatus: action\n            };\n            const newDetail = {\n              ...roomList[roomId].detail,\n              userList: {\n                ...newUserList\n              }\n            };\n            const newRoomList = {\n              ...roomList[roomId],\n              ...newDetail\n            };\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n          }\n          break;\n        }\n      case 'owner':\n      case 'admin':\n        {\n          if (targetId === userInfo.uid) {\n            const newDetail = {\n              ...roomList[roomId].detail,\n              myRoomPower: action\n            };\n            const newRoomList = {\n              ...roomList[roomId],\n              ...newDetail\n            };\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n          } else {\n            var _roomList$roomId$deta6;\n            const newUserList = (_roomList$roomId$deta6 = roomList[roomId].detail) === null || _roomList$roomId$deta6 === void 0 ? void 0 : _roomList$roomId$deta6.userList;\n            newUserList[targetId] = {\n              ...newUserList[targetId],\n              userRoomPower: action\n            };\n            const newDetail = {\n              ...roomList[roomId].detail,\n              userList: {\n                ...newUserList\n              }\n            };\n            const newRoomList = {\n              ...roomList[roomId],\n              ...newDetail\n            };\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n          }\n          break;\n        }\n    }\n  });\n  socket.on(\"user-update\", _ref4 => {\n    let {\n      userId,\n      userDisplayName,\n      userProfileUrl,\n      userStatus\n    } = _ref4;\n    const newUser = {};\n    newUser[userId] = {\n      userDisplayName,\n      userProfileUrl,\n      userStatus\n    };\n    setUserList({\n      ...userList,\n      ...newUser\n    });\n  });\n  socket.on(\"message\", _ref5 => {\n    let {\n      roomId,\n      from,\n      message\n    } = _ref5;\n    const block = userBlockList[from] ? true : false;\n    switch (block) {\n      case true:\n        {\n          console.log(`message from ${from} is blocked`);\n          break;\n        }\n      case false:\n        {\n          var _roomList$roomId$deta7, _roomList$roomId$deta8;\n          console.log(`message from ${from} is received: ${message}`);\n          const newMessageList = (_roomList$roomId$deta7 = roomList[roomId].detail) === null || _roomList$roomId$deta7 === void 0 ? void 0 : _roomList$roomId$deta7.messageList;\n          newMessageList.push({\n            userId: from,\n            message,\n            isMe: false,\n            number: (_roomList$roomId$deta8 = roomList[roomId].detail) === null || _roomList$roomId$deta8 === void 0 ? void 0 : _roomList$roomId$deta8.messageList.length\n          });\n          const newDetail = {\n            ...roomList[roomId].detail,\n            messageList: [...newMessageList]\n          };\n          const newRoomList = {\n            ...roomList,\n            ...newDetail\n          };\n          setRoomList({\n            ...roomList,\n            ...newRoomList\n          });\n          break;\n        }\n    }\n  });\n}\n_s(OnSocketChatEvent, \"6wBlBPAVwmEDD8uO0z+0+JiEdUk=\", false, function () {\n  return [useAtom, useAtom, useAtom, useAtom, useAtom, useAtom];\n});\n_c2 = OnSocketChatEvent;\nexport function emitRoomList(_ref6) {\n  let {\n    setRoomList\n  } = _ref6;\n  socket.emit(\"room-list\", _ref7 => {\n    let {\n      roomList\n    } = _ref7;\n    Object.entries(roomList).forEach(_ref8 => {\n      let [key, value] = _ref8;\n      value.isJoined = false;\n    });\n    setRoomList({\n      ...roomList\n    });\n  });\n}\nexport function emitRoomCreate(roomName) {\n  let roomCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let roomPass = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  const roomType = roomCheck ? 'private' : roomPass ? 'protected' : 'open';\n  socket.emit(\"room-create\", {\n    roomName,\n    roomType,\n    roomPass\n  }, _ref9 => {\n    let {\n      status\n    } = _ref9;\n    switch (status) {\n      case 'ok':\n        {\n          console.log(\"room-create success\");\n          break;\n        }\n      case 'ko':\n        {\n          console.log(\"room-create fail\");\n          alert(`${roomName} room-create fail`);\n          break;\n        }\n    }\n    ;\n  });\n}\nexport function emitRoomJoin(_ref10, roomId) {\n  let {\n    roomList,\n    setRoomList,\n    focusRoom,\n    setFocusRoom\n  } = _ref10;\n  let roomPass = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  socket.emit(\"room-join\", {\n    roomId,\n    roomPass\n  });\n}\nexport function emitRoomLeave(_ref11, roomId) {\n  let {\n    roomList,\n    setRoomList,\n    focusRoom,\n    setFocusRoom\n  } = _ref11;\n  let ban = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  socket.emit(\"room-leave\", {\n    roomId,\n    ban\n  }, () => {\n    const roomName = roomList[roomId].roomName;\n    console.log(`room leaved: ${roomId}:${roomName} `);\n    const newRoomList = {\n      ...roomList[roomId]\n    };\n    newRoomList[roomId].isJoined = false;\n    newRoomList[roomId].detail = undefined;\n    setRoomList({\n      ...roomList,\n      ...newRoomList\n    });\n    if (focusRoom === roomId) {\n      setFocusRoom(-1);\n    }\n  });\n}\nexport function emitRoomInAction(_ref12, roomId, action, targetId) {\n  let {\n    roomList,\n    setRoomList\n  } = _ref12;\n  socket.emit(\"room-inaction\", {\n    roomId,\n    action,\n    targetId\n  }, _ref13 => {\n    let {\n      status,\n      payload\n    } = _ref13;\n    switch (status) {\n      case 'ok':\n        {\n          console.log(`room - inaction in ${roomId} to ${targetId} with ${action} OK`);\n          break;\n        }\n      case 'ko':\n        {\n          console.log(`room - inaction in ${roomId} to ${targetId} with ${action} failed: ${payload} `);\n          alert(`Room in Action [${action}] is faild: ${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function emitUserBlock(_ref14, targetId) {\n  let {\n    userBlockList,\n    setUserBlockList\n  } = _ref14;\n  socket.emit(\"user-block\", {\n    targetId\n  }, _ref15 => {\n    let {\n      status,\n      payload\n    } = _ref15;\n    switch (status) {\n      case 'on':\n        {\n          const newBlockUser = {};\n          newBlockUser[targetId] = {\n            blocked: true\n          };\n          setUserBlockList({\n            ...userBlockList,\n            ...newBlockUser\n          });\n          break;\n        }\n      case 'off':\n        {\n          const newBlockList = {\n            ...userBlockList\n          };\n          delete newBlockList[targetId];\n          setUserBlockList({\n            ...newBlockList\n          });\n          break;\n        }\n      case 'ko':\n        {\n          console.log(`user - block failed: ${payload} `);\n          alert(`block failed: ${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function emitUserInvite(_ref16, targetId, roomId) {\n  let {\n    userList\n  } = _ref16;\n  socket.emit(\"user-invite\", {\n    targetId,\n    roomId\n  }, _ref17 => {\n    let {\n      status,\n      payload\n    } = _ref17;\n    switch (status) {\n      case 'ok':\n        {\n          break;\n        }\n      case 'ko':\n        {\n          console.log(`user - invite ${userList[targetId].userDisplayName} failed: ${payload} `);\n          alert(`invite failed: ${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function emitUserList(_ref18, userId) {\n  let {\n    setUserList\n  } = _ref18;\n  socket.emit(\"user-list\", {\n    userId\n  }, _ref19 => {\n    let {\n      userList\n    } = _ref19;\n    setUserList({\n      ...userList\n    });\n  });\n}\nexport function emitUserBlockList(_ref20, userId) {\n  let {\n    setUserBlockList\n  } = _ref20;\n  socket.emit(\"user-block-list\", {\n    userId\n  }, _ref21 => {\n    let {\n      userList\n    } = _ref21;\n    setUserBlockList({\n      ...userList\n    });\n  });\n}\nexport function emitDmHistoryList(_ref22, userId) {\n  let {\n    setDmHistoryList\n  } = _ref22;\n  socket.emit(\"dm-history-list\", {\n    userId\n  }, _ref23 => {\n    let {\n      userList\n    } = _ref23;\n    setDmHistoryList({\n      ...userList\n    });\n  });\n}\nexport function emitFollowingList(_ref24) {\n  let {\n    setFollowingList\n  } = _ref24;\n  console.log('emit following list');\n  fetch('http://localhost:4000/user/following', {\n    credentials: \"include\",\n    method: \"GET\"\n  }).then(response => response.json()).then(response => {\n    console.log(response);\n  }).catch(error => {\n    console.log(`error: ${error}`);\n  });\n  return undefined;\n}\nexport function emitMessage(_ref25, roomId, to, message) {\n  let {\n    userInfo,\n    roomList,\n    setRoomList\n  } = _ref25;\n  socket.emit(\"message\", {\n    roomId,\n    message\n  }, _ref26 => {\n    let {\n      status,\n      payload\n    } = _ref26;\n    switch (status) {\n      case 'ok':\n        {\n          var _roomList$roomId$deta9, _roomList$roomId$deta10;\n          console.log(`message to ${roomList[roomId].roomName} is sended: ${message} `);\n          const newMessageList = (_roomList$roomId$deta9 = roomList[roomId].detail) === null || _roomList$roomId$deta9 === void 0 ? void 0 : _roomList$roomId$deta9.messageList;\n          newMessageList.push({\n            userId: userInfo.uid,\n            message,\n            isMe: true,\n            number: (_roomList$roomId$deta10 = roomList[roomId].detail) === null || _roomList$roomId$deta10 === void 0 ? void 0 : _roomList$roomId$deta10.messageList.length\n          });\n          const newDetail = {\n            ...roomList[roomId].detail,\n            messageList: [...newMessageList]\n          };\n          const newRoomList = {\n            ...roomList,\n            ...newDetail\n          };\n          setRoomList({\n            ...roomList,\n            ...newRoomList\n          });\n          break;\n        }\n      case 'ko':\n        {\n          console.log(`message to ${to} is failed: ${payload} `);\n          alert(`message failed: ${payload}`);\n          break;\n        }\n    }\n  });\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"OnSocketCoreEvent\");\n$RefreshReg$(_c2, \"OnSocketChatEvent\");","map":{"version":3,"names":["io","useAtom","chatAtom","userAtom","URL","NameSpace","socket","auth","cb","token","localStorage","getItem","autoConnect","transports","OnSocketCoreEvent","onAny","eventName","_len","arguments","length","args","Array","_key","console","log","prependAny","_len2","_key2","on","connected","recovered","id","reason","err","message","_c","OnSocketChatEvent","_s","roomList","setRoomList","roomListAtom","userList","setUserList","userListAtom","userBlockList","setUserBlockList","userBlockListAtom","dmHistoryList","setDmHistoryList","dmHistoryListAtom","focusRoom","setFocusRoom","focusRoomAtom","userInfo","setUserInfo","UserAtom","_ref","action","roomId","roomName","roomType","newRoomList","isJoined","_ref2","myPower","status","detail","messageList","myRoomStatus","myRoomPower","alert","_ref3","targetId","uid","_roomList$roomId$deta","newUserList","newUser","userRoomStatus","userRoomPower","newDetail","emitRoomLeave","_roomList$roomId$deta2","_roomList$roomId$deta3","_roomList$roomId$deta4","_roomList$roomId$deta5","_roomList$roomId$deta6","_ref4","userId","userDisplayName","userProfileUrl","userStatus","_ref5","from","block","_roomList$roomId$deta7","_roomList$roomId$deta8","newMessageList","push","isMe","number","_c2","emitRoomList","_ref6","emit","_ref7","Object","entries","forEach","_ref8","key","value","emitRoomCreate","roomCheck","undefined","roomPass","_ref9","emitRoomJoin","_ref10","_ref11","ban","emitRoomInAction","_ref12","_ref13","payload","emitUserBlock","_ref14","_ref15","newBlockUser","blocked","newBlockList","emitUserInvite","_ref16","_ref17","emitUserList","_ref18","_ref19","emitUserBlockList","_ref20","_ref21","emitDmHistoryList","_ref22","_ref23","emitFollowingList","_ref24","setFollowingList","fetch","credentials","method","then","response","json","catch","error","emitMessage","_ref25","to","_ref26","_roomList$roomId$deta9","_roomList$roomId$deta10","$RefreshReg$"],"sources":["/data/front/src/socket/socket.ts"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { useAtom } from \"jotai\";\nimport * as chatAtom from '../components/atom/SocketAtom';\nimport * as userAtom from '../components/atom/UserAtom';\nimport type * as chatType from '../socket/chatting.dto';\n\nconst URL = \"http://localhost:4000\";\nconst NameSpace = \"/sock\";\n\nexport const socket = io(`${URL}${NameSpace}`, {\n  auth: (cb) => {\n    cb({ token: localStorage.getItem(\"refreshToken\") });\n  },\n  autoConnect: false,\n  transports: [\"websocket\"],\n  // reconnectionDelay: 1000, // defaults to 1000\n  // reconnectionDelayMax: 10000, // defaults to 5000\n  // withCredentials: true,\n  // path: \"/socket.io\",\n});\n\nexport function OnSocketCoreEvent() {\n\n  // catch all incoming events\n  socket.onAny((eventName, ...args) => {\n    console.log(\"incoming \", eventName, args);\n  });\n\n  // catch all outgoing events\n  socket.prependAny((eventName, ...args) => {\n    console.log(\"outgoing \", eventName, args);\n  });\n\n  socket.on(\"connect\", () => {\n    if (socket.connected) {\n      //This attribute describes whether the socket is currently connected to the server.\n      if (socket.recovered) {\n        // any missed packets will be received\n      } else {\n        // new or unrecoverable session\n        console.log(\"socket connected : \" + socket.id);\n      }\n    }\n  });\n\n  //https://socket.io/docs/v4/client-socket-instance/#disconnect\n  socket.on(\"disconnect\", (reason) => {\n    /**\n     *  BAD, will throw an error\n     *  socket.emit(\"disconnect\");\n    */\n    if (reason === \"io server disconnect\") {\n      // the disconnection was initiated by the server, you need to reconnect manually\n    }\n    // else the socket will automatically try to reconnect\n    console.log(\"socket disconnected\");\n  });\n\n  // the connection is denied by the server in a middleware function\n  socket.on(\"connect_error\", (err) => {\n    if (err.message === \"unauthorized\") {\n      // handle each case\n    }\n    console.log(err.message); // prints the message associated with the error\n  });\n}\n\nexport function OnSocketChatEvent() {\n  const [roomList, setRoomList] = useAtom(chatAtom.roomListAtom);\n  const [userList, setUserList] = useAtom(chatAtom.userListAtom);\n  const [userBlockList, setUserBlockList] = useAtom(chatAtom.userBlockListAtom);\n  const [dmHistoryList, setDmHistoryList] = useAtom(chatAtom.dmHistoryListAtom);\n  const [focusRoom, setFocusRoom] = useAtom(chatAtom.focusRoomAtom);\n  const [userInfo, setUserInfo] = useAtom(userAtom.UserAtom);\n\n  socket.on(\"room-list-notify\", ({\n    action,\n    roomId,\n    roomName,\n    roomType,\n  }: {\n    action: 'add' | 'delete';\n    roomId: number;\n    roomName: string;\n    roomType: 'open' | 'protected' | 'private';\n  }) => {\n    switch (action) {\n      case 'add': {\n        const newRoomList: chatType.roomListDto = {};\n        newRoomList[roomId] = {\n          roomName,\n          roomType,\n          isJoined: false,\n        };\n        setRoomList({ ...roomList, ...newRoomList });\n        break;\n      }\n      case 'delete': {\n        const newRoomList: chatType.roomListDto = { ...roomList };\n        delete newRoomList[roomId];\n        setRoomList({ ...newRoomList });\n        break;\n      }\n    }\n  });\n\n  socket.on(\"room-join\", ({\n    roomId,\n    roomName,\n    roomType,\n    userList = {},\n    myPower,\n    status\n  }: {\n    roomId: number,\n    roomName: string,\n    roomType: 'open' | 'protected' | 'private',\n    userList: chatType.userInRoomListDto,\n    myPower: 'owner' | 'admin' | 'member',\n    status: 'ok' | 'ko'\n  }) => {\n    switch (status) {\n      case 'ok': {\n        const newRoomList: chatType.roomListDto = {};\n        newRoomList[roomId] = {\n          roomName,\n          roomType,\n          isJoined: true,\n          detail: {\n            userList: { ...userList },\n            messageList: [],\n            myRoomStatus: 'normal',\n            myRoomPower: myPower\n          }\n        };\n        setRoomList({ ...roomList, ...newRoomList });\n        setFocusRoom(roomId);\n        break;\n      }\n      case 'ko': {\n        if (roomList[roomId].isJoined === false) {\n          alert(`fail to join [${roomName}] room`);\n        }\n        break;\n      }\n    }\n  });\n\n  socket.on(\"room-inaction\", ({\n    roomId,\n    action,\n    targetId\n  }: {\n    roomId: number;\n    action: 'ban' | 'kick' | 'mute' | 'admin' | 'normal' | 'owner' | 'leave' | 'newMember';\n    targetId: number\n  }) => {\n    switch (action) {\n      case 'newMember': {\n        if (targetId === userInfo.uid) {\n          return;\n        } else {\n          const newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n          const newUser: chatType.userInRoomListDto = {};\n          newUser[targetId] = {\n            userRoomStatus: 'normal',\n            userRoomPower: 'member'\n          };\n          const newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, userList: { ...newUserList, ...newUser } };\n          const newRoomList: chatType.roomListDto = { ...roomList[roomId], ...newDetail };\n          setRoomList({ ...roomList, ...newRoomList });\n        }\n        break;\n      }\n      case 'ban': {\n        if (targetId === userInfo.uid) {\n          emitRoomLeave({ roomList, setRoomList, focusRoom, setFocusRoom }, roomId, true);\n        } else {\n          const newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n          delete newUserList[targetId];\n          const newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, userList: { ...newUserList } };\n          const newRoomList: chatType.roomListDto = { ...roomList[roomId], ...newDetail };\n          setRoomList({ ...roomList, ...newRoomList });\n        }\n        break;\n      }\n      case 'leave': {\n        if (targetId === userInfo.uid) {\n          return;\n        } else {\n          const newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n          delete newUserList[targetId];\n          const newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, userList: { ...newUserList } };\n          const newRoomList: chatType.roomListDto = { ...roomList[roomId], ...newDetail };\n          setRoomList({ ...roomList, ...newRoomList });\n        }\n        break;\n      }\n      case 'kick': {\n        if (targetId === userInfo.uid) {\n          emitRoomLeave({ roomList, setRoomList, focusRoom, setFocusRoom }, roomId)\n        } else {\n          const newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n          delete newUserList[targetId];\n          const newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, userList: { ...newUserList } };\n          const newRoomList: chatType.roomListDto = { ...roomList[roomId], ...newDetail };\n          setRoomList({ ...roomList, ...newRoomList });\n        }\n        break;\n      }\n      case 'mute':\n      case 'normal': {\n        if (targetId === userInfo.uid) {\n          const newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, myRoomStatus: action };\n          const newRoomList: chatType.roomListDto = { ...roomList[roomId], ...newDetail };\n          setRoomList({ ...roomList, ...newRoomList });\n        } else {\n          const newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n          newUserList[targetId] = { ...newUserList[targetId], userRoomStatus: action };\n          const newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, userList: { ...newUserList } };\n          const newRoomList: chatType.roomListDto = { ...roomList[roomId], ...newDetail };\n          setRoomList({ ...roomList, ...newRoomList });\n        }\n        break;\n      }\n      case 'owner':\n      case 'admin': {\n        if (targetId === userInfo.uid) {\n          const newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, myRoomPower: action };\n          const newRoomList: chatType.roomListDto = { ...roomList[roomId], ...newDetail };\n          setRoomList({ ...roomList, ...newRoomList });\n        } else {\n          const newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n          newUserList[targetId] = { ...newUserList[targetId], userRoomPower: action };\n          const newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, userList: { ...newUserList } };\n          const newRoomList: chatType.roomListDto = { ...roomList[roomId], ...newDetail };\n          setRoomList({ ...roomList, ...newRoomList });\n        }\n        break;\n      }\n    }\n  });\n\n  socket.on(\"user-update\", ({\n    userId,\n    userDisplayName,\n    userProfileUrl,\n    userStatus\n  }: {\n    userId: number,\n    userDisplayName: string\n    userProfileUrl: string;\n    userStatus: 'online' | 'offline' | 'inGame';\n  }) => {\n    const newUser: chatType.userDto = {};\n    newUser[userId] = {\n      userDisplayName,\n      userProfileUrl,\n      userStatus,\n    };\n    setUserList({ ...userList, ...newUser });\n  });\n\n  socket.on(\"message\", ({\n    roomId,\n    from,\n    message\n  }: {\n    roomId: number,\n    from: number,\n    message: string\n  }) => {\n    const block = userBlockList[from] ? true : false;\n    switch (block) {\n      case true: {\n        console.log(`message from ${from} is blocked`);\n        break;\n      }\n      case false: {\n        console.log(`message from ${from} is received: ${message}`);\n        const newMessageList: chatType.roomMessageDto[] = roomList[roomId].detail?.messageList!;\n        newMessageList.push({\n          userId: from,\n          message,\n          isMe: false,\n          number: roomList[roomId].detail?.messageList.length!\n        });\n        const newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, messageList: [...newMessageList] };\n        const newRoomList: chatType.roomListDto = { ...roomList, ...newDetail };\n        setRoomList({ ...roomList, ...newRoomList });\n        break;\n      }\n    }\n  });\n\n}\n\nexport function emitRoomList(\n  {\n    setRoomList\n  }: {\n    setRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>,\n  }\n) {\n  socket.emit(\"room-list\", ({\n    roomList\n  }: {\n    roomList: chatType.roomListDto;\n  }) => {\n    Object.entries(roomList).forEach(([key, value]) => {\n      value.isJoined = false;\n    });\n    setRoomList({ ...roomList });\n  });\n}\n\nexport function emitRoomCreate(\n  roomName: string,\n  roomCheck: boolean = false,\n  roomPass: string = ''\n) {\n  const roomType = roomCheck ? 'private' : roomPass ? 'protected' : 'open';\n  socket.emit(\"room-create\", {\n    roomName,\n    roomType,\n    roomPass,\n  }, ({\n    status,\n  }: {\n    status: 'ok' | 'ko',\n  }) => {\n    switch (status) {\n      case 'ok': {\n        console.log(\"room-create success\");\n        break;\n      }\n      case 'ko': {\n        console.log(\"room-create fail\");\n        alert(`${roomName} room-create fail`);\n        break;\n      }\n    };\n  });\n}\n\nexport function emitRoomJoin(\n  {\n    roomList,\n    setRoomList,\n    focusRoom,\n    setFocusRoom\n  }: {\n    roomList: chatType.roomListDto,\n    setRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>,\n    focusRoom: number,\n    setFocusRoom: React.Dispatch<React.SetStateAction<number>>,\n  },\n  roomId: number,\n  roomPass: string = ''\n) {\n  socket.emit(\"room-join\", {\n    roomId,\n    roomPass,\n  });\n}\n\nexport function emitRoomLeave(\n  {\n    roomList,\n    setRoomList,\n    focusRoom,\n    setFocusRoom\n  }: {\n    roomList: chatType.roomListDto,\n    setRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>,\n    focusRoom: number,\n    setFocusRoom: React.Dispatch<React.SetStateAction<number>>,\n  },\n  roomId: number,\n  ban: boolean = false\n) {\n  socket.emit(\"room-leave\", {\n    roomId, ban\n  }, () => {\n    const roomName = roomList[roomId].roomName;\n    console.log(`room leaved: ${roomId}:${roomName} `);\n    const newRoomList: chatType.roomListDto = { ...roomList[roomId] };\n    newRoomList[roomId].isJoined = false;\n    newRoomList[roomId].detail = undefined;\n    setRoomList({ ...roomList, ...newRoomList });\n    if (focusRoom === roomId) {\n      setFocusRoom(-1);\n    }\n  });\n}\n\nexport function emitRoomInAction(\n  {\n    roomList,\n    setRoomList,\n  }: {\n    roomList: chatType.roomListDto,\n    setRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>,\n  },\n  roomId: number,\n  action: 'ban' | 'kick' | 'mute' | 'admin',\n  targetId: number,\n) {\n  socket.emit(\"room-inaction\", {\n    roomId,\n    action,\n    targetId,\n  }, ({\n    status,\n    payload,\n  }: {\n    status: 'ok' | 'ko',\n    payload?: string,\n  }) => {\n    switch (status) {\n      case 'ok': {\n        console.log(`room - inaction in ${roomId} to ${targetId} with ${action} OK`);\n        break;\n      }\n      case 'ko': {\n        console.log(`room - inaction in ${roomId} to ${targetId} with ${action} failed: ${payload} `);\n        alert(`Room in Action [${action}] is faild: ${payload}`);\n        break;\n      }\n    }\n  });\n}\n\nexport function emitUserBlock(\n  {\n    userBlockList,\n    setUserBlockList,\n  }: {\n    userBlockList: chatType.userSimpleDto,\n    setUserBlockList: React.Dispatch<React.SetStateAction<chatType.userSimpleDto>>,\n  },\n  targetId: number,\n) {\n  socket.emit(\"user-block\", {\n    targetId\n  }, ({\n    status,\n    payload\n  }: {\n    status: 'on' | 'off' | 'ko',\n    payload?: string,\n  }) => {\n    switch (status) {\n      case 'on': {\n        const newBlockUser: chatType.userSimpleDto = {};\n        newBlockUser[targetId] = {\n          blocked: true\n        }\n        setUserBlockList({ ...userBlockList, ...newBlockUser });\n        break;\n      }\n      case 'off': {\n        const newBlockList: chatType.userSimpleDto = { ...userBlockList };\n        delete newBlockList[targetId];\n        setUserBlockList({ ...newBlockList });\n        break;\n      }\n      case 'ko': {\n        console.log(`user - block failed: ${payload} `);\n        alert(`block failed: ${payload}`);\n        break;\n      }\n    }\n  });\n}\n\nexport function emitUserInvite(\n  {\n    userList,\n  }: {\n    userList: chatType.userDto,\n  },\n  targetId: number,\n  roomId: number,\n) {\n  socket.emit(\"user-invite\", {\n    targetId,\n    roomId\n  }, ({\n    status,\n    payload,\n  }: {\n    status: 'ok' | 'ko',\n    payload?: string,\n  }) => {\n    switch (status) {\n      case 'ok': {\n        break;\n      }\n      case 'ko': {\n        console.log(`user - invite ${userList[targetId].userDisplayName} failed: ${payload} `);\n        alert(`invite failed: ${payload}`);\n        break;\n      }\n    }\n  });\n}\n\nexport function emitUserList(\n  {\n    setUserList\n  }: {\n    setUserList: React.Dispatch<React.SetStateAction<chatType.userDto>>,\n  },\n  userId: number,\n) {\n  socket.emit(\"user-list\", {\n    userId\n  }, ({\n    userList,\n  }: {\n    userList: chatType.userDto,\n  }) => {\n    setUserList({ ...userList })\n  });\n}\n\nexport function emitUserBlockList(\n  {\n    setUserBlockList\n  }: {\n    setUserBlockList: React.Dispatch<React.SetStateAction<chatType.userSimpleDto>>,\n  },\n  userId: number\n) {\n  socket.emit(\"user-block-list\", {\n    userId\n  }, ({\n    userList,\n  }: {\n    userList: chatType.userSimpleDto,\n  }) => {\n    setUserBlockList({ ...userList });\n  });\n}\n\nexport function emitDmHistoryList(\n  {\n    setDmHistoryList\n  }: {\n    setDmHistoryList: React.Dispatch<React.SetStateAction<chatType.userDto>>,\n  },\n  userId: number\n) {\n  socket.emit(\"dm-history-list\", {\n    userId\n  }, ({\n    userList,\n  }: {\n    userList: chatType.userDto,\n  }) => {\n    setDmHistoryList({ ...userList });\n  });\n}\n\nexport function emitFollowingList(\n  {\n    setFollowingList\n  }: {\n    setFollowingList: React.Dispatch<React.SetStateAction<chatType.userDto>>,\n  }) {\n  console.log('emit following list');\n  fetch('http://localhost:4000/user/following', {\n    credentials: \"include\",\n    method: \"GET\",\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      console.log(response);\n    }).catch((error) => {\n      console.log(`error: ${error}`);\n    });\n  return undefined\n}\n\nexport function emitMessage(\n  {\n    userInfo,\n    roomList,\n    setRoomList\n  }: {\n    userInfo: userAtom.UserType,\n    roomList: chatType.roomListDto,\n    setRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>,\n  },\n  roomId: number,\n  to: number,\n  message: string,\n) {\n\n  socket.emit(\"message\", {\n    roomId,\n    message\n  }, ({\n    status,\n    payload,\n  }: {\n    status: 'ok' | 'ko',\n    payload?: 'string'\n  }) => {\n    switch (status) {\n      case 'ok': {\n        console.log(`message to ${roomList[roomId].roomName} is sended: ${message} `);\n        const newMessageList: chatType.roomMessageDto[] = roomList[roomId].detail?.messageList!;\n        newMessageList.push({\n          userId: userInfo.uid,\n          message,\n          isMe: true,\n          number: roomList[roomId].detail?.messageList.length!\n        });\n        const newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, messageList: [...newMessageList] };\n        const newRoomList: chatType.roomListDto = { ...roomList, ...newDetail };\n        setRoomList({ ...roomList, ...newRoomList });\n        break;\n      }\n      case 'ko': {\n        console.log(`message to ${to} is failed: ${payload} `);\n        alert(`message failed: ${payload}`);\n        break;\n      }\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}