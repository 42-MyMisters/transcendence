{"ast":null,"code":"var _jsxFileName = \"/data/front/src/pages/GamePage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport BackGround from \"../components/BackGround\";\nimport \"../components/GamePage/PingPong\";\nimport PingPong from \"../components/GamePage/PingPong\";\nimport TopBar from \"../components/TopBar\";\nimport { useAtom, useAtomValue, useSetAtom } from \"jotai\";\nimport { isGameStartedAtom, isLoadingAtom, isMatchedAtom, isPrivateAtom, isGameQuitAtom, gameInviteInfoAtom, gameSocketAtom, gameModeAtom, isP1Atom, gameWinnerAtom, playersAtom } from \"../components/atom/GameAtom\";\nimport * as chatAtom from \"../components/atom/ChatAtom\";\nimport { gameResultModalAtom } from \"../components/atom/ModalAtom\";\nimport GameResultModal from \"../components/GamePage/GameResultModal\";\nimport LadderBoard from \"../components/GamePage/LadderBoard\";\nimport Waiting from \"../components/GamePage/Waiting\";\nimport { AdminLogPrinter, PressKey } from \"../event/event.util\";\nimport { UserAtom } from \"../components/atom/UserAtom\";\nimport { GameType } from \"../socket/game.dto\";\nimport { p1, p2 } from \"../components/GamePage/GameInfo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamePage() {\n  _s();\n  var _userList$gameWinner;\n  const [showComponent, setShowComponent] = useState(true);\n  const [gameResultModal, setGameResultModal] = useAtom(gameResultModalAtom);\n  const [isLoading, setIsLoading] = useAtom(isLoadingAtom);\n  const [isMatched, setIsMatched] = useAtom(isMatchedAtom);\n  const [isPrivate, setIsPrivate] = useAtom(isPrivateAtom);\n  const [isGameStart, setIsGameStart] = useAtom(isGameStartedAtom);\n  const setIsGameQuit = useSetAtom(isGameQuitAtom);\n  const [gameInviteInfo, setGameInviteInfo] = useAtom(gameInviteInfoAtom);\n  const [gameMode, setGameMode] = useAtom(gameModeAtom);\n  const [adminConsole, setAdminConsole] = useAtom(chatAtom.adminConsoleAtom);\n  const [userInfo, setUserInfo] = useAtom(UserAtom);\n  const userList = useAtomValue(chatAtom.userListAtom);\n\n  // const [socket, setSocket] = useState(io());\n\n  const [gameSocket, setGameSocket] = useAtom(gameSocketAtom);\n  const [isP1, setIsP1] = useAtom(isP1Atom);\n  const gameWinner = useAtomValue(gameWinnerAtom);\n  const [players, setPlayers] = useAtom(playersAtom);\n  class socketAuth {\n    constructor(inviteInfo) {\n      this.token = void 0;\n      this.type = void 0;\n      this.invite = void 0;\n      this.observ = void 0;\n      this.token = localStorage.getItem(\"refreshToken\");\n      this.type = isPrivate ? GameType.PRIVATE : GameType.PUBLIC;\n      if (inviteInfo.gameType === 'invite') {\n        this.invite = inviteInfo.userId;\n      } else if (inviteInfo.gameType === 'observe') {\n        this.observ = inviteInfo.userId;\n      }\n    }\n  }\n  PressKey([\"F4\"], () => {\n    setAdminConsole(prev => !prev);\n  });\n  const clearState = () => {\n    setIsPrivate(false);\n    // setIsGameStart(false);\n    setIsLoading(false);\n    setIsMatched(false);\n    setIsGameQuit(true);\n    setGameMode('normal');\n  };\n  useEffect(() => {\n    AdminLogPrinter(adminConsole, `gameSocket connection`);\n    const auth = new socketAuth(gameInviteInfo);\n    gameSocket.auth = auth;\n    const socket = gameSocket;\n    socket.connect();\n    setGameSocket(socket);\n    setGameInviteInfo({\n      gameType: 'queue',\n      userId: -1\n    });\n    setIsGameQuit(false);\n    setIsLoading(true);\n    return () => {\n      clearState();\n      gameSocket.disconnect();\n    };\n  }, []);\n  const connectionEventHandler = () => {\n    if (gameSocket.connected) {\n      //This attribute describes whether the socket is currently connected to the server.\n      if (gameSocket.recovered) {\n        // any missed packets will be received\n      } else {\n        // new or unrecoverable session\n        AdminLogPrinter(adminConsole, \"gameSocket connected\");\n      }\n    }\n  };\n\n  //https://socket.io/docs/v4/client-socket-instance/#disconnect\n  const disconnectionEventHandler = reason => {\n    if (reason === \"io server disconnect\") {}\n    console.log(`gameSocket end`, reason);\n    clearState();\n    AdminLogPrinter(adminConsole, \"gameSocket disconnected\");\n  };\n  const gameStartEventHandler = () => {\n    AdminLogPrinter(adminConsole, \"game start\");\n    setIsLoading(false);\n    setIsMatched(false);\n    setIsGameStart(true);\n  };\n  const matchEventHandler = _ref => {\n    let {\n      p1,\n      p2\n    } = _ref;\n    AdminLogPrinter(adminConsole, \"matched\");\n    if (p1 === userInfo.uid) {\n      setIsP1(true);\n    } else {\n      setIsP1(false);\n    }\n    setPlayers([p1, p2]);\n    setIsMatched(true);\n  };\n  const observerHandler = () => {\n    AdminLogPrinter(adminConsole, \"observer\");\n    setIsLoading(false);\n    setIsGameStart(true);\n  };\n  useEffect(() => {\n    AdminLogPrinter(adminConsole, `useeffect: isLoading: ${isLoading}, isPrivate: ${isPrivate}, isMatched: ${isMatched}, isGameStart: ${isGameStart}`);\n  }, [isLoading, isPrivate, isGameStart, isMatched, gameSocket]);\n  useEffect(() => {\n    gameSocket.on(\"connect\", connectionEventHandler);\n    gameSocket.on(\"gameStart\", gameStartEventHandler);\n    return () => {\n      gameSocket.off(\"connect\", connectionEventHandler);\n      gameSocket.off(\"gameStart\", gameStartEventHandler);\n    };\n  }, [isGameStart, gameSocket]);\n  useEffect(() => {\n    gameSocket.on(\"disconnect\", disconnectionEventHandler);\n    return () => {\n      gameSocket.off(\"disconnect\", disconnectionEventHandler);\n    };\n  }, [isPrivate, isGameStart, gameSocket]);\n  useEffect(() => {\n    gameSocket.on(\"matched\", matchEventHandler);\n    return () => {\n      gameSocket.off(\"matched\", matchEventHandler);\n    };\n  }, [isMatched, gameSocket]);\n\n  // useEffect(() => {\n  //   return () => {\n  //   }\n  // }, [isLoading, isMatched, isGameStart]);\n\n  return /*#__PURE__*/_jsxDEV(BackGround, {\n    children: [adminConsole ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const loading = !isLoading;\n          setIsLoading(loading);\n        },\n        children: \"LadderRanking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const gameOverModal = !gameResultModal;\n          setGameResultModal(gameOverModal);\n        },\n        children: \"GameOver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(TopBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), isLoading ? isPrivate ? /*#__PURE__*/_jsxDEV(Waiting, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }, this) : isMatched ? /*#__PURE__*/_jsxDEV(Waiting, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(LadderBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this) : isGameStart ? /*#__PURE__*/_jsxDEV(PingPong, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Waiting, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this), gameResultModal ? /*#__PURE__*/_jsxDEV(GameResultModal, {\n      result: (_userList$gameWinner = userList[gameWinner]) === null || _userList$gameWinner === void 0 ? void 0 : _userList$gameWinner.userDisplayName,\n      leftScore: isP1 ? p1.score : p2.score,\n      rightScore: isP1 ? p2.score : p1.score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 26\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n_s(GamePage, \"FMTiyrm0L5fAsBrN6dj+eY7KIyI=\", false, function () {\n  return [useAtom, useAtom, useAtom, useAtom, useAtom, useSetAtom, useAtom, useAtom, useAtom, useAtom, useAtomValue, useAtom, useAtom, useAtomValue, useAtom];\n});\n_c = GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["useEffect","useState","BackGround","PingPong","TopBar","useAtom","useAtomValue","useSetAtom","isGameStartedAtom","isLoadingAtom","isMatchedAtom","isPrivateAtom","isGameQuitAtom","gameInviteInfoAtom","gameSocketAtom","gameModeAtom","isP1Atom","gameWinnerAtom","playersAtom","chatAtom","gameResultModalAtom","GameResultModal","LadderBoard","Waiting","AdminLogPrinter","PressKey","UserAtom","GameType","p1","p2","jsxDEV","_jsxDEV","GamePage","_s","_userList$gameWinner","showComponent","setShowComponent","gameResultModal","setGameResultModal","isLoading","setIsLoading","isMatched","setIsMatched","isPrivate","setIsPrivate","isGameStart","setIsGameStart","setIsGameQuit","gameInviteInfo","setGameInviteInfo","gameMode","setGameMode","adminConsole","setAdminConsole","adminConsoleAtom","userInfo","setUserInfo","userList","userListAtom","gameSocket","setGameSocket","isP1","setIsP1","gameWinner","players","setPlayers","socketAuth","constructor","inviteInfo","token","type","invite","observ","localStorage","getItem","PRIVATE","PUBLIC","gameType","userId","prev","clearState","auth","socket","connect","disconnect","connectionEventHandler","connected","recovered","disconnectionEventHandler","reason","console","log","gameStartEventHandler","matchEventHandler","_ref","uid","observerHandler","on","off","children","onClick","loading","fileName","_jsxFileName","lineNumber","columnNumber","gameOverModal","result","userDisplayName","leftScore","score","rightScore","_c","$RefreshReg$"],"sources":["/data/front/src/pages/GamePage.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport BackGround from \"../components/BackGround\";\nimport \"../components/GamePage/PingPong\";\nimport PingPong from \"../components/GamePage/PingPong\";\nimport TopBar from \"../components/TopBar\";\n\nimport { useAtom, useAtomValue, useSetAtom } from \"jotai\";\nimport {\n  isGameStartedAtom,\n  isLoadingAtom,\n  isMatchedAtom,\n  isPrivateAtom,\n  isGameQuitAtom,\n  gameInviteInfoAtom,\n  gameSocketAtom,\n  gameModeAtom,\n  isP1Atom,\n  gameWinnerAtom,\n  playersAtom,\n} from \"../components/atom/GameAtom\";\n\nimport * as chatSocket from \"../socket/chat.socket\";\nimport * as chatAtom from \"../components/atom/ChatAtom\";\nimport { gameResultModalAtom } from \"../components/atom/ModalAtom\";\nimport GameResultModal from \"../components/GamePage/GameResultModal\";\nimport LadderBoard from \"../components/GamePage/LadderBoard\";\n\nimport Waiting from \"../components/GamePage/Waiting\";\nimport { AdminLogPrinter, PressKey } from \"../event/event.util\";\nimport { io, Socket } from 'socket.io-client';\nimport { UserAtom } from \"../components/atom/UserAtom\";\nimport { GameType } from \"../socket/game.dto\";\nimport { p1, p2 } from \"../components/GamePage/GameInfo\";\n\nexport default function GamePage() {\n  const [showComponent, setShowComponent] = useState(true);\n  const [gameResultModal, setGameResultModal] = useAtom(gameResultModalAtom);\n\n  const [isLoading, setIsLoading] = useAtom(isLoadingAtom);\n  const [isMatched, setIsMatched] = useAtom(isMatchedAtom);\n  const [isPrivate, setIsPrivate] = useAtom(isPrivateAtom);\n  const [isGameStart, setIsGameStart] = useAtom(isGameStartedAtom);\n  const setIsGameQuit = useSetAtom(isGameQuitAtom);\n  const [gameInviteInfo, setGameInviteInfo] = useAtom(gameInviteInfoAtom);\n  const [gameMode, setGameMode] = useAtom(gameModeAtom);\n\n  const [adminConsole, setAdminConsole] = useAtom(chatAtom.adminConsoleAtom);\n\n  const [userInfo, setUserInfo] = useAtom(UserAtom);\n\n  const userList = useAtomValue(chatAtom.userListAtom);\n\n  // const [socket, setSocket] = useState(io());\n\n  const [gameSocket, setGameSocket] = useAtom(gameSocketAtom);\n  const [isP1, setIsP1] = useAtom(isP1Atom);\n\n  const gameWinner = useAtomValue(gameWinnerAtom);\n  const [players, setPlayers] = useAtom(playersAtom);\n\n  class socketAuth {\n    token: string | null;\n    type: GameType;\n    invite?: number;\n    observ?: number;\n    constructor(inviteInfo: {gameType: string, userId: number}) {\n      this.token = localStorage.getItem(\"refreshToken\");\n      this.type = isPrivate ? GameType.PRIVATE : GameType.PUBLIC;\n      if (inviteInfo.gameType === 'invite') {\n        this.invite = inviteInfo.userId;\n      } else if (inviteInfo.gameType === 'observe') {\n        this.observ = inviteInfo.userId;\n      }\n    }\n  }\n\n  PressKey([\"F4\"], () => {\n    setAdminConsole((prev) => !prev);\n  });\n\n  const clearState = () => {\n    setIsPrivate(false);\n    // setIsGameStart(false);\n    setIsLoading(false);\n    setIsMatched(false);\n    setIsGameQuit(true);\n    setGameMode('normal');\n  };\n\n  useEffect(() => {\n    AdminLogPrinter(adminConsole, `gameSocket connection`);\n    const auth = new socketAuth(gameInviteInfo);\n    gameSocket.auth = auth;\n    const socket = gameSocket;\n    socket.connect();\n    setGameSocket(socket);\n    setGameInviteInfo({ gameType: 'queue', userId: -1 });\n    setIsGameQuit(false);\n    setIsLoading(true);\n    return () => {\n      clearState();\n      gameSocket.disconnect();\n    };\n  }, []);\n\n  const connectionEventHandler = () => {\n    if (gameSocket.connected) {\n      //This attribute describes whether the socket is currently connected to the server.\n      if (gameSocket.recovered) {\n        // any missed packets will be received\n      } else {\n        // new or unrecoverable session\n        AdminLogPrinter(adminConsole, \"gameSocket connected\");\n      }\n    }\n  };\n\n  //https://socket.io/docs/v4/client-socket-instance/#disconnect\n  const disconnectionEventHandler = (reason: string) => {\n    if (reason === \"io server disconnect\") {\n    }\n    console.log(`gameSocket end`, reason);\n    clearState();\n    AdminLogPrinter(adminConsole, \"gameSocket disconnected\");\n  };\n\n  const gameStartEventHandler = () => {\n    AdminLogPrinter(adminConsole, \"game start\");\n    setIsLoading(false);\n    setIsMatched(false);\n    setIsGameStart(true);\n  };\n\n  const matchEventHandler = ({p1, p2}: { p1: number, p2: number }) => {\n    AdminLogPrinter(adminConsole, \"matched\");\n    if (p1 === userInfo.uid) {\n      setIsP1(true);\n    } else {\n      setIsP1(false);\n    }\n    setPlayers([p1, p2]);\n    setIsMatched(true);\n  };\n\n  const observerHandler = () => {\n    AdminLogPrinter(adminConsole, \"observer\");\n    setIsLoading(false);\n    setIsGameStart(true);\n  };\n\n  useEffect(() => {\n    AdminLogPrinter(\n      adminConsole,\n      `useeffect: isLoading: ${isLoading}, isPrivate: ${isPrivate}, isMatched: ${isMatched}, isGameStart: ${isGameStart}`\n    );\n  }, [isLoading, isPrivate, isGameStart, isMatched, gameSocket]);\n\n  useEffect(() => {\n    gameSocket.on(\"connect\", connectionEventHandler);\n    gameSocket.on(\"gameStart\", gameStartEventHandler);\n    return () => {\n      gameSocket.off(\"connect\", connectionEventHandler);\n      gameSocket.off(\"gameStart\", gameStartEventHandler);\n    };\n  }, [isGameStart, gameSocket]);\n\n  useEffect(() => {\n    gameSocket.on(\"disconnect\", disconnectionEventHandler);\n    return () => {\n      gameSocket.off(\"disconnect\", disconnectionEventHandler);\n    };\n  }, [isPrivate, isGameStart, gameSocket]);\n\n  useEffect(() => {\n    gameSocket.on(\"matched\", matchEventHandler);\n    return () => {\n      gameSocket.off(\"matched\", matchEventHandler);\n    }\n  }, [isMatched, gameSocket]);\n\n  // useEffect(() => {\n  //   return () => {\n  //   }\n  // }, [isLoading, isMatched, isGameStart]);\n\n  return (\n    <BackGround>\n      {adminConsole ? (\n        <div>\n          <button\n            onClick={() => {\n              const loading = !isLoading;\n              setIsLoading(loading);\n            }}\n          >\n            LadderRanking\n          </button>\n          <button\n            onClick={() => {\n              const gameOverModal = !gameResultModal;\n              setGameResultModal(gameOverModal);\n            }}\n          >\n            GameOver\n          </button>\n        </div>\n      ) : (\n        \"\"\n      )}\n      <TopBar />\n      {isLoading ? (\n        isPrivate ? (\n          <Waiting />\n        ) : (\n          isMatched ? (\n            <Waiting />\n          ) : (\n            <LadderBoard />\n          )\n        )\n      ) : isGameStart ? (\n        <PingPong />\n\n      ) : (\n        <Waiting />\n      )}\n      {gameResultModal ? <GameResultModal result={userList[gameWinner]?.userDisplayName} leftScore={isP1? p1.score : p2.score} rightScore={isP1? p2.score : p1.score} /> : null}\n    </BackGround>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}