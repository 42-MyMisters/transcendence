{"ast":null,"code":"import { io } from 'socket.io-client';\n// import * as chatAtom from '../components/atom/SocketAtom';\n// import type * as gameType from './game.dto';\n\nconst URL = \"http://localhost:4000\";\nconst GameNameSpace = \"/game\";\nexport const gameSocket = io(`${URL}${GameNameSpace}`, {\n  auth: cb => {\n    cb({\n      token: localStorage.getItem(\"refreshToken\")\n    });\n  },\n  autoConnect: false,\n  transports: [\"websocket\"]\n  // reconnectionDelay: 1000, // defaults to 1000\n  // reconnectionDelayMax: 10000, // defaults to 5000\n  // withCredentials: true,\n  // path: \"/socket.io\",\n});\n\nexport function OnSocketCoreEvent() {\n  // catch all incoming events\n  gameSocket.onAny(function (eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    console.log(\"incoming \", eventName, args);\n  });\n\n  // catch all outgoing events\n  gameSocket.prependAny(function (eventName) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    console.log(\"outgoing \", eventName, args);\n  });\n  gameSocket.on(\"connect\", () => {\n    if (gameSocket.connected) {\n      //This attribute describes whether the socket is currently connected to the server.\n      if (gameSocket.recovered) {\n        // any missed packets will be received\n      } else {\n        // new or unrecoverable session\n        console.log(\"gameSocket connected : \" + gameSocket.id);\n      }\n    }\n  });\n\n  //https://socket.io/docs/v4/client-socket-instance/#disconnect\n  gameSocket.on(\"disconnect\", reason => {\n    /**\n     *  BAD, will throw an error\n     *  gameSocket.emit(\"disconnect\");\n    */\n    if (reason === \"io server disconnect\") {\n      // the disconnection was initiated by the server, you need to reconnect manually\n    }\n    // else the socket will automatically try to reconnect\n    console.log(\"gameSocket disconnected\");\n  });\n\n  // the connection is denied by the server in a middleware function\n  gameSocket.on(\"connect_error\", err => {\n    if (err.message === \"unauthorized\") {\n      // handle each case\n    }\n    console.log(err.message); // prints the message associated with the error\n  });\n}\n_c = OnSocketCoreEvent;\nexport function OnSocketGameEvent() {\n  // const [roomList, setRoomList] = useAtom(chatAtom.roomListAtom);\n}\n_c2 = OnSocketGameEvent;\nvar _c, _c2;\n$RefreshReg$(_c, \"OnSocketCoreEvent\");\n$RefreshReg$(_c2, \"OnSocketGameEvent\");","map":{"version":3,"names":["io","URL","GameNameSpace","gameSocket","auth","cb","token","localStorage","getItem","autoConnect","transports","OnSocketCoreEvent","onAny","eventName","_len","arguments","length","args","Array","_key","console","log","prependAny","_len2","_key2","on","connected","recovered","id","reason","err","message","_c","OnSocketGameEvent","_c2","$RefreshReg$"],"sources":["/data/front/src/socket/game.socket.ts"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { useAtom } from \"jotai\";\n// import * as chatAtom from '../components/atom/SocketAtom';\n// import type * as gameType from './game.dto';\n\nconst URL = \"http://localhost:4000\";\n\nconst GameNameSpace = \"/game\";\nexport const gameSocket = io(`${URL}${GameNameSpace}`, {\n  auth: (cb) => {\n    cb({ token: localStorage.getItem(\"refreshToken\") });\n  },\n  autoConnect: false,\n  transports: [\"websocket\"],\n  // reconnectionDelay: 1000, // defaults to 1000\n  // reconnectionDelayMax: 10000, // defaults to 5000\n  // withCredentials: true,\n  // path: \"/socket.io\",\n});\n\nexport function OnSocketCoreEvent() {\n\n  // catch all incoming events\n  gameSocket.onAny((eventName, ...args) => {\n    console.log(\"incoming \", eventName, args);\n  });\n\n  // catch all outgoing events\n  gameSocket.prependAny((eventName, ...args) => {\n    console.log(\"outgoing \", eventName, args);\n  });\n\n  gameSocket.on(\"connect\", () => {\n    if (gameSocket.connected) {\n      //This attribute describes whether the socket is currently connected to the server.\n      if (gameSocket.recovered) {\n        // any missed packets will be received\n      } else {\n        // new or unrecoverable session\n        console.log(\"gameSocket connected : \" + gameSocket.id);\n      }\n    }\n  });\n\n  //https://socket.io/docs/v4/client-socket-instance/#disconnect\n  gameSocket.on(\"disconnect\", (reason) => {\n    /**\n     *  BAD, will throw an error\n     *  gameSocket.emit(\"disconnect\");\n    */\n    if (reason === \"io server disconnect\") {\n      // the disconnection was initiated by the server, you need to reconnect manually\n    }\n    // else the socket will automatically try to reconnect\n    console.log(\"gameSocket disconnected\");\n  });\n\n  // the connection is denied by the server in a middleware function\n  gameSocket.on(\"connect_error\", (err) => {\n    if (err.message === \"unauthorized\") {\n      // handle each case\n    }\n    console.log(err.message); // prints the message associated with the error\n  });\n}\n\nexport function OnSocketGameEvent() {\n  // const [roomList, setRoomList] = useAtom(chatAtom.roomListAtom);\n\n}\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AAErC;AACA;;AAEA,MAAMC,GAAG,GAAG,uBAAuB;AAEnC,MAAMC,aAAa,GAAG,OAAO;AAC7B,OAAO,MAAMC,UAAU,GAAGH,EAAE,CAAE,GAAEC,GAAI,GAAEC,aAAc,EAAC,EAAE;EACrDE,IAAI,EAAGC,EAAE,IAAK;IACZA,EAAE,CAAC;MAAEC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,cAAc;IAAE,CAAC,CAAC;EACrD,CAAC;EACDC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE,CAAC,WAAW;EACxB;EACA;EACA;EACA;AACF,CAAC,CAAC;;AAEF,OAAO,SAASC,iBAAiBA,CAAA,EAAG;EAElC;EACAR,UAAU,CAACS,KAAK,CAAC,UAACC,SAAS,EAAc;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAJF,IAAI,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAClCC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAER,SAAS,EAAEI,IAAI,CAAC;EAC3C,CAAC,CAAC;;EAEF;EACAd,UAAU,CAACmB,UAAU,CAAC,UAACT,SAAS,EAAc;IAAA,SAAAU,KAAA,GAAAR,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAK,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAJP,IAAI,CAAAO,KAAA,QAAAT,SAAA,CAAAS,KAAA;IAAA;IACvCJ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAER,SAAS,EAAEI,IAAI,CAAC;EAC3C,CAAC,CAAC;EAEFd,UAAU,CAACsB,EAAE,CAAC,SAAS,EAAE,MAAM;IAC7B,IAAItB,UAAU,CAACuB,SAAS,EAAE;MACxB;MACA,IAAIvB,UAAU,CAACwB,SAAS,EAAE;QACxB;MAAA,CACD,MAAM;QACL;QACAP,OAAO,CAACC,GAAG,CAAC,yBAAyB,GAAGlB,UAAU,CAACyB,EAAE,CAAC;MACxD;IACF;EACF,CAAC,CAAC;;EAEF;EACAzB,UAAU,CAACsB,EAAE,CAAC,YAAY,EAAGI,MAAM,IAAK;IACtC;AACJ;AACA;AACA;IACI,IAAIA,MAAM,KAAK,sBAAsB,EAAE;MACrC;IAAA;IAEF;IACAT,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACxC,CAAC,CAAC;;EAEF;EACAlB,UAAU,CAACsB,EAAE,CAAC,eAAe,EAAGK,GAAG,IAAK;IACtC,IAAIA,GAAG,CAACC,OAAO,KAAK,cAAc,EAAE;MAClC;IAAA;IAEFX,OAAO,CAACC,GAAG,CAACS,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;EAC5B,CAAC,CAAC;AACJ;AAACC,EAAA,GA5CerB,iBAAiB;AA8CjC,OAAO,SAASsB,iBAAiBA,CAAA,EAAG;EAClC;AAAA;AAEDC,GAAA,GAHeD,iBAAiB;AAAA,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}