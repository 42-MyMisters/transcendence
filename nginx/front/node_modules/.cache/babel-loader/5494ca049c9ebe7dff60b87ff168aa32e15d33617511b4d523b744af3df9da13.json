{"ast":null,"code":"import { io } from \"socket.io-client\";\n// import * as chatAtom from '../components/atom/SocketAtom';\n// import type * as gameType from './game.dto';\n\nconst URL = process.env.REACT_APP_API_URL;\nconst GameNameSpace = \"/game\";\nexport const gameSocket = io(`${URL}${GameNameSpace}`, {\n  auth: cb => {\n    cb({\n      token: localStorage.getItem(\"refreshToken\")\n    });\n  },\n  autoConnect: false,\n  transports: [\"websocket\"]\n  // reconnectionDelay: 1000, // defaults to 1000\n  // reconnectionDelayMax: 10000, // defaults to 5000\n  // withCredentials: true,\n  // path: \"/socket.io\",\n});\n\n// export function OnSocketCoreEvent() {\n\n//   // catch all incoming events\n//   gameSocket.onAny((eventName, ...args) => {\n//     AdminLogPrinter(adminConsole, \"incoming \", eventName, args);\n//   });\n\n//   // catch all outgoing events\n//   gameSocket.prependAny((eventName, ...args) => {\n//     AdminLogPrinter(adminConsole, \"outgoing \", eventName, args);\n//   });\n\n//   gameSocket.on(\"connect\", () => {\n//     if (gameSocket.connected) {\n//       //This attribute describes whether the socket is currently connected to the server.\n//       if (gameSocket.recovered) {\n//         // any missed packets will be received\n//       } else {\n//         // new or unrecoverable session\n//         AdminLogPrinter(adminConsole, \"gameSocket connected : \" + gameSocket.id);\n//       }\n//     }\n//   });\n\n//   //https://socket.io/docs/v4/client-socket-instance/#disconnect\n//   gameSocket.on(\"disconnect\", (reason) => {\n//     /**\n//      *  BAD, will throw an error\n//      *  gameSocket.emit(\"disconnect\");\n//     */\n//     if (reason === \"io server disconnect\") {\n//       // the disconnection was initiated by the server, you need to reconnect manually\n//     }\n//     // else the socket will automatically try to reconnect\n//     AdminLogPrinter(adminConsole, \"gameSocket disconnected\");\n//   });\n\n//   // the connection is denied by the server in a middleware function\n//   gameSocket.on(\"connect_error\", (err) => {\n//     if (err.message === \"unauthorized\") {\n//       // handle each case\n//     }\n//     AdminLogPrinter(adminConsole, err.message); // prints the message associated with the error\n//   });\n\n// gameSocket.on('join-game', ({\n//   uid_left,\n//   p1,\n//   uid_right\n// }: {\n//   uid_left: string;\n//   p1: number;\n//   uid_right: string;\n// }) => {\n\n// });\n\n// gameSocket.on('graphic', ({\n//   p1,\n//   ball_x,\n//   ball_y,\n//   p2\n// }: {\n//   p1: number;\n//   ball_x: number;\n//   ball_y: number;\n//   p2: number;\n// }) => {\n\n// });\n// }\n\nexport function OnSocketGameEvent() {\n  // const [roomList, setRoomList] = useAtom(chatAtom.roomListAtom);\n}\n_c = OnSocketGameEvent;\nexport function emitUpPress() {\n  gameSocket.emit(\"upPress\");\n}\nexport function emitUpRelease() {\n  gameSocket.emit(\"upRelease\");\n}\nexport function emitDownPress() {\n  gameSocket.emit(\"downPress\");\n}\nexport function emitDownRelease() {\n  gameSocket.emit(\"downRelease\");\n}\nvar _c;\n$RefreshReg$(_c, \"OnSocketGameEvent\");","map":{"version":3,"names":["io","URL","process","env","REACT_APP_API_URL","GameNameSpace","gameSocket","auth","cb","token","localStorage","getItem","autoConnect","transports","OnSocketGameEvent","_c","emitUpPress","emit","emitUpRelease","emitDownPress","emitDownRelease","$RefreshReg$"],"sources":["/data/front/src/socket/game.socket.ts"],"sourcesContent":["import { io } from \"socket.io-client\";\nimport { useAtom } from \"jotai\";\n// import * as chatAtom from '../components/atom/SocketAtom';\n// import type * as gameType from './game.dto';\n\nconst URL = process.env.REACT_APP_API_URL;\n\nconst GameNameSpace = \"/game\";\nexport const gameSocket = io(`${URL}${GameNameSpace}`, {\n  auth: (cb) => {\n    cb({ token: localStorage.getItem(\"refreshToken\") });\n  },\n  autoConnect: false,\n  transports: [\"websocket\"],\n  // reconnectionDelay: 1000, // defaults to 1000\n  // reconnectionDelayMax: 10000, // defaults to 5000\n  // withCredentials: true,\n  // path: \"/socket.io\",\n});\n\n// export function OnSocketCoreEvent() {\n\n//   // catch all incoming events\n//   gameSocket.onAny((eventName, ...args) => {\n//     AdminLogPrinter(adminConsole, \"incoming \", eventName, args);\n//   });\n\n//   // catch all outgoing events\n//   gameSocket.prependAny((eventName, ...args) => {\n//     AdminLogPrinter(adminConsole, \"outgoing \", eventName, args);\n//   });\n\n//   gameSocket.on(\"connect\", () => {\n//     if (gameSocket.connected) {\n//       //This attribute describes whether the socket is currently connected to the server.\n//       if (gameSocket.recovered) {\n//         // any missed packets will be received\n//       } else {\n//         // new or unrecoverable session\n//         AdminLogPrinter(adminConsole, \"gameSocket connected : \" + gameSocket.id);\n//       }\n//     }\n//   });\n\n//   //https://socket.io/docs/v4/client-socket-instance/#disconnect\n//   gameSocket.on(\"disconnect\", (reason) => {\n//     /**\n//      *  BAD, will throw an error\n//      *  gameSocket.emit(\"disconnect\");\n//     */\n//     if (reason === \"io server disconnect\") {\n//       // the disconnection was initiated by the server, you need to reconnect manually\n//     }\n//     // else the socket will automatically try to reconnect\n//     AdminLogPrinter(adminConsole, \"gameSocket disconnected\");\n//   });\n\n//   // the connection is denied by the server in a middleware function\n//   gameSocket.on(\"connect_error\", (err) => {\n//     if (err.message === \"unauthorized\") {\n//       // handle each case\n//     }\n//     AdminLogPrinter(adminConsole, err.message); // prints the message associated with the error\n//   });\n\n// gameSocket.on('join-game', ({\n//   uid_left,\n//   p1,\n//   uid_right\n// }: {\n//   uid_left: string;\n//   p1: number;\n//   uid_right: string;\n// }) => {\n\n// });\n\n// gameSocket.on('graphic', ({\n//   p1,\n//   ball_x,\n//   ball_y,\n//   p2\n// }: {\n//   p1: number;\n//   ball_x: number;\n//   ball_y: number;\n//   p2: number;\n// }) => {\n\n// });\n// }\n\nexport function OnSocketGameEvent() {\n  // const [roomList, setRoomList] = useAtom(chatAtom.roomListAtom);\n}\n\nexport function emitUpPress() {\n  gameSocket.emit(\"upPress\");\n}\nexport function emitUpRelease() {\n  gameSocket.emit(\"upRelease\");\n}\n\nexport function emitDownPress() {\n  gameSocket.emit(\"downPress\");\n}\n\nexport function emitDownRelease() {\n  gameSocket.emit(\"downRelease\");\n}\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AAErC;AACA;;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAEzC,MAAMC,aAAa,GAAG,OAAO;AAC7B,OAAO,MAAMC,UAAU,GAAGN,EAAE,CAAE,GAAEC,GAAI,GAAEI,aAAc,EAAC,EAAE;EACrDE,IAAI,EAAGC,EAAE,IAAK;IACZA,EAAE,CAAC;MAAEC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,cAAc;IAAE,CAAC,CAAC;EACrD,CAAC;EACDC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE,CAAC,WAAW;EACxB;EACA;EACA;EACA;AACF,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAO,SAASC,iBAAiBA,CAAA,EAAG;EAClC;AAAA;AACDC,EAAA,GAFeD,iBAAiB;AAIjC,OAAO,SAASE,WAAWA,CAAA,EAAG;EAC5BV,UAAU,CAACW,IAAI,CAAC,SAAS,CAAC;AAC5B;AACA,OAAO,SAASC,aAAaA,CAAA,EAAG;EAC9BZ,UAAU,CAACW,IAAI,CAAC,WAAW,CAAC;AAC9B;AAEA,OAAO,SAASE,aAAaA,CAAA,EAAG;EAC9Bb,UAAU,CAACW,IAAI,CAAC,WAAW,CAAC;AAC9B;AAEA,OAAO,SAASG,eAAeA,CAAA,EAAG;EAChCd,UAAU,CAACW,IAAI,CAAC,aAAa,CAAC;AAChC;AAAC,IAAAF,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}