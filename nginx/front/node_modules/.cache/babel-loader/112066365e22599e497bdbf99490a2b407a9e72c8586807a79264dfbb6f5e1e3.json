{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { AdminLogPrinter } from '../event/event.util';\nconst URL = \"http://localhost:4000\";\nconst NameSpace = \"/sock\";\nexport const socket = io(`${URL}${NameSpace}`, {\n  auth: cb => {\n    cb({\n      token: localStorage.getItem(\"refreshToken\")\n    });\n  },\n  autoConnect: false,\n  transports: [\"websocket\"]\n  // reconnectionDelay: 1000, // defaults to 1000\n  // reconnectionDelayMax: 10000, // defaults to 5000\n  // withCredentials: true,\n  // path: \"/socket.io\",\n});\n\nexport function emitRoomCreate(adminConsole, roomName) {\n  let roomCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let roomPass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  const roomType = roomCheck ? 'private' : roomPass ? 'protected' : 'open';\n  socket.emit(\"room-create\", {\n    roomName,\n    roomType,\n    roomPass\n  }, _ref => {\n    let {\n      status,\n      payload\n    } = _ref;\n    switch (status) {\n      case 'ok':\n        {\n          AdminLogPrinter(adminConsole, \"room-create success\");\n          break;\n        }\n      case 'ko':\n        {\n          AdminLogPrinter(adminConsole, \"room-create fail\");\n          alert(`${roomName} room-create fail ${payload}`);\n          break;\n        }\n    }\n    ;\n  });\n}\nexport function emitRoomEdit(adminConsole, roomId) {\n  let roomName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  let roomCheck = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let roomPass = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  let roomCurrentType = arguments.length > 5 ? arguments[5] : undefined;\n  if (roomCurrentType === 'dm') {\n    alert(`dm room can't be edited`);\n    return;\n  }\n  const roomType = roomCheck ? 'private' : roomCurrentType === 'protected' ? 'protected' : roomPass !== '' ? 'protected' : 'open';\n  socket.emit(\"room-edit\", {\n    roomId,\n    roomName,\n    roomType,\n    roomPass\n  }, _ref2 => {\n    let {\n      status,\n      payload\n    } = _ref2;\n    switch (status) {\n      case 'ok':\n        {\n          AdminLogPrinter(adminConsole, \"room-edit success\");\n          break;\n        }\n      case 'ko':\n        {\n          AdminLogPrinter(adminConsole, \"room-edit fail\");\n          alert(`${roomName} room-edit fail ${payload}`);\n          break;\n        }\n    }\n    ;\n  });\n}\nexport function emitRoomJoin(_ref3, roomId, roomPass) {\n  let {\n    adminConsole,\n    roomList,\n    setRoomList,\n    focusRoom,\n    setFocusRoom\n  } = _ref3;\n  socket.emit(\"room-join\", {\n    roomId,\n    roomPass\n  }, _ref4 => {\n    let {\n      status,\n      payload\n    } = _ref4;\n    switch (status) {\n      case 'ok':\n        {\n          AdminLogPrinter(adminConsole, `${roomList[roomId].roomName} room-join success`);\n          break;\n        }\n      case 'ko':\n        {\n          alert(`room-join fail: \\n\\n${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function emitRoomInvite(adminConsole, roomId, targetName) {\n  socket.emit(\"room-invite\", {\n    roomId,\n    targetName\n  }, _ref5 => {\n    let {\n      status,\n      payload\n    } = _ref5;\n    if (status === 'ok') {\n      AdminLogPrinter(adminConsole, `callback: room-invite success`);\n    } else {\n      alert(`room-invite fail: ${payload}`);\n    }\n  });\n}\nexport function emitRoomLeave(_ref6, roomId) {\n  let {\n    adminConsole,\n    roomList,\n    setRoomList,\n    focusRoom,\n    setFocusRoom\n  } = _ref6;\n  let ban = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  socket.emit(\"room-leave\", {\n    roomId\n  }, _ref7 => {\n    let {\n      status\n    } = _ref7;\n    if (status === 'leave') {\n      AdminLogPrinter(adminConsole, `callback: room leaved: ${roomList[roomId].roomName}`);\n      if (roomList[roomId].roomType === 'private') {\n        const newRoomList = {\n          ...roomList\n        };\n        delete newRoomList[roomId];\n        setRoomList({\n          ...newRoomList\n        });\n      } else {\n        const newRoomList = {};\n        newRoomList[roomId] = {\n          roomName: roomList[roomId].roomName,\n          roomType: roomList[roomId].roomType,\n          isJoined: false\n        };\n        setRoomList({\n          ...roomList,\n          ...newRoomList\n        });\n      }\n      if (focusRoom === roomId) {\n        setFocusRoom(-1);\n      }\n    } else if (status === 'delete') {\n      AdminLogPrinter(adminConsole, `callback: room delete: ${roomList[roomId].roomName}`);\n    } else {\n      AdminLogPrinter(adminConsole, 'callback: room leave failed');\n    }\n  });\n}\nexport function emitRoomInAction(_ref8, roomId, action, targetId) {\n  let {\n    adminConsole,\n    roomList,\n    setRoomList\n  } = _ref8;\n  socket.emit(\"room-in-action\", {\n    roomId,\n    action,\n    targetId\n  }, _ref9 => {\n    let {\n      status,\n      payload\n    } = _ref9;\n    switch (status) {\n      case 'ok':\n        {\n          AdminLogPrinter(adminConsole, `room - inaction in ${roomId} to ${targetId} with ${action} OK`);\n          break;\n        }\n      case 'ko':\n        {\n          AdminLogPrinter(adminConsole, `room - inaction in ${roomId} to ${targetId} with ${action} failed: ${payload} `);\n          alert(`Room in Action [${action}] is faild: ${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function emitMessage(_ref10, roomId, message) {\n  var _roomList$roomId, _roomList$roomId$deta;\n  let {\n    adminConsole,\n    roomList\n  } = _ref10;\n  if (((_roomList$roomId = roomList[roomId]) === null || _roomList$roomId === void 0 ? void 0 : (_roomList$roomId$deta = _roomList$roomId.detail) === null || _roomList$roomId$deta === void 0 ? void 0 : _roomList$roomId$deta.myRoomStatus) === 'mute') {\n    alert('You are muted for 10 sec in this room');\n    return;\n  }\n  socket.emit(\"message\", {\n    roomId,\n    message\n  }, _ref11 => {\n    let {\n      status,\n      payload\n    } = _ref11;\n    switch (status) {\n      case 'ok':\n        {\n          AdminLogPrinter(adminConsole, `message to ${roomList[roomId].roomName} is sended: ${message} `);\n          break;\n        }\n      case 'ko':\n        {\n          AdminLogPrinter(adminConsole, `message to ${roomId} is failed: \\n\\n${payload} `);\n          alert(`message failed: ${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function setNewDetailToNewRoom(_ref12, status, power) {\n  var _roomList$roomId$deta2, _roomList$roomId$deta3, _roomList$roomId$deta4;\n  let {\n    roomList,\n    setRoomList,\n    roomId,\n    newUserList\n  } = _ref12;\n  const newRoomList = {};\n  newRoomList[roomId] = {\n    roomName: roomList[roomId].roomName,\n    roomType: roomList[roomId].roomType,\n    isJoined: roomList[roomId].isJoined,\n    detail: {\n      userList: {\n        ...newUserList\n      },\n      messageList: ((_roomList$roomId$deta2 = roomList[roomId].detail) === null || _roomList$roomId$deta2 === void 0 ? void 0 : _roomList$roomId$deta2.messageList) || [],\n      myRoomStatus: status || ((_roomList$roomId$deta3 = roomList[roomId].detail) === null || _roomList$roomId$deta3 === void 0 ? void 0 : _roomList$roomId$deta3.myRoomStatus) || 'normal',\n      myRoomPower: power || ((_roomList$roomId$deta4 = roomList[roomId].detail) === null || _roomList$roomId$deta4 === void 0 ? void 0 : _roomList$roomId$deta4.myRoomPower) || 'member'\n    }\n  };\n  setRoomList({\n    ...roomList,\n    ...newRoomList\n  });\n}\nexport function emitBlockUser(_ref13, targetId, doOrUndo) {\n  let {\n    adminConsole,\n    blockList,\n    setBlockList\n  } = _ref13;\n  if (doOrUndo) {\n    AdminLogPrinter(adminConsole, `block user: ${targetId}`);\n  } else {\n    AdminLogPrinter(adminConsole, `unblock user: ${targetId}`);\n  }\n  socket.emit(\"user-block\", {\n    targetId,\n    doOrUndo\n  }, _ref14 => {\n    let {\n      status,\n      payload\n    } = _ref14;\n    switch (status) {\n      case 'on':\n        {\n          const newBlockUser = {};\n          newBlockUser[targetId] = {\n            blocked: true\n          };\n          setBlockList({\n            ...blockList,\n            ...newBlockUser\n          });\n          break;\n        }\n      case 'off':\n        {\n          const newBlockList = {\n            ...blockList\n          };\n          delete newBlockList[targetId];\n          setBlockList({\n            ...newBlockList\n          });\n          break;\n        }\n      case 'ko':\n        {\n          AdminLogPrinter(adminConsole, `user - block failed: ${payload} `);\n          alert(`block failed: ${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function emitDmRoomCreate(adminConsole, targetId) {\n  socket.emit(\"dm-room-create\", {\n    targetId\n  }, _ref15 => {\n    let {\n      status\n    } = _ref15;\n    if (status === 'ok') {\n      AdminLogPrinter(adminConsole, `dm room create to ${targetId} is sended`);\n    } else {\n      AdminLogPrinter(adminConsole, `dm room create to ${targetId} is failed`);\n    }\n  });\n}\nexport function emitDM(adminConsole, targetId, message) {\n  socket.emit(\"message-dm\", {\n    targetId,\n    message\n  }, _ref16 => {\n    let {\n      status\n    } = _ref16;\n    if (status === 'ok') {\n      AdminLogPrinter(adminConsole, `dm to ${targetId} is sended: ${message}`);\n    } else {\n      AdminLogPrinter(adminConsole, `dm to ${targetId} is failed: ${message}`);\n    }\n  });\n}","map":{"version":3,"names":["io","AdminLogPrinter","URL","NameSpace","socket","auth","cb","token","localStorage","getItem","autoConnect","transports","emitRoomCreate","adminConsole","roomName","roomCheck","arguments","length","undefined","roomPass","roomType","emit","_ref","status","payload","alert","emitRoomEdit","roomId","roomCurrentType","_ref2","emitRoomJoin","_ref3","roomList","setRoomList","focusRoom","setFocusRoom","_ref4","emitRoomInvite","targetName","_ref5","emitRoomLeave","_ref6","ban","_ref7","newRoomList","isJoined","emitRoomInAction","_ref8","action","targetId","_ref9","emitMessage","_ref10","message","_roomList$roomId","_roomList$roomId$deta","detail","myRoomStatus","_ref11","setNewDetailToNewRoom","_ref12","power","_roomList$roomId$deta2","_roomList$roomId$deta3","_roomList$roomId$deta4","newUserList","userList","messageList","myRoomPower","emitBlockUser","_ref13","doOrUndo","blockList","setBlockList","_ref14","newBlockUser","blocked","newBlockList","emitDmRoomCreate","_ref15","emitDM","_ref16"],"sources":["/data/front/src/socket/chat.socket.ts"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { useAtom } from \"jotai\";\nimport * as chatAtom from '../components/atom/ChatAtom';\nimport * as userAtom from '../components/atom/UserAtom';\nimport type * as chatType from './chat.dto';\n\nimport { AdminLogPrinter } from '../event/event.util';\n\nconst URL = \"http://localhost:4000\";\nconst NameSpace = \"/sock\";\n\nexport const socket = io(`${URL}${NameSpace}`, {\n\tauth: (cb) => {\n\t\tcb({ token: localStorage.getItem(\"refreshToken\") });\n\t},\n\tautoConnect: false,\n\ttransports: [\"websocket\"],\n\t// reconnectionDelay: 1000, // defaults to 1000\n\t// reconnectionDelayMax: 10000, // defaults to 5000\n\t// withCredentials: true,\n\t// path: \"/socket.io\",\n});\n\nexport function emitRoomCreate(\n\tadminConsole: boolean,\n\troomName: string,\n\troomCheck: boolean = false,\n\troomPass: string = '',\n) {\n\tconst roomType = roomCheck\n\t\t? 'private'\n\t\t: roomPass\n\t\t\t? 'protected'\n\t\t\t: 'open';\n\tsocket.emit(\"room-create\", {\n\t\troomName,\n\t\troomType,\n\t\troomPass,\n\t}, ({\n\t\tstatus,\n\t\tpayload,\n\t}: {\n\t\tstatus: 'ok' | 'ko',\n\t\tpayload?: string,\n\t}) => {\n\t\tswitch (status) {\n\t\t\tcase 'ok': {\n\t\t\t\tAdminLogPrinter(adminConsole, \"room-create success\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'ko': {\n\t\t\t\tAdminLogPrinter(adminConsole, \"room-create fail\");\n\t\t\t\talert(`${roomName} room-create fail ${payload}`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t});\n}\n\nexport function emitRoomEdit(\n\tadminConsole: boolean,\n\troomId: number,\n\troomName: string = '',\n\troomCheck: boolean = false,\n\troomPass: string = '',\n\troomCurrentType: 'open' | 'private' | 'protected' | 'dm',\n) {\n\tif (roomCurrentType === 'dm') {\n\t\talert(`dm room can't be edited`);\n\t\treturn;\n\t}\n\tconst roomType = roomCheck\n\t\t? 'private'\n\t\t: roomCurrentType === 'protected'\n\t\t\t? 'protected'\n\t\t\t: roomPass !== ''\n\t\t\t\t? 'protected'\n\t\t\t\t: 'open'\n\tsocket.emit(\"room-edit\", {\n\t\troomId,\n\t\troomName,\n\t\troomType,\n\t\troomPass,\n\t}, ({\n\t\tstatus,\n\t\tpayload,\n\t}: {\n\t\tstatus: 'ok' | 'ko',\n\t\tpayload?: string,\n\t}) => {\n\t\tswitch (status) {\n\t\t\tcase 'ok': {\n\t\t\t\tAdminLogPrinter(adminConsole, \"room-edit success\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'ko': {\n\t\t\t\tAdminLogPrinter(adminConsole, \"room-edit fail\");\n\t\t\t\talert(`${roomName} room-edit fail ${payload}`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t});\n}\n\nexport function emitRoomJoin(\n\t{\n\t\tadminConsole,\n\t\troomList,\n\t\tsetRoomList,\n\t\tfocusRoom,\n\t\tsetFocusRoom\n\t}: {\n\t\tadminConsole: boolean,\n\t\troomList: chatType.roomListDto,\n\t\tsetRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>,\n\t\tfocusRoom: number,\n\t\tsetFocusRoom: React.Dispatch<React.SetStateAction<number>>,\n\t},\n\troomId: number,\n\troomPass?: string,\n) {\n\tsocket.emit(\"room-join\", {\n\t\troomId,\n\t\troomPass,\n\t}, ({\n\t\tstatus,\n\t\tpayload\n\t}: {\n\t\tstatus: 'ok' | 'ko';\n\t\tpayload?: string;\n\t}) => {\n\t\tswitch (status) {\n\t\t\tcase 'ok': {\n\t\t\t\tAdminLogPrinter(adminConsole, `${roomList[roomId].roomName} room-join success`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'ko': {\n\t\t\t\talert(`room-join fail: \\n\\n${payload}`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n}\n\nexport function emitRoomInvite(adminConsole: boolean, roomId: number, targetName: string) {\n\tsocket.emit(\"room-invite\", { roomId, targetName }, ({\n\t\tstatus,\n\t\tpayload }: {\n\t\t\tstatus: 'ok' | 'ko';\n\t\t\tpayload?: string\n\t\t}) => {\n\t\tif (status === 'ok') {\n\t\t\tAdminLogPrinter(adminConsole, `callback: room-invite success`);\n\t\t} else {\n\t\t\talert(`room-invite fail: ${payload}`)\n\t\t}\n\t})\n}\n\nexport function emitRoomLeave(\n\t{\n\t\tadminConsole,\n\t\troomList,\n\t\tsetRoomList,\n\t\tfocusRoom,\n\t\tsetFocusRoom\n\t}: {\n\t\tadminConsole: boolean\n\t\troomList: chatType.roomListDto,\n\t\tsetRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>,\n\t\tfocusRoom: number,\n\t\tsetFocusRoom: React.Dispatch<React.SetStateAction<number>>,\n\t},\n\troomId: number,\n\tban: boolean = false\n) {\n\tsocket.emit(\"room-leave\", {\n\t\troomId\n\t}, ({\n\t\tstatus,\n\t}: {\n\t\tstatus: 'leave' | 'delete',\n\t}) => {\n\t\tif (status === 'leave') {\n\t\t\tAdminLogPrinter(adminConsole, `callback: room leaved: ${roomList[roomId].roomName}`);\n\t\t\tif (roomList[roomId].roomType === 'private') {\n\t\t\t\tconst newRoomList: chatType.roomListDto = { ...roomList };\n\t\t\t\tdelete newRoomList[roomId];\n\t\t\t\tsetRoomList({ ...newRoomList });\n\t\t\t} else {\n\t\t\t\tconst newRoomList: chatType.roomListDto = {};\n\t\t\t\tnewRoomList[roomId] = {\n\t\t\t\t\troomName: roomList[roomId].roomName,\n\t\t\t\t\troomType: roomList[roomId].roomType,\n\t\t\t\t\tisJoined: false,\n\t\t\t\t}\n\t\t\t\tsetRoomList({ ...roomList, ...newRoomList });\n\t\t\t}\n\t\t\tif (focusRoom === roomId) {\n\t\t\t\tsetFocusRoom(-1);\n\t\t\t}\n\t\t} else if (status === 'delete') {\n\t\t\tAdminLogPrinter(adminConsole, `callback: room delete: ${roomList[roomId].roomName}`);\n\t\t} else {\n\t\t\tAdminLogPrinter(adminConsole, 'callback: room leave failed');\n\t\t}\n\t});\n}\n\nexport function emitRoomInAction(\n\t{\n\t\tadminConsole,\n\t\troomList,\n\t\tsetRoomList,\n\t}: {\n\t\tadminConsole: boolean,\n\t\troomList: chatType.roomListDto,\n\t\tsetRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>,\n\t},\n\troomId: number,\n\taction: 'ban' | 'kick' | 'mute' | 'admin',\n\ttargetId: number,\n) {\n\tsocket.emit(\"room-in-action\", {\n\t\troomId,\n\t\taction,\n\t\ttargetId,\n\t}, ({\n\t\tstatus,\n\t\tpayload,\n\t}: {\n\t\tstatus: 'ok' | 'ko',\n\t\tpayload?: string,\n\t}) => {\n\t\tswitch (status) {\n\t\t\tcase 'ok': {\n\t\t\t\tAdminLogPrinter(adminConsole, `room - inaction in ${roomId} to ${targetId} with ${action} OK`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'ko': {\n\t\t\t\tAdminLogPrinter(adminConsole, `room - inaction in ${roomId} to ${targetId} with ${action} failed: ${payload} `);\n\t\t\t\talert(`Room in Action [${action}] is faild: ${payload}`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n}\n\nexport function emitMessage({ adminConsole, roomList }: { adminConsole: boolean, roomList: chatType.roomListDto, }, roomId: number, message: string,) {\n\tif (roomList[roomId]?.detail?.myRoomStatus === 'mute') {\n\t\talert('You are muted for 10 sec in this room');\n\t\treturn;\n\t}\n\tsocket.emit(\"message\", {\n\t\troomId,\n\t\tmessage\n\t}, ({\n\t\tstatus,\n\t\tpayload,\n\t}: {\n\t\tstatus: 'ok' | 'ko',\n\t\tpayload?: 'string'\n\t}) => {\n\t\tswitch (status) {\n\t\t\tcase 'ok': {\n\t\t\t\tAdminLogPrinter(adminConsole, `message to ${roomList[roomId].roomName} is sended: ${message} `);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'ko': {\n\t\t\t\tAdminLogPrinter(adminConsole, `message to ${roomId} is failed: \\n\\n${payload} `);\n\t\t\t\talert(`message failed: ${payload}`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n}\n\nexport function setNewDetailToNewRoom({\n\troomList,\n\tsetRoomList,\n\troomId,\n\tnewUserList,\n}: {\n\troomList: chatType.roomListDto,\n\tsetRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>,\n\troomId: number,\n\tnewUserList: chatType.userInRoomListDto\n}, status?: chatType.userRoomStatus,\n\tpower?: chatType.userRoomPower) {\n\tconst newRoomList: chatType.roomListDto = {}\n\tnewRoomList[roomId] = {\n\t\troomName: roomList[roomId].roomName,\n\t\troomType: roomList[roomId].roomType,\n\t\tisJoined: roomList[roomId].isJoined,\n\t\tdetail: {\n\t\t\tuserList: { ...newUserList },\n\t\t\tmessageList: roomList[roomId].detail?.messageList || [],\n\t\t\tmyRoomStatus: status || roomList[roomId].detail?.myRoomStatus! || 'normal',\n\t\t\tmyRoomPower: power || roomList[roomId].detail?.myRoomPower! || 'member'\n\t\t}\n\t};\n\tsetRoomList({ ...roomList, ...newRoomList });\n}\n\n\nexport function emitBlockUser({\n\tadminConsole,\n\tblockList,\n\tsetBlockList,\n}: {\n\tadminConsole: boolean,\n\tblockList: chatType.userSimpleDto,\n\tsetBlockList: React.Dispatch<React.SetStateAction<chatType.userSimpleDto>>,\n},\n\ttargetId: number,\n\tdoOrUndo: boolean,\n) {\n\tif (doOrUndo) {\n\t\tAdminLogPrinter(adminConsole, `block user: ${targetId}`);\n\t} else {\n\t\tAdminLogPrinter(adminConsole, `unblock user: ${targetId}`);\n\t}\n\tsocket.emit(\"user-block\", {\n\t\ttargetId,\n\t\tdoOrUndo\n\t}, ({\n\t\tstatus,\n\t\tpayload\n\t}: {\n\t\tstatus: 'on' | 'off' | 'ko',\n\t\tpayload?: string,\n\t}) => {\n\t\tswitch (status) {\n\t\t\tcase 'on': {\n\t\t\t\tconst newBlockUser: chatType.userSimpleDto = {};\n\t\t\t\tnewBlockUser[targetId] = {\n\t\t\t\t\tblocked: true\n\t\t\t\t}\n\t\t\t\tsetBlockList({ ...blockList, ...newBlockUser });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'off': {\n\t\t\t\tconst newBlockList: chatType.userSimpleDto = { ...blockList };\n\t\t\t\tdelete newBlockList[targetId];\n\t\t\t\tsetBlockList({ ...newBlockList });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'ko': {\n\t\t\t\tAdminLogPrinter(adminConsole, `user - block failed: ${payload} `);\n\t\t\t\talert(`block failed: ${payload}`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n}\n\n\nexport function emitDmRoomCreate(adminConsole: boolean, targetId: number,) {\n\tsocket.emit(\"dm-room-create\", {\n\t\ttargetId,\n\t}, ({\n\t\tstatus\n\t}: {\n\t\tstatus: 'ok' | 'ko',\n\t}) => {\n\t\tif (status === 'ok') {\n\t\t\tAdminLogPrinter(adminConsole, `dm room create to ${targetId} is sended`);\n\t\t} else {\n\t\t\tAdminLogPrinter(adminConsole, `dm room create to ${targetId} is failed`);\n\t\t}\n\t});\n}\n\nexport function emitDM(adminConsole: boolean, targetId: number, message: string) {\n\tsocket.emit(\"message-dm\", {\n\t\ttargetId,\n\t\tmessage\n\t}, ({\n\t\tstatus,\n\t}: {\n\t\tstatus: 'ok' | 'ko',\n\t}) => {\n\t\tif (status === 'ok') {\n\t\t\tAdminLogPrinter(adminConsole, `dm to ${targetId} is sended: ${message}`);\n\t\t} else {\n\t\t\tAdminLogPrinter(adminConsole, `dm to ${targetId} is failed: ${message}`);\n\t\t}\n\t})\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}