{"ast":null,"code":"import * as socket from \"../socket/chat.socket\";\nimport { AdminLogPrinter } from \"../event/event.util\";\nexport async function DoFollow(adminConsole, userUid, doOrUndo, followingList, setFollowingList, userList) {\n  let status = -1;\n  const resource = doOrUndo ? \"follow\" : \"unfollow\";\n  await fetch(`${process.env.REACT_APP_API_URL}/user/` + resource + `/${userUid}`, {\n    credentials: \"include\",\n    method: \"POST\"\n  }).then(response => {\n    status = response.status;\n    switch (response.status) {\n      case 201:\n        {\n          if (doOrUndo) {\n            const tempFollowing = {};\n            tempFollowing[userUid] = {\n              ...userList[userUid]\n            };\n            setFollowingList({\n              ...followingList,\n              ...tempFollowing\n            });\n          } else {\n            const tempFollowing = {\n              ...followingList\n            };\n            delete tempFollowing[userUid];\n            setFollowingList({\n              ...tempFollowing\n            });\n          }\n          break;\n        }\n      default:\n        {\n          throw new Error(`${response.status}`);\n        }\n    }\n  }).catch(error => {\n    AdminLogPrinter(adminConsole, `\\nDoFollow catch_error: ${error} `);\n  });\n  return status;\n}\n_c = DoFollow;\nexport async function GetMyInfo(adminConsole, setUserInfo) {\n  let status = -1;\n  await fetch(`${process.env.REACT_APP_API_URL}/user/me`, {\n    credentials: \"include\",\n    method: \"GET\"\n  }).then(response => {\n    switch (response.status) {\n      case 200:\n        {\n          status = 200;\n          return response.json();\n        }\n      default:\n        {\n          throw new Error(`${response.status}`);\n        }\n    }\n  }).then(response => {\n    AdminLogPrinter(adminConsole, `\\nGetMyInfo: ${JSON.stringify(response)}`);\n    response.nickname = response.nickname.split(\"#\", 2)[0];\n    setUserInfo({\n      ...response\n    });\n  }).catch(error => {\n    status = error.message;\n    AdminLogPrinter(adminConsole, `\\nGetMyInfo catch_error: ${error} `);\n  });\n  return status;\n}\n_c2 = GetMyInfo;\nexport async function GetOtherProfile(adminConsole, setUserInfo, uid) {\n  let status = -1;\n  await fetch(`${process.env.REACT_APP_API_URL}/user/profile/` + `${uid}`, {\n    credentials: \"include\",\n    method: \"GET\"\n  }).then(response => {\n    switch (response.status) {\n      case 200:\n        {\n          status = 200;\n          return response.json();\n        }\n      default:\n        {\n          throw new Error(`${response.status}`);\n        }\n    }\n  }).then(response => {\n    AdminLogPrinter(adminConsole, `\\nGetOtherProfile: ${JSON.stringify(response)}`);\n    response.nickname = response.nickname.split(\"#\", 2)[0];\n    setUserInfo({\n      ...response\n    });\n  }).catch(error => {\n    status = error.message;\n    AdminLogPrinter(adminConsole, `\\nGetOtherProfile catch_error: ${error} `);\n  });\n  return status;\n}\n_c3 = GetOtherProfile;\nexport async function RefreshToken(adminConsole) {\n  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  let status = -1;\n  AdminLogPrinter(adminConsole, `in try refresh Token`);\n  await fetch(`${process.env.REACT_APP_API_URL}/login/oauth/refresh`, {\n    credentials: \"include\",\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + localStorage.getItem(\"refreshToken\")\n    }\n  }).then(response => {\n    status = response.status;\n    switch (response.status) {\n      case 201:\n        {\n          callback();\n          break;\n        }\n      default:\n        {\n          throw new Error(`${response.status}`);\n        }\n    }\n  }).catch(error => {\n    AdminLogPrinter(adminConsole, `\\nRefreshToken catch_error: ${error} `);\n  });\n  return status;\n}\n_c4 = RefreshToken;\nexport function LogOut(adminConsole, setRefreshToken, navigate, to) {\n  AdminLogPrinter(adminConsole, \"logout\");\n  socket.socket.emit(\"chat-logout\");\n  socket.socket.disconnect();\n  localStorage.clear();\n  setRefreshToken(false);\n  navigate(to);\n}\n_c5 = LogOut;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"DoFollow\");\n$RefreshReg$(_c2, \"GetMyInfo\");\n$RefreshReg$(_c3, \"GetOtherProfile\");\n$RefreshReg$(_c4, \"RefreshToken\");\n$RefreshReg$(_c5, \"LogOut\");","map":{"version":3,"names":["socket","AdminLogPrinter","DoFollow","adminConsole","userUid","doOrUndo","followingList","setFollowingList","userList","status","resource","fetch","process","env","REACT_APP_API_URL","credentials","method","then","response","tempFollowing","Error","catch","error","_c","GetMyInfo","setUserInfo","json","JSON","stringify","nickname","split","message","_c2","GetOtherProfile","uid","_c3","RefreshToken","callback","arguments","length","undefined","headers","Accept","Authorization","localStorage","getItem","_c4","LogOut","setRefreshToken","navigate","to","emit","disconnect","clear","_c5","$RefreshReg$"],"sources":["/data/front/src/event/api.request.ts"],"sourcesContent":["import { NavigateFunction } from \"react-router-dom\";\nimport type { UserType } from \"../components/atom/UserAtom\";\nimport type * as chatType from \"../socket/chat.dto\";\nimport * as socket from \"../socket/chat.socket\";\nimport { AdminLogPrinter } from \"../event/event.util\";\n\ntype setUserInfo = React.Dispatch<React.SetStateAction<UserType>>;\n\nexport async function DoFollow(\n  adminConsole: boolean,\n  userUid: number,\n  doOrUndo: boolean,\n  followingList: chatType.userDto,\n  setFollowingList: React.Dispatch<React.SetStateAction<chatType.userDto>>,\n  userList: chatType.userDto\n): Promise<number> {\n  let status = -1;\n  const resource = doOrUndo ? \"follow\" : \"unfollow\";\n\n  await fetch(`${process.env.REACT_APP_API_URL}/user/` + resource + `/${userUid}`, {\n    credentials: \"include\",\n    method: \"POST\",\n  })\n    .then((response) => {\n      status = response.status;\n      switch (response.status) {\n        case 201: {\n          if (doOrUndo) {\n            const tempFollowing: chatType.userDto = {};\n            tempFollowing[userUid] = {\n              ...userList[userUid],\n            };\n            setFollowingList({ ...followingList, ...tempFollowing });\n          } else {\n            const tempFollowing = { ...followingList };\n            delete tempFollowing[userUid];\n            setFollowingList({ ...tempFollowing });\n          }\n          break;\n        }\n        default: {\n          throw new Error(`${response.status}`);\n        }\n      }\n    })\n    .catch((error) => {\n      AdminLogPrinter(adminConsole, `\\nDoFollow catch_error: ${error} `);\n    });\n\n  return status;\n}\n\nexport async function GetMyInfo(\n  adminConsole: boolean,\n  setUserInfo: setUserInfo\n): Promise<number> {\n  let status = -1;\n\n  await fetch(`${process.env.REACT_APP_API_URL}/user/me`, {\n    credentials: \"include\",\n    method: \"GET\",\n  })\n    .then((response) => {\n      switch (response.status) {\n        case 200: {\n          status = 200;\n          return response.json();\n        }\n        default: {\n          throw new Error(`${response.status}`);\n        }\n      }\n    })\n    .then((response) => {\n      AdminLogPrinter(adminConsole, `\\nGetMyInfo: ${JSON.stringify(response)}`);\n      response.nickname = response.nickname.split(\"#\", 2)[0];\n      setUserInfo({ ...response });\n    })\n    .catch((error) => {\n      status = error.message;\n      AdminLogPrinter(adminConsole, `\\nGetMyInfo catch_error: ${error} `);\n    });\n\n  return status;\n}\n\nexport async function GetOtherProfile(\n  adminConsole: boolean,\n  setUserInfo: setUserInfo,\n  uid: number): Promise<number> {\n  let status = -1;\n\n  await fetch(`${process.env.REACT_APP_API_URL}/user/profile/` + `${uid}`, {\n    credentials: \"include\",\n    method: \"GET\",\n  })\n    .then((response) => {\n      switch (response.status) {\n        case 200: {\n          status = 200;\n          return response.json();\n        }\n        default: {\n          throw new Error(`${response.status}`);\n        }\n      }\n    })\n    .then((response) => {\n      AdminLogPrinter(adminConsole, `\\nGetOtherProfile: ${JSON.stringify(response)}`);\n      response.nickname = response.nickname.split(\"#\", 2)[0];\n      setUserInfo({ ...response });\n    })\n    .catch((error) => {\n      status = error.message;\n      AdminLogPrinter(adminConsole, `\\nGetOtherProfile catch_error: ${error} `);\n    });\n\n  return status;\n}\n\nexport async function RefreshToken(\n  adminConsole: boolean,\n  callback = (): any => { }): Promise<number> {\n  let status = -1;\n\n  AdminLogPrinter(adminConsole, `in try refresh Token`);\n  await fetch(`${process.env.REACT_APP_API_URL}/login/oauth/refresh`, {\n    credentials: \"include\",\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + localStorage.getItem(\"refreshToken\"),\n    },\n  })\n    .then((response) => {\n      status = response.status;\n      switch (response.status) {\n        case 201: {\n          callback();\n          break;\n        }\n        default: {\n          throw new Error(`${response.status}`);\n        }\n      }\n    })\n    .catch((error) => {\n      AdminLogPrinter(adminConsole, `\\nRefreshToken catch_error: ${error} `);\n    });\n\n  return status;\n}\n\nexport function LogOut(\n  adminConsole: boolean,\n  setRefreshToken: React.Dispatch<React.SetStateAction<boolean>>,\n  navigate: NavigateFunction,\n  to: string\n) {\n  AdminLogPrinter(adminConsole, \"logout\");\n  socket.socket.emit(\"chat-logout\");\n  socket.socket.disconnect();\n  localStorage.clear();\n  setRefreshToken(false);\n  navigate(to);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}