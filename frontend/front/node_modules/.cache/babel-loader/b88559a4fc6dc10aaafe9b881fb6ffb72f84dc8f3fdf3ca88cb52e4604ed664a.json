{"ast":null,"code":"var _jsxFileName = \"/data/front/src/pages/LoginPage.tsx\",\n  _s = $RefreshSig$();\nimport jwt_decode from \"jwt-decode\";\nimport { useAtom } from \"jotai\";\nimport { useEffect } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport BackGround from \"../components/BackGround\";\nimport SignInModal from \"../components/LoginPage/SignIn\";\nimport TFAModal from \"../components/LoginPage/TwoFactorAuth\";\nimport { refreshTokenAtom } from \"../components/atom/LoginAtom\";\nimport { cookieAtom } from \"../components/atom/LoginAtom\";\nimport { TFAEnabledAtom } from \"../components/atom/LoginAtom\";\nimport { useNavigate } from \"react-router-dom\";\nimport { hasLoginAtom } from \"../components/atom/ChatAtom\";\nimport InitialSettingModal from \"../components/LoginPage/InitialSetting\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  /* localstorage에 없는데 cookie에 있으면 로그인이 된거다 */\n  /* localstorage에 있으면 로그인 된거다 */\n  const [refreshToken, setRefreshToken] = useAtom(refreshTokenAtom);\n  const [cookie, setCookie] = useAtom(cookieAtom);\n  const [TFAEnabled, setTFAEnabled] = useAtom(TFAEnabledAtom);\n  const [hasLogin, setHasLogin] = useAtom(hasLoginAtom);\n  const cookieIMade = \"refreshToken\";\n  const [cookies, setCookies, removeCookie] = useCookies([cookieIMade]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    /* 로그인 경험이 있는지 확인 */\n    const storedRefreshToken = localStorage.getItem(\"refreshToken\");\n    if (storedRefreshToken !== null) {\n      setRefreshToken(true);\n    }\n    /* 쿠키가 있음 -> localstorage에 저장해야함 */\n    if (cookies[cookieIMade] !== undefined) {\n      setCookie(true);\n      localStorage.setItem(\"refreshToken\", cookies[cookieIMade]);\n      removeCookie(cookieIMade);\n      setCookie(false);\n    }\n  }, [setRefreshToken, setCookie]); // data change\n\n  useEffect(() => {\n    /* 2FA가 켜져있는지 확인 */\n    const value = localStorage.getItem(\"refreshToken\");\n    if (value) {\n      const decoded = jwt_decode(JSON.stringify(value));\n      if (decoded.twoFactorEnabled) {\n        setTFAEnabled(true);\n      } else {\n        if (hasLogin === false) {\n          setHasLogin(true);\n          navigate(\"/chat\");\n        } else {\n          console.log(\"already login -- ??\");\n          navigate(\"/chat\");\n        }\n      }\n    }\n  }, [setTFAEnabled]);\n  return /*#__PURE__*/_jsxDEV(BackGround, {\n    children: [!refreshToken && /*#__PURE__*/_jsxDEV(SignInModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }, this), refreshToken && !cookie && TFAEnabled && /*#__PURE__*/_jsxDEV(TFAModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 49\n    }, this), refreshToken ? /*#__PURE__*/_jsxDEV(InitialSettingModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 23\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"pAcZigG70xJv+XUzeR9JJLGva1s=\", false, function () {\n  return [useAtom, useAtom, useAtom, useAtom, useCookies, useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["jwt_decode","useAtom","useEffect","useCookies","BackGround","SignInModal","TFAModal","refreshTokenAtom","cookieAtom","TFAEnabledAtom","useNavigate","hasLoginAtom","InitialSettingModal","jsxDEV","_jsxDEV","LoginPage","_s","refreshToken","setRefreshToken","cookie","setCookie","TFAEnabled","setTFAEnabled","hasLogin","setHasLogin","cookieIMade","cookies","setCookies","removeCookie","navigate","storedRefreshToken","localStorage","getItem","undefined","setItem","value","decoded","JSON","stringify","twoFactorEnabled","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/data/front/src/pages/LoginPage.tsx"],"sourcesContent":["import jwt_decode from \"jwt-decode\";\nimport { Link } from \"react-router-dom\";\n\nimport { useAtom } from \"jotai\";\nimport { useEffect } from \"react\";\nimport { useCookies } from \"react-cookie\";\n\nimport BackGround from \"../components/BackGround\";\nimport SignInModal from \"../components/LoginPage/SignIn\";\nimport TFAModal from \"../components/LoginPage/TwoFactorAuth\";\n\nimport { refreshTokenAtom } from \"../components/atom/LoginAtom\";\nimport { cookieAtom } from \"../components/atom/LoginAtom\";\nimport { TFAEnabledAtom } from \"../components/atom/LoginAtom\";\nimport ChatPage from \"./ChatPage\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport * as socket from \"../socket/chat.socket\";\nimport { hasLoginAtom } from \"../components/atom/ChatAtom\";\nimport InitialSettingModal from \"../components/LoginPage/InitialSetting\";\n\nexport default function LoginPage() {\n  /* localstorage에 없는데 cookie에 있으면 로그인이 된거다 */\n  /* localstorage에 있으면 로그인 된거다 */\n  const [refreshToken, setRefreshToken] = useAtom(refreshTokenAtom);\n  const [cookie, setCookie] = useAtom(cookieAtom);\n  const [TFAEnabled, setTFAEnabled] = useAtom(TFAEnabledAtom);\n  const [hasLogin, setHasLogin] = useAtom(hasLoginAtom);\n\n  const cookieIMade = \"refreshToken\";\n  const [cookies, setCookies, removeCookie] = useCookies([cookieIMade]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    /* 로그인 경험이 있는지 확인 */\n    const storedRefreshToken = localStorage.getItem(\"refreshToken\");\n    if (storedRefreshToken !== null) {\n      setRefreshToken(true);\n    }\n    /* 쿠키가 있음 -> localstorage에 저장해야함 */\n    if (cookies[cookieIMade] !== undefined) {\n      setCookie(true);\n      localStorage.setItem(\"refreshToken\", cookies[cookieIMade]);\n      removeCookie(cookieIMade);\n      setCookie(false);\n    }\n  }, [setRefreshToken, setCookie]); // data change\n\n  useEffect(() => {\n    /* 2FA가 켜져있는지 확인 */\n    const value = localStorage.getItem(\"refreshToken\");\n    if (value) {\n      const decoded: any = jwt_decode(JSON.stringify(value));\n      if (decoded.twoFactorEnabled) {\n        setTFAEnabled(true);\n      } else {\n        if (hasLogin === false) {\n          setHasLogin(true);\n          navigate(\"/chat\");\n        } else {\n          console.log(\"already login -- ??\");\n          navigate(\"/chat\");\n        }\n      }\n    }\n  }, [setTFAEnabled]);\n  return (\n    <BackGround>\n      {/* refresh Token이 있으면 SigninModal이 꺼짐 */}\n      {/* refresh Token이 없으면 SigninModal이 켜짐 */}\n      {!refreshToken && <SignInModal />}\n      {/* refresh Token이 있고 cookie가 없으면 TFAModal실행 */}\n      {refreshToken && !cookie && TFAEnabled && <TFAModal />}\n      {refreshToken ? <InitialSettingModal /> : null}\n    </BackGround>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}