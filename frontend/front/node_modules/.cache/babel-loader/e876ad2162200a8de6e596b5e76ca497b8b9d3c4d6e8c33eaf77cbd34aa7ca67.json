{"ast":null,"code":"import { io } from \"socket.io-client\";\nimport { AdminLogPrinter } from \"../event/event.util\";\nconst URL = process.env.REACT_APP_API_URL;\nconst NameSpace = \"/sock\";\nexport const socket = io(`${URL}${NameSpace}`, {\n  auth: cb => {\n    cb({\n      token: localStorage.getItem(\"refreshToken\")\n    });\n  },\n  autoConnect: false,\n  transports: [\"websocket\"]\n  // reconnectionDelay: 1000, // defaults to 1000\n  // reconnectionDelayMax: 10000, // defaults to 5000\n  // withCredentials: true,\n  // path: \"/socket.io\",\n});\n\nexport function emitRoomCreate(adminConsole, roomName) {\n  let roomCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let roomPass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n  const roomType = roomCheck ? \"private\" : roomPass ? \"protected\" : \"open\";\n  socket.emit(\"room-create\", {\n    roomName,\n    roomType,\n    roomPass\n  }, _ref => {\n    let {\n      status,\n      payload\n    } = _ref;\n    switch (status) {\n      case \"ok\":\n        {\n          AdminLogPrinter(adminConsole, \"room-create success\");\n          break;\n        }\n      case \"ko\":\n        {\n          AdminLogPrinter(adminConsole, \"room-create fail\");\n          alert(`${roomName} room-create fail ${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function emitRoomEdit(adminConsole, roomId) {\n  let roomName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let roomCheck = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let roomPass = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n  let roomCurrentType = arguments.length > 5 ? arguments[5] : undefined;\n  if (roomCurrentType === \"dm\") {\n    alert(`dm room can't be edited`);\n    return;\n  }\n  const roomType = roomCheck ? \"private\" : roomCurrentType === \"protected\" ? \"protected\" : roomPass !== \"\" ? \"protected\" : \"open\";\n  socket.emit(\"room-edit\", {\n    roomId,\n    roomName,\n    roomType,\n    roomPass\n  }, _ref2 => {\n    let {\n      status,\n      payload\n    } = _ref2;\n    switch (status) {\n      case \"ok\":\n        {\n          AdminLogPrinter(adminConsole, \"room-edit success\");\n          break;\n        }\n      case \"ko\":\n        {\n          AdminLogPrinter(adminConsole, \"room-edit fail\");\n          alert(`${roomName} room-edit fail ${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function emitRoomJoin(_ref3, roomId, roomPass) {\n  let {\n    adminConsole,\n    roomList,\n    setRoomList,\n    focusRoom,\n    setFocusRoom\n  } = _ref3;\n  socket.emit(\"room-join\", {\n    roomId,\n    roomPass\n  }, _ref4 => {\n    let {\n      status,\n      payload\n    } = _ref4;\n    switch (status) {\n      case \"ok\":\n        {\n          AdminLogPrinter(adminConsole, `${roomList[roomId].roomName} room-join success`);\n          break;\n        }\n      case \"ko\":\n        {\n          alert(`room-join fail: \\n\\n${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function emitRoomInvite(adminConsole, roomId, targetName) {\n  socket.emit(\"room-invite\", {\n    roomId,\n    targetName\n  }, _ref5 => {\n    let {\n      status,\n      payload\n    } = _ref5;\n    if (status === \"ok\") {\n      AdminLogPrinter(adminConsole, `callback: room-invite success`);\n    } else {\n      alert(`room-invite fail: ${payload}`);\n    }\n  });\n}\nexport function emitRoomLeave(_ref6, roomId) {\n  let {\n    adminConsole,\n    roomList,\n    setRoomList,\n    focusRoom,\n    setFocusRoom\n  } = _ref6;\n  let ban = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  socket.emit(\"room-leave\", {\n    roomId\n  }, _ref7 => {\n    let {\n      status\n    } = _ref7;\n    if (status === \"leave\") {\n      AdminLogPrinter(adminConsole, `callback: room leaved: ${roomList[roomId].roomName}`);\n      if (roomList[roomId].roomType === \"private\") {\n        const newRoomList = {\n          ...roomList\n        };\n        delete newRoomList[roomId];\n        setRoomList({\n          ...newRoomList\n        });\n      } else {\n        const newRoomList = {};\n        newRoomList[roomId] = {\n          roomName: roomList[roomId].roomName,\n          roomType: roomList[roomId].roomType,\n          isJoined: false\n        };\n        setRoomList({\n          ...roomList,\n          ...newRoomList\n        });\n      }\n      if (focusRoom === roomId) {\n        setFocusRoom(-1);\n      }\n    } else if (status === \"delete\") {\n      AdminLogPrinter(adminConsole, `callback: room delete: ${roomList[roomId].roomName}`);\n    } else {\n      AdminLogPrinter(adminConsole, \"callback: room leave failed\");\n    }\n  });\n}\nexport function emitRoomInAction(_ref8, roomId, action, targetId) {\n  let {\n    adminConsole,\n    roomList,\n    setRoomList\n  } = _ref8;\n  socket.emit(\"room-in-action\", {\n    roomId,\n    action,\n    targetId\n  }, _ref9 => {\n    let {\n      status,\n      payload\n    } = _ref9;\n    switch (status) {\n      case \"ok\":\n        {\n          AdminLogPrinter(adminConsole, `room - inaction in ${roomId} to ${targetId} with ${action} OK`);\n          break;\n        }\n      case \"ko\":\n        {\n          AdminLogPrinter(adminConsole, `room - inaction in ${roomId} to ${targetId} with ${action} failed: ${payload} `);\n          alert(`Room in Action [${action}] is faild: ${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function emitMessage(_ref10, roomId, message) {\n  var _roomList$roomId, _roomList$roomId$deta;\n  let {\n    adminConsole,\n    roomList\n  } = _ref10;\n  if (((_roomList$roomId = roomList[roomId]) === null || _roomList$roomId === void 0 ? void 0 : (_roomList$roomId$deta = _roomList$roomId.detail) === null || _roomList$roomId$deta === void 0 ? void 0 : _roomList$roomId$deta.myRoomStatus) === \"mute\") {\n    alert(\"You are muted for 10 sec in this room\");\n    return;\n  }\n  socket.emit(\"message\", {\n    roomId,\n    message\n  }, _ref11 => {\n    let {\n      status,\n      payload\n    } = _ref11;\n    switch (status) {\n      case \"ok\":\n        {\n          AdminLogPrinter(adminConsole, `message to ${roomList[roomId].roomName} is sended: ${message} `);\n          break;\n        }\n      case \"ko\":\n        {\n          AdminLogPrinter(adminConsole, `message to ${roomId} is failed: \\n\\n${payload} `);\n          alert(`message failed: ${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function setNewDetailToNewRoom(_ref12, status, power) {\n  var _roomList$roomId$deta2, _roomList$roomId$deta3, _roomList$roomId$deta4;\n  let {\n    roomList,\n    setRoomList,\n    roomId,\n    newUserList\n  } = _ref12;\n  const newRoomList = {};\n  newRoomList[roomId] = {\n    roomName: roomList[roomId].roomName,\n    roomType: roomList[roomId].roomType,\n    isJoined: roomList[roomId].isJoined,\n    detail: {\n      userList: {\n        ...newUserList\n      },\n      messageList: ((_roomList$roomId$deta2 = roomList[roomId].detail) === null || _roomList$roomId$deta2 === void 0 ? void 0 : _roomList$roomId$deta2.messageList) || [],\n      myRoomStatus: status || ((_roomList$roomId$deta3 = roomList[roomId].detail) === null || _roomList$roomId$deta3 === void 0 ? void 0 : _roomList$roomId$deta3.myRoomStatus) || \"normal\",\n      myRoomPower: power || ((_roomList$roomId$deta4 = roomList[roomId].detail) === null || _roomList$roomId$deta4 === void 0 ? void 0 : _roomList$roomId$deta4.myRoomPower) || \"member\"\n    }\n  };\n  setRoomList({\n    ...roomList,\n    ...newRoomList\n  });\n}\nexport function emitBlockUser(_ref13, targetId, doOrUndo) {\n  let {\n    adminConsole,\n    blockList,\n    setBlockList\n  } = _ref13;\n  if (doOrUndo) {\n    AdminLogPrinter(adminConsole, `block user: ${targetId}`);\n  } else {\n    AdminLogPrinter(adminConsole, `unblock user: ${targetId}`);\n  }\n  socket.emit(\"user-block\", {\n    targetId,\n    doOrUndo\n  }, _ref14 => {\n    let {\n      status,\n      payload\n    } = _ref14;\n    switch (status) {\n      case \"on\":\n        {\n          const newBlockUser = {};\n          newBlockUser[targetId] = {\n            blocked: true\n          };\n          setBlockList({\n            ...blockList,\n            ...newBlockUser\n          });\n          break;\n        }\n      case \"off\":\n        {\n          const newBlockList = {\n            ...blockList\n          };\n          delete newBlockList[targetId];\n          setBlockList({\n            ...newBlockList\n          });\n          break;\n        }\n      case \"ko\":\n        {\n          AdminLogPrinter(adminConsole, `user - block failed: ${payload} `);\n          alert(`block failed: ${payload}`);\n          break;\n        }\n    }\n  });\n}\nexport function emitDmRoomCreate(adminConsole, targetId) {\n  socket.emit(\"dm-room-create\", {\n    targetId\n  }, _ref15 => {\n    let {\n      status\n    } = _ref15;\n    if (status === \"ok\") {\n      AdminLogPrinter(adminConsole, `dm room create to ${targetId} is sended`);\n    } else {\n      AdminLogPrinter(adminConsole, `dm room create to ${targetId} is failed`);\n    }\n  });\n}\nexport function emitDM(adminConsole, targetId, message) {\n  socket.emit(\"message-dm\", {\n    targetId,\n    message\n  }, _ref16 => {\n    let {\n      status\n    } = _ref16;\n    if (status === \"ok\") {\n      AdminLogPrinter(adminConsole, `dm to ${targetId} is sended: ${message}`);\n    } else {\n      AdminLogPrinter(adminConsole, `dm to ${targetId} is failed: ${message}`);\n    }\n  });\n}","map":{"version":3,"names":["io","AdminLogPrinter","URL","process","env","REACT_APP_API_URL","NameSpace","socket","auth","cb","token","localStorage","getItem","autoConnect","transports","emitRoomCreate","adminConsole","roomName","roomCheck","arguments","length","undefined","roomPass","roomType","emit","_ref","status","payload","alert","emitRoomEdit","roomId","roomCurrentType","_ref2","emitRoomJoin","_ref3","roomList","setRoomList","focusRoom","setFocusRoom","_ref4","emitRoomInvite","targetName","_ref5","emitRoomLeave","_ref6","ban","_ref7","newRoomList","isJoined","emitRoomInAction","_ref8","action","targetId","_ref9","emitMessage","_ref10","message","_roomList$roomId","_roomList$roomId$deta","detail","myRoomStatus","_ref11","setNewDetailToNewRoom","_ref12","power","_roomList$roomId$deta2","_roomList$roomId$deta3","_roomList$roomId$deta4","newUserList","userList","messageList","myRoomPower","emitBlockUser","_ref13","doOrUndo","blockList","setBlockList","_ref14","newBlockUser","blocked","newBlockList","emitDmRoomCreate","_ref15","emitDM","_ref16"],"sources":["/data/front/src/socket/chat.socket.ts"],"sourcesContent":["import { io } from \"socket.io-client\";\nimport { useAtom } from \"jotai\";\nimport * as chatAtom from \"../components/atom/ChatAtom\";\nimport * as userAtom from \"../components/atom/UserAtom\";\nimport type * as chatType from \"./chat.dto\";\n\nimport { AdminLogPrinter } from \"../event/event.util\";\n\nconst URL = process.env.REACT_APP_API_URL;\nconst NameSpace = \"/sock\";\n\nexport const socket = io(`${URL}${NameSpace}`, {\n  auth: (cb) => {\n    cb({ token: localStorage.getItem(\"refreshToken\") });\n  },\n  autoConnect: false,\n  transports: [\"websocket\"],\n  // reconnectionDelay: 1000, // defaults to 1000\n  // reconnectionDelayMax: 10000, // defaults to 5000\n  // withCredentials: true,\n  // path: \"/socket.io\",\n});\n\nexport function emitRoomCreate(\n  adminConsole: boolean,\n  roomName: string,\n  roomCheck: boolean = false,\n  roomPass: string = \"\"\n) {\n  const roomType = roomCheck ? \"private\" : roomPass ? \"protected\" : \"open\";\n  socket.emit(\n    \"room-create\",\n    {\n      roomName,\n      roomType,\n      roomPass,\n    },\n    ({ status, payload }: { status: \"ok\" | \"ko\"; payload?: string }) => {\n      switch (status) {\n        case \"ok\": {\n          AdminLogPrinter(adminConsole, \"room-create success\");\n          break;\n        }\n        case \"ko\": {\n          AdminLogPrinter(adminConsole, \"room-create fail\");\n          alert(`${roomName} room-create fail ${payload}`);\n          break;\n        }\n      }\n    }\n  );\n}\n\nexport function emitRoomEdit(\n  adminConsole: boolean,\n  roomId: number,\n  roomName: string = \"\",\n  roomCheck: boolean = false,\n  roomPass: string = \"\",\n  roomCurrentType: \"open\" | \"private\" | \"protected\" | \"dm\"\n) {\n  if (roomCurrentType === \"dm\") {\n    alert(`dm room can't be edited`);\n    return;\n  }\n  const roomType = roomCheck\n    ? \"private\"\n    : roomCurrentType === \"protected\"\n    ? \"protected\"\n    : roomPass !== \"\"\n    ? \"protected\"\n    : \"open\";\n  socket.emit(\n    \"room-edit\",\n    {\n      roomId,\n      roomName,\n      roomType,\n      roomPass,\n    },\n    ({ status, payload }: { status: \"ok\" | \"ko\"; payload?: string }) => {\n      switch (status) {\n        case \"ok\": {\n          AdminLogPrinter(adminConsole, \"room-edit success\");\n          break;\n        }\n        case \"ko\": {\n          AdminLogPrinter(adminConsole, \"room-edit fail\");\n          alert(`${roomName} room-edit fail ${payload}`);\n          break;\n        }\n      }\n    }\n  );\n}\n\nexport function emitRoomJoin(\n  {\n    adminConsole,\n    roomList,\n    setRoomList,\n    focusRoom,\n    setFocusRoom,\n  }: {\n    adminConsole: boolean;\n    roomList: chatType.roomListDto;\n    setRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>;\n    focusRoom: number;\n    setFocusRoom: React.Dispatch<React.SetStateAction<number>>;\n  },\n  roomId: number,\n  roomPass?: string\n) {\n  socket.emit(\n    \"room-join\",\n    {\n      roomId,\n      roomPass,\n    },\n    ({ status, payload }: { status: \"ok\" | \"ko\"; payload?: string }) => {\n      switch (status) {\n        case \"ok\": {\n          AdminLogPrinter(adminConsole, `${roomList[roomId].roomName} room-join success`);\n          break;\n        }\n        case \"ko\": {\n          alert(`room-join fail: \\n\\n${payload}`);\n          break;\n        }\n      }\n    }\n  );\n}\n\nexport function emitRoomInvite(adminConsole: boolean, roomId: number, targetName: string) {\n  socket.emit(\n    \"room-invite\",\n    { roomId, targetName },\n    ({ status, payload }: { status: \"ok\" | \"ko\"; payload?: string }) => {\n      if (status === \"ok\") {\n        AdminLogPrinter(adminConsole, `callback: room-invite success`);\n      } else {\n        alert(`room-invite fail: ${payload}`);\n      }\n    }\n  );\n}\n\nexport function emitRoomLeave(\n  {\n    adminConsole,\n    roomList,\n    setRoomList,\n    focusRoom,\n    setFocusRoom,\n  }: {\n    adminConsole: boolean;\n    roomList: chatType.roomListDto;\n    setRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>;\n    focusRoom: number;\n    setFocusRoom: React.Dispatch<React.SetStateAction<number>>;\n  },\n  roomId: number,\n  ban: boolean = false\n) {\n  socket.emit(\n    \"room-leave\",\n    {\n      roomId,\n    },\n    ({ status }: { status: \"leave\" | \"delete\" }) => {\n      if (status === \"leave\") {\n        AdminLogPrinter(adminConsole, `callback: room leaved: ${roomList[roomId].roomName}`);\n        if (roomList[roomId].roomType === \"private\") {\n          const newRoomList: chatType.roomListDto = { ...roomList };\n          delete newRoomList[roomId];\n          setRoomList({ ...newRoomList });\n        } else {\n          const newRoomList: chatType.roomListDto = {};\n          newRoomList[roomId] = {\n            roomName: roomList[roomId].roomName,\n            roomType: roomList[roomId].roomType,\n            isJoined: false,\n          };\n          setRoomList({ ...roomList, ...newRoomList });\n        }\n        if (focusRoom === roomId) {\n          setFocusRoom(-1);\n        }\n      } else if (status === \"delete\") {\n        AdminLogPrinter(adminConsole, `callback: room delete: ${roomList[roomId].roomName}`);\n      } else {\n        AdminLogPrinter(adminConsole, \"callback: room leave failed\");\n      }\n    }\n  );\n}\n\nexport function emitRoomInAction(\n  {\n    adminConsole,\n    roomList,\n    setRoomList,\n  }: {\n    adminConsole: boolean;\n    roomList: chatType.roomListDto;\n    setRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>;\n  },\n  roomId: number,\n  action: \"ban\" | \"kick\" | \"mute\" | \"admin\",\n  targetId: number\n) {\n  socket.emit(\n    \"room-in-action\",\n    {\n      roomId,\n      action,\n      targetId,\n    },\n    ({ status, payload }: { status: \"ok\" | \"ko\"; payload?: string }) => {\n      switch (status) {\n        case \"ok\": {\n          AdminLogPrinter(\n            adminConsole,\n            `room - inaction in ${roomId} to ${targetId} with ${action} OK`\n          );\n          break;\n        }\n        case \"ko\": {\n          AdminLogPrinter(\n            adminConsole,\n            `room - inaction in ${roomId} to ${targetId} with ${action} failed: ${payload} `\n          );\n          alert(`Room in Action [${action}] is faild: ${payload}`);\n          break;\n        }\n      }\n    }\n  );\n}\n\nexport function emitMessage(\n  { adminConsole, roomList }: { adminConsole: boolean; roomList: chatType.roomListDto },\n  roomId: number,\n  message: string\n) {\n  if (roomList[roomId]?.detail?.myRoomStatus === \"mute\") {\n    alert(\"You are muted for 10 sec in this room\");\n    return;\n  }\n  socket.emit(\n    \"message\",\n    {\n      roomId,\n      message,\n    },\n    ({ status, payload }: { status: \"ok\" | \"ko\"; payload?: \"string\" }) => {\n      switch (status) {\n        case \"ok\": {\n          AdminLogPrinter(\n            adminConsole,\n            `message to ${roomList[roomId].roomName} is sended: ${message} `\n          );\n          break;\n        }\n        case \"ko\": {\n          AdminLogPrinter(adminConsole, `message to ${roomId} is failed: \\n\\n${payload} `);\n          alert(`message failed: ${payload}`);\n          break;\n        }\n      }\n    }\n  );\n}\n\nexport function setNewDetailToNewRoom(\n  {\n    roomList,\n    setRoomList,\n    roomId,\n    newUserList,\n  }: {\n    roomList: chatType.roomListDto;\n    setRoomList: React.Dispatch<React.SetStateAction<chatType.roomListDto>>;\n    roomId: number;\n    newUserList: chatType.userInRoomListDto;\n  },\n  status?: chatType.userRoomStatus,\n  power?: chatType.userRoomPower\n) {\n  const newRoomList: chatType.roomListDto = {};\n  newRoomList[roomId] = {\n    roomName: roomList[roomId].roomName,\n    roomType: roomList[roomId].roomType,\n    isJoined: roomList[roomId].isJoined,\n    detail: {\n      userList: { ...newUserList },\n      messageList: roomList[roomId].detail?.messageList || [],\n      myRoomStatus: status || roomList[roomId].detail?.myRoomStatus! || \"normal\",\n      myRoomPower: power || roomList[roomId].detail?.myRoomPower! || \"member\",\n    },\n  };\n  setRoomList({ ...roomList, ...newRoomList });\n}\n\nexport function emitBlockUser(\n  {\n    adminConsole,\n    blockList,\n    setBlockList,\n  }: {\n    adminConsole: boolean;\n    blockList: chatType.userSimpleDto;\n    setBlockList: React.Dispatch<React.SetStateAction<chatType.userSimpleDto>>;\n  },\n  targetId: number,\n  doOrUndo: boolean\n) {\n  if (doOrUndo) {\n    AdminLogPrinter(adminConsole, `block user: ${targetId}`);\n  } else {\n    AdminLogPrinter(adminConsole, `unblock user: ${targetId}`);\n  }\n  socket.emit(\n    \"user-block\",\n    {\n      targetId,\n      doOrUndo,\n    },\n    ({ status, payload }: { status: \"on\" | \"off\" | \"ko\"; payload?: string }) => {\n      switch (status) {\n        case \"on\": {\n          const newBlockUser: chatType.userSimpleDto = {};\n          newBlockUser[targetId] = {\n            blocked: true,\n          };\n          setBlockList({ ...blockList, ...newBlockUser });\n          break;\n        }\n        case \"off\": {\n          const newBlockList: chatType.userSimpleDto = { ...blockList };\n          delete newBlockList[targetId];\n          setBlockList({ ...newBlockList });\n          break;\n        }\n        case \"ko\": {\n          AdminLogPrinter(adminConsole, `user - block failed: ${payload} `);\n          alert(`block failed: ${payload}`);\n          break;\n        }\n      }\n    }\n  );\n}\n\nexport function emitDmRoomCreate(adminConsole: boolean, targetId: number) {\n  socket.emit(\n    \"dm-room-create\",\n    {\n      targetId,\n    },\n    ({ status }: { status: \"ok\" | \"ko\" }) => {\n      if (status === \"ok\") {\n        AdminLogPrinter(adminConsole, `dm room create to ${targetId} is sended`);\n      } else {\n        AdminLogPrinter(adminConsole, `dm room create to ${targetId} is failed`);\n      }\n    }\n  );\n}\n\nexport function emitDM(adminConsole: boolean, targetId: number, message: string) {\n  socket.emit(\n    \"message-dm\",\n    {\n      targetId,\n      message,\n    },\n    ({ status }: { status: \"ok\" | \"ko\" }) => {\n      if (status === \"ok\") {\n        AdminLogPrinter(adminConsole, `dm to ${targetId} is sended: ${message}`);\n      } else {\n        AdminLogPrinter(adminConsole, `dm to ${targetId} is failed: ${message}`);\n      }\n    }\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}