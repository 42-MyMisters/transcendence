{"ast":null,"code":"var _jsxFileName = \"/data/front/src/pages/LoginPage.tsx\",\n  _s = $RefreshSig$();\nimport jwt_decode from \"jwt-decode\";\nimport { useAtom } from \"jotai\";\nimport { useEffect } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport BackGround from \"../components/BackGround\";\nimport SignInModal from \"../components/LoginPage/SignIn\";\nimport TFAModal from \"../components/LoginPage/TwoFactorAuth\";\nimport { isFirstLoginAtom, refreshTokenAtom } from \"../components/atom/LoginAtom\";\nimport { cookieAtom } from \"../components/atom/LoginAtom\";\nimport { TFAEnabledAtom } from \"../components/atom/LoginAtom\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as chatAtom from \"../components/atom/ChatAtom\";\nimport { hasLoginAtom } from \"../components/atom/ChatAtom\";\nimport InitialSettingModal from \"../components/LoginPage/InitialSetting\";\nimport { AdminLogPrinter } from \"../event/event.util\";\nimport { UserAtom } from \"../components/atom/UserAtom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  /* localstorage에 없는데 cookie에 있으면 로그인이 된거다 */\n  /* localstorage에 있으면 로그인 된거다 */\n  const [refreshToken, setRefreshToken] = useAtom(refreshTokenAtom);\n  const [cookie, setCookie] = useAtom(cookieAtom);\n  const [TFAEnabled, setTFAEnabled] = useAtom(TFAEnabledAtom);\n  const [hasLogin, setHasLogin] = useAtom(hasLoginAtom);\n  const [isFirstLogin, setIsFirstLogin] = useAtom(isFirstLoginAtom);\n  const [userInfo, setUserInfo] = useAtom(UserAtom);\n  const [adminConsole] = useAtom(chatAtom.adminConsoleAtom);\n  const refreshTokenKey = \"refreshToken\";\n  const [cookies, setCookies, removeCookie] = useCookies([refreshTokenKey]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (cookies[refreshTokenKey] !== undefined) {\n      setCookie(true);\n      localStorage.setItem(\"refreshToken\", cookies[refreshTokenKey]);\n      removeCookie(refreshTokenKey);\n      setCookie(false);\n    }\n    const storedRefreshToken = localStorage.getItem(\"refreshToken\");\n    if (storedRefreshToken !== null) {\n      setRefreshToken(true);\n      const decoded = jwt_decode(JSON.stringify(storedRefreshToken));\n      if (decoded.twoFactorEnabled) {\n        setTFAEnabled(true);\n      } else {\n        fetch(`${process.env.REACT_APP_API_URL}/user/me`, {\n          credentials: \"include\",\n          method: \"GET\"\n        }).then(response => {\n          switch (response.status) {\n            case 200:\n              {\n                return response.json();\n              }\n            default:\n              {\n                throw new Error(`${response.status}`);\n              }\n          }\n        }).then(response => {\n          setUserInfo(response);\n          if (response.nickname.includes(\"#\")) {\n            setIsFirstLogin(true);\n          } else {\n            setIsFirstLogin(false);\n            if (hasLogin === false) {\n              setHasLogin(true);\n              navigate(\"/chat\");\n            } else {\n              AdminLogPrinter(adminConsole, \"already login -- ??\");\n              navigate(\"/chat\");\n            }\n          }\n        });\n      }\n    } else {\n      setRefreshToken(false);\n    }\n  }, [setRefreshToken, setCookie]); // data change\n\n  return /*#__PURE__*/_jsxDEV(BackGround, {\n    children: [!refreshToken && /*#__PURE__*/_jsxDEV(SignInModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }, this), refreshToken && !cookie && TFAEnabled && /*#__PURE__*/_jsxDEV(TFAModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 49\n    }, this), refreshToken && isFirstLogin ? /*#__PURE__*/_jsxDEV(InitialSettingModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 39\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"OuuBfvoBGSad2NRjflPv5ZNeq3s=\", false, function () {\n  return [useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useCookies, useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["jwt_decode","useAtom","useEffect","useCookies","BackGround","SignInModal","TFAModal","isFirstLoginAtom","refreshTokenAtom","cookieAtom","TFAEnabledAtom","useNavigate","chatAtom","hasLoginAtom","InitialSettingModal","AdminLogPrinter","UserAtom","jsxDEV","_jsxDEV","LoginPage","_s","refreshToken","setRefreshToken","cookie","setCookie","TFAEnabled","setTFAEnabled","hasLogin","setHasLogin","isFirstLogin","setIsFirstLogin","userInfo","setUserInfo","adminConsole","adminConsoleAtom","refreshTokenKey","cookies","setCookies","removeCookie","navigate","undefined","localStorage","setItem","storedRefreshToken","getItem","decoded","JSON","stringify","twoFactorEnabled","fetch","process","env","REACT_APP_API_URL","credentials","method","then","response","status","json","Error","nickname","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/data/front/src/pages/LoginPage.tsx"],"sourcesContent":["import jwt_decode from \"jwt-decode\";\nimport { Link } from \"react-router-dom\";\n\nimport { useAtom } from \"jotai\";\nimport { useEffect } from \"react\";\nimport { useCookies } from \"react-cookie\";\n\nimport BackGround from \"../components/BackGround\";\nimport SignInModal from \"../components/LoginPage/SignIn\";\nimport TFAModal from \"../components/LoginPage/TwoFactorAuth\";\n\nimport { isFirstLoginAtom, refreshTokenAtom } from \"../components/atom/LoginAtom\";\nimport { cookieAtom } from \"../components/atom/LoginAtom\";\nimport { TFAEnabledAtom } from \"../components/atom/LoginAtom\";\nimport ChatPage from \"./ChatPage\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport * as socket from \"../socket/chat.socket\";\nimport * as chatAtom from \"../components/atom/ChatAtom\";\nimport { hasLoginAtom } from \"../components/atom/ChatAtom\";\nimport InitialSettingModal from \"../components/LoginPage/InitialSetting\";\n\nimport { AdminLogPrinter } from \"../event/event.util\";\nimport { UserAtom } from \"../components/atom/UserAtom\";\n\nexport default function LoginPage() {\n  /* localstorage에 없는데 cookie에 있으면 로그인이 된거다 */\n  /* localstorage에 있으면 로그인 된거다 */\n  const [refreshToken, setRefreshToken] = useAtom(refreshTokenAtom);\n  const [cookie, setCookie] = useAtom(cookieAtom);\n  const [TFAEnabled, setTFAEnabled] = useAtom(TFAEnabledAtom);\n  const [hasLogin, setHasLogin] = useAtom(hasLoginAtom);\n  const [isFirstLogin, setIsFirstLogin] = useAtom(isFirstLoginAtom);\n  const [userInfo, setUserInfo] = useAtom(UserAtom);\n\n  const [adminConsole] = useAtom(chatAtom.adminConsoleAtom);\n\n  const refreshTokenKey = \"refreshToken\";\n  const [cookies, setCookies, removeCookie] = useCookies([refreshTokenKey]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (cookies[refreshTokenKey] !== undefined) {\n      setCookie(true);\n      localStorage.setItem(\"refreshToken\", cookies[refreshTokenKey]);\n      removeCookie(refreshTokenKey);\n      setCookie(false);\n    }\n\n    const storedRefreshToken = localStorage.getItem(\"refreshToken\");\n    if (storedRefreshToken !== null) {\n      setRefreshToken(true);\n\n      const decoded: any = jwt_decode(JSON.stringify(storedRefreshToken));\n      if (decoded.twoFactorEnabled) {\n        setTFAEnabled(true);\n      } else {\n        fetch(`${process.env.REACT_APP_API_URL}/user/me`, {\n          credentials: \"include\",\n          method: \"GET\",\n        })\n          .then((response) => {\n            switch (response.status) {\n              case 200: {\n                return response.json();\n              }\n              default: {\n                throw new Error(`${response.status}`);\n              }\n            }\n          })\n          .then((response) => {\n            setUserInfo(response);\n            if (response.nickname.includes(\"#\")) {\n              setIsFirstLogin(true);\n            } else {\n              setIsFirstLogin(false);\n\n              if (hasLogin === false) {\n                setHasLogin(true);\n                navigate(\"/chat\");\n              } else {\n                AdminLogPrinter(adminConsole, \"already login -- ??\");\n                navigate(\"/chat\");\n              }\n            }\n          });\n      }\n    } else {\n      setRefreshToken(false);\n    }\n  }, [setRefreshToken, setCookie]); // data change\n\n  return (\n    <BackGround>\n      {/* refresh Token이 있으면 SigninModal이 꺼짐 */}\n      {/* refresh Token이 없으면 SigninModal이 켜짐 */}\n      {!refreshToken && <SignInModal />}\n      {/* refresh Token이 있고 cookie가 없으면 TFAModal실행 */}\n      {refreshToken && !cookie && TFAEnabled && <TFAModal />}\n      {refreshToken && isFirstLogin ? <InitialSettingModal /> : null}\n    </BackGround>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}