{"ast":null,"code":"// External libraries are lazy-loaded only if these file types exist.\nconst util = require(\"util\");\nvar Yaml = null,\n  VisionmediaYaml = null,\n  Coffee = null,\n  Iced = null,\n  CSON = null,\n  PPARSER = null,\n  JSON5 = null,\n  TOML = null,\n  HJSON = null,\n  XML = null;\n\n// Define soft dependencies so transpilers don't include everything\nvar COFFEE_2_DEP = 'coffeescript',\n  COFFEE_DEP = 'coffee-script',\n  ICED_DEP = 'iced-coffee-script',\n  JS_YAML_DEP = 'js-yaml',\n  YAML_DEP = 'yaml',\n  JSON5_DEP = 'json5',\n  HJSON_DEP = 'hjson',\n  TOML_DEP = 'toml',\n  CSON_DEP = 'cson',\n  PPARSER_DEP = 'properties',\n  XML_DEP = 'x2js',\n  TS_DEP = 'ts-node';\nvar Parser = module.exports;\nParser.parse = function (filename, content) {\n  var parserName = filename.substr(filename.lastIndexOf('.') + 1); // file extension\n  if (typeof definitions[parserName] === 'function') {\n    return definitions[parserName](filename, content);\n  }\n  // TODO: decide what to do in case of a missing parser\n};\n\nParser.xmlParser = function (filename, content) {\n  if (!XML) {\n    XML = require(XML_DEP);\n  }\n  var x2js = new XML();\n  var configObject = x2js.xml2js(content);\n  var rootKeys = Object.keys(configObject);\n  if (rootKeys.length === 1) {\n    return configObject[rootKeys[0]];\n  }\n  return configObject;\n};\nParser.jsParser = function (filename, content) {\n  var configObject = require(filename);\n  if (configObject.__esModule && util.isObject(configObject.default)) {\n    return configObject.default;\n  }\n  return configObject;\n};\nParser.tsParser = function (filename, content) {\n  if (!require.extensions['.ts']) {\n    require(TS_DEP).register({\n      lazy: true,\n      transpileOnly: true,\n      compilerOptions: {\n        allowJs: true\n      }\n    });\n  }\n\n  // Imports config if it is exported via module.exports = ...\n  // See https://github.com/node-config/node-config/issues/524\n  var configObject = require(filename);\n\n  // Because of ES6 modules usage, `default` is treated as named export (like any other)\n  // Therefore config is a value of `default` key.\n  if (configObject.default) {\n    return configObject.default;\n  }\n  return configObject;\n};\nParser.coffeeParser = function (filename, content) {\n  // .coffee files can be loaded with either coffee-script or iced-coffee-script.\n  // Prefer iced-coffee-script, if it exists.\n  // Lazy load the appropriate extension\n  if (!Coffee) {\n    Coffee = {};\n\n    // The following enables iced-coffee-script on .coffee files, if iced-coffee-script is available.\n    // This is commented as per a decision on a pull request.\n    //try {\n    //  Coffee = require('iced-coffee-script');\n    //}\n    //catch (e) {\n    //  Coffee = require('coffee-script');\n    //}\n    try {\n      // Try to load coffeescript\n      Coffee = require(COFFEE_2_DEP);\n    } catch (e) {\n      // If it doesn't exist, try to load it using the deprecated module name\n      Coffee = require(COFFEE_DEP);\n    }\n    // coffee-script >= 1.7.0 requires explicit registration for require() to work\n    if (Coffee.register) {\n      Coffee.register();\n    }\n  }\n  // Use the built-in parser for .coffee files with coffee-script\n  return require(filename);\n};\nParser.icedParser = function (filename, content) {\n  Iced = require(ICED_DEP);\n\n  // coffee-script >= 1.7.0 requires explicit registration for require() to work\n  if (Iced.register) {\n    Iced.register();\n  }\n};\nParser.yamlParser = function (filename, content) {\n  if (!Yaml && !VisionmediaYaml) {\n    // Lazy loading\n    try {\n      // Try to load the better js-yaml module\n      Yaml = require(JS_YAML_DEP);\n    } catch (e) {\n      try {\n        // If it doesn't exist, load the fallback visionmedia yaml module.\n        VisionmediaYaml = require(YAML_DEP);\n      } catch (e) {}\n    }\n  }\n  if (Yaml) {\n    return Yaml.load(content);\n  } else if (VisionmediaYaml) {\n    // The yaml library doesn't like strings that have newlines but don't\n    // end in a newline: https://github.com/visionmedia/js-yaml/issues/issue/13\n    content += '\\n';\n    if (typeof VisionmediaYaml.eval === 'function') {\n      return VisionmediaYaml.eval(Parser.stripYamlComments(content));\n    }\n    return VisionmediaYaml.parse(Parser.stripYamlComments(content));\n  } else {\n    console.error('No YAML parser loaded.  Suggest adding js-yaml dependency to your package.json file.');\n  }\n};\nParser.jsonParser = function (filename, content) {\n  try {\n    return JSON.parse(content);\n  } catch (e) {\n    // All JS Style comments will begin with /, so all JSON parse errors that\n    // encountered a syntax error will complain about this character.\n    if (e.name !== 'SyntaxError' || e.message.indexOf('Unexpected token /') !== 0) {\n      throw e;\n    }\n    if (!JSON5) {\n      JSON5 = require(JSON5_DEP);\n    }\n    return JSON5.parse(content);\n  }\n};\nParser.json5Parser = function (filename, content) {\n  if (!JSON5) {\n    JSON5 = require(JSON5_DEP);\n  }\n  return JSON5.parse(content);\n};\nParser.hjsonParser = function (filename, content) {\n  if (!HJSON) {\n    HJSON = require(HJSON_DEP);\n  }\n  return HJSON.parse(content);\n};\nParser.tomlParser = function (filename, content) {\n  if (!TOML) {\n    TOML = require(TOML_DEP);\n  }\n  return TOML.parse(content);\n};\nParser.csonParser = function (filename, content) {\n  if (!CSON) {\n    CSON = require(CSON_DEP);\n  }\n  // Allow comments in CSON files\n  if (typeof CSON.parseSync === 'function') {\n    return CSON.parseSync(Parser.stripComments(content));\n  }\n  return CSON.parse(Parser.stripComments(content));\n};\nParser.propertiesParser = function (filename, content) {\n  if (!PPARSER) {\n    PPARSER = require(PPARSER_DEP);\n  }\n  return PPARSER.parse(content, {\n    namespaces: true,\n    variables: true,\n    sections: true\n  });\n};\n\n/**\n * Strip all Javascript type comments from the string.\n *\n * The string is usually a file loaded from the O/S, containing\n * newlines and javascript type comments.\n *\n * Thanks to James Padolsey, and all who contributed to this implementation.\n * http://james.padolsey.com/javascript/javascript-comment-removal-revisted/\n *\n * @protected\n * @method stripComments\n * @param fileStr {string} The string to strip comments from\n * @param stringRegex {RegExp} Optional regular expression to match strings that\n *   make up the config file\n * @return {string} The string with comments stripped.\n */\nParser.stripComments = function (fileStr, stringRegex) {\n  stringRegex = stringRegex || /(['\"])(\\\\\\1|.)+?\\1/g;\n  var uid = '_' + +new Date(),\n    primitives = [],\n    primIndex = 0;\n  return fileStr\n\n  /* Remove strings */.replace(stringRegex, function (match) {\n    primitives[primIndex] = match;\n    return uid + '' + primIndex++;\n  })\n\n  /* Remove Regexes */.replace(/([^\\/])(\\/(?!\\*|\\/)(\\\\\\/|.)+?\\/[gim]{0,3})/g, function (match, $1, $2) {\n    primitives[primIndex] = $2;\n    return $1 + (uid + '') + primIndex++;\n  })\n\n  /*\n  - Remove single-line comments that contain would-be multi-line delimiters\n      E.g. // Comment /* <--\n  - Remove multi-line comments that contain would be single-line delimiters\n      E.g. /* // <--\n  */.replace(/\\/\\/.*?\\/?\\*.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]*?\\/\\/[\\s\\S]*?\\*\\//g, '')\n\n  /*\n  Remove single and multi-line comments,\n  no consideration of inner-contents\n  */.replace(/\\/\\/.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]+?\\*\\//g, '')\n\n  /*\n  Remove multi-line comments that have a replaced ending (string/regex)\n  Greedy, so no inner strings/regexes will stop it.\n  */.replace(RegExp('\\\\/\\\\*[\\\\s\\\\S]+' + uid + '\\\\d+', 'g'), '')\n\n  /* Bring back strings & regexes */.replace(RegExp(uid + '(\\\\d+)', 'g'), function (match, n) {\n    return primitives[n];\n  });\n};\n\n/**\n * Strip YAML comments from the string\n *\n * The 2.0 yaml parser doesn't allow comment-only or blank lines.  Strip them.\n *\n * @protected\n * @method stripYamlComments\n * @param fileStr {string} The string to strip comments from\n * @return {string} The string with comments stripped.\n */\nParser.stripYamlComments = function (fileStr) {\n  // First replace removes comment-only lines\n  // Second replace removes blank lines\n  return fileStr.replace(/^\\s*#.*/mg, '').replace(/^\\s*[\\n|\\r]+/mg, '');\n};\n\n/**\n * Parses the environment variable to the boolean equivalent.\n * Defaults to false\n *\n * @param {String} content - Environment variable value\n * @return {boolean} - Boolean value fo the passed variable value\n */\nParser.booleanParser = function (filename, content) {\n  return content === 'true';\n};\n\n/**\n * Parses the environment variable to the number equivalent.\n * Defaults to undefined\n *\n * @param {String} content - Environment variable value\n * @return {Number} - Number value fo the passed variable value\n */\nParser.numberParser = function (filename, content) {\n  const numberValue = Number(content);\n  return Number.isNaN(numberValue) ? undefined : numberValue;\n};\nvar order = ['js', 'cjs', 'ts', 'json', 'json5', 'hjson', 'toml', 'coffee', 'iced', 'yaml', 'yml', 'cson', 'properties', 'xml', 'boolean', 'number'];\nvar definitions = {\n  cjs: Parser.jsParser,\n  coffee: Parser.coffeeParser,\n  cson: Parser.csonParser,\n  hjson: Parser.hjsonParser,\n  iced: Parser.icedParser,\n  js: Parser.jsParser,\n  json: Parser.jsonParser,\n  json5: Parser.json5Parser,\n  properties: Parser.propertiesParser,\n  toml: Parser.tomlParser,\n  ts: Parser.tsParser,\n  xml: Parser.xmlParser,\n  yaml: Parser.yamlParser,\n  yml: Parser.yamlParser,\n  boolean: Parser.booleanParser,\n  number: Parser.numberParser\n};\nParser.getParser = function (name) {\n  return definitions[name];\n};\nParser.setParser = function (name, parser) {\n  definitions[name] = parser;\n  if (order.indexOf(name) === -1) {\n    order.push(name);\n  }\n};\nParser.getFilesOrder = function (name) {\n  if (name) {\n    return order.indexOf(name);\n  }\n  return order;\n};\nParser.setFilesOrder = function (name, newIndex) {\n  if (Array.isArray(name)) {\n    return order = name;\n  }\n  if (typeof newIndex === 'number') {\n    var index = order.indexOf(name);\n    order.splice(newIndex, 0, name);\n    if (index > -1) {\n      order.splice(index >= newIndex ? index + 1 : index, 1);\n    }\n  }\n  return order;\n};","map":{"version":3,"names":["util","require","Yaml","VisionmediaYaml","Coffee","Iced","CSON","PPARSER","JSON5","TOML","HJSON","XML","COFFEE_2_DEP","COFFEE_DEP","ICED_DEP","JS_YAML_DEP","YAML_DEP","JSON5_DEP","HJSON_DEP","TOML_DEP","CSON_DEP","PPARSER_DEP","XML_DEP","TS_DEP","Parser","module","exports","parse","filename","content","parserName","substr","lastIndexOf","definitions","xmlParser","x2js","configObject","xml2js","rootKeys","Object","keys","length","jsParser","__esModule","isObject","default","tsParser","extensions","register","lazy","transpileOnly","compilerOptions","allowJs","coffeeParser","e","icedParser","yamlParser","load","eval","stripYamlComments","console","error","jsonParser","JSON","name","message","indexOf","json5Parser","hjsonParser","tomlParser","csonParser","parseSync","stripComments","propertiesParser","namespaces","variables","sections","fileStr","stringRegex","uid","Date","primitives","primIndex","replace","match","$1","$2","RegExp","n","booleanParser","numberParser","numberValue","Number","isNaN","undefined","order","cjs","coffee","cson","hjson","iced","js","json","json5","properties","toml","ts","xml","yaml","yml","boolean","number","getParser","setParser","parser","push","getFilesOrder","setFilesOrder","newIndex","Array","isArray","index","splice"],"sources":["/data/front/node_modules/config/parser.js"],"sourcesContent":["// External libraries are lazy-loaded only if these file types exist.\nconst util = require(\"util\");\nvar Yaml = null,\n    VisionmediaYaml = null,\n    Coffee = null,\n    Iced = null,\n    CSON = null,\n    PPARSER = null,\n    JSON5 = null,\n    TOML = null,\n    HJSON = null,\n    XML = null;\n\n// Define soft dependencies so transpilers don't include everything\nvar COFFEE_2_DEP = 'coffeescript',\n    COFFEE_DEP = 'coffee-script',\n    ICED_DEP = 'iced-coffee-script',\n    JS_YAML_DEP = 'js-yaml',\n    YAML_DEP = 'yaml',\n    JSON5_DEP = 'json5',\n    HJSON_DEP = 'hjson',\n    TOML_DEP = 'toml',\n    CSON_DEP = 'cson',\n    PPARSER_DEP = 'properties',\n    XML_DEP = 'x2js',\n    TS_DEP = 'ts-node';\n\nvar Parser = module.exports;\n\nParser.parse = function(filename, content) {\n  var parserName = filename.substr(filename.lastIndexOf('.') +1);  // file extension\n  if (typeof definitions[parserName] === 'function') {\n    return definitions[parserName](filename, content);\n  }\n  // TODO: decide what to do in case of a missing parser\n};\n\nParser.xmlParser = function(filename, content) {\n  if (!XML) {\n    XML = require(XML_DEP);\n  }\n  var x2js = new XML();\n  var configObject = x2js.xml2js(content);\n  var rootKeys = Object.keys(configObject);\n  if(rootKeys.length === 1) {\n    return configObject[rootKeys[0]];\n  }\n  return configObject;\n};\n\nParser.jsParser = function(filename, content) {\n  var configObject = require(filename);\n\n  if (configObject.__esModule && util.isObject(configObject.default)) {\n    return configObject.default\n  }\n  return configObject;\n};\n\nParser.tsParser = function(filename, content) {\n  if (!require.extensions['.ts']) {\n    require(TS_DEP).register({\n      lazy: true,\n      transpileOnly: true,\n      compilerOptions: {\n        allowJs: true,\n      }\n    });\n  }\n\n  // Imports config if it is exported via module.exports = ...\n  // See https://github.com/node-config/node-config/issues/524\n  var configObject = require(filename);\n\n  // Because of ES6 modules usage, `default` is treated as named export (like any other)\n  // Therefore config is a value of `default` key.\n  if (configObject.default) {\n    return configObject.default\n  }\n  return configObject;\n};\n\nParser.coffeeParser = function(filename, content) {\n  // .coffee files can be loaded with either coffee-script or iced-coffee-script.\n  // Prefer iced-coffee-script, if it exists.\n  // Lazy load the appropriate extension\n  if (!Coffee) {\n    Coffee = {};\n\n    // The following enables iced-coffee-script on .coffee files, if iced-coffee-script is available.\n    // This is commented as per a decision on a pull request.\n    //try {\n    //  Coffee = require('iced-coffee-script');\n    //}\n    //catch (e) {\n    //  Coffee = require('coffee-script');\n    //}\n    try {\n      // Try to load coffeescript\n      Coffee = require(COFFEE_2_DEP);\n    }\n    catch (e) {\n      // If it doesn't exist, try to load it using the deprecated module name\n      Coffee = require(COFFEE_DEP);\n    }\n    // coffee-script >= 1.7.0 requires explicit registration for require() to work\n    if (Coffee.register) {\n      Coffee.register();\n    }\n  }\n  // Use the built-in parser for .coffee files with coffee-script\n  return require(filename);\n};\n\nParser.icedParser = function(filename, content) {\n  Iced = require(ICED_DEP);\n\n  // coffee-script >= 1.7.0 requires explicit registration for require() to work\n  if (Iced.register) {\n    Iced.register();\n  }\n};\n\nParser.yamlParser = function(filename, content) {\n  if (!Yaml && !VisionmediaYaml) {\n    // Lazy loading\n    try {\n      // Try to load the better js-yaml module\n      Yaml = require(JS_YAML_DEP);\n    }\n    catch (e) {\n      try {\n        // If it doesn't exist, load the fallback visionmedia yaml module.\n        VisionmediaYaml = require(YAML_DEP);\n      }\n      catch (e) { }\n    }\n  }\n  if (Yaml) {\n    return Yaml.load(content);\n  }\n  else if (VisionmediaYaml) {\n    // The yaml library doesn't like strings that have newlines but don't\n    // end in a newline: https://github.com/visionmedia/js-yaml/issues/issue/13\n    content += '\\n';\n    if (typeof VisionmediaYaml.eval === 'function') {\n      return VisionmediaYaml.eval(Parser.stripYamlComments(content));\n    }\n    return VisionmediaYaml.parse(Parser.stripYamlComments(content));\n  }\n  else {\n    console.error('No YAML parser loaded.  Suggest adding js-yaml dependency to your package.json file.')\n  }\n};\n\nParser.jsonParser = function(filename, content) {\n  try {\n    return JSON.parse(content);\n  }\n  catch (e) {\n    // All JS Style comments will begin with /, so all JSON parse errors that\n    // encountered a syntax error will complain about this character.\n    if (e.name !== 'SyntaxError' || e.message.indexOf('Unexpected token /') !== 0) {\n      throw e;\n    }\n    if (!JSON5) {\n      JSON5 = require(JSON5_DEP);\n    }\n    return JSON5.parse(content);\n  }\n};\n\nParser.json5Parser = function(filename, content) {\n  if (!JSON5) {\n    JSON5 = require(JSON5_DEP);\n  }\n  return JSON5.parse(content);\n};\n\nParser.hjsonParser = function(filename, content) {\n  if (!HJSON) {\n    HJSON = require(HJSON_DEP);\n  }\n  return HJSON.parse(content);\n};\n\nParser.tomlParser = function(filename, content) {\n  if(!TOML) {\n    TOML = require(TOML_DEP);\n  }\n  return TOML.parse(content);\n};\n\nParser.csonParser = function(filename, content) {\n  if (!CSON) {\n    CSON = require(CSON_DEP);\n  }\n  // Allow comments in CSON files\n  if (typeof CSON.parseSync === 'function') {\n    return CSON.parseSync(Parser.stripComments(content));\n  }\n  return CSON.parse(Parser.stripComments(content));\n};\n\nParser.propertiesParser = function(filename, content) {\n  if (!PPARSER) {\n    PPARSER = require(PPARSER_DEP);\n  }\n  return PPARSER.parse(content, { namespaces: true, variables: true, sections: true });\n};\n\n/**\n * Strip all Javascript type comments from the string.\n *\n * The string is usually a file loaded from the O/S, containing\n * newlines and javascript type comments.\n *\n * Thanks to James Padolsey, and all who contributed to this implementation.\n * http://james.padolsey.com/javascript/javascript-comment-removal-revisted/\n *\n * @protected\n * @method stripComments\n * @param fileStr {string} The string to strip comments from\n * @param stringRegex {RegExp} Optional regular expression to match strings that\n *   make up the config file\n * @return {string} The string with comments stripped.\n */\nParser.stripComments = function(fileStr, stringRegex) {\n  stringRegex = stringRegex || /(['\"])(\\\\\\1|.)+?\\1/g;\n\n  var uid = '_' + +new Date(),\n    primitives = [],\n    primIndex = 0;\n\n  return (\n    fileStr\n\n    /* Remove strings */\n      .replace(stringRegex, function(match){\n        primitives[primIndex] = match;\n        return (uid + '') + primIndex++;\n      })\n\n      /* Remove Regexes */\n      .replace(/([^\\/])(\\/(?!\\*|\\/)(\\\\\\/|.)+?\\/[gim]{0,3})/g, function(match, $1, $2){\n        primitives[primIndex] = $2;\n        return $1 + (uid + '') + primIndex++;\n      })\n\n      /*\n      - Remove single-line comments that contain would-be multi-line delimiters\n          E.g. // Comment /* <--\n      - Remove multi-line comments that contain would be single-line delimiters\n          E.g. /* // <--\n     */\n      .replace(/\\/\\/.*?\\/?\\*.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]*?\\/\\/[\\s\\S]*?\\*\\//g, '')\n\n      /*\n      Remove single and multi-line comments,\n      no consideration of inner-contents\n     */\n      .replace(/\\/\\/.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]+?\\*\\//g, '')\n\n      /*\n      Remove multi-line comments that have a replaced ending (string/regex)\n      Greedy, so no inner strings/regexes will stop it.\n     */\n      .replace(RegExp('\\\\/\\\\*[\\\\s\\\\S]+' + uid + '\\\\d+', 'g'), '')\n\n      /* Bring back strings & regexes */\n      .replace(RegExp(uid + '(\\\\d+)', 'g'), function(match, n){\n        return primitives[n];\n      })\n  );\n\n};\n\n/**\n * Strip YAML comments from the string\n *\n * The 2.0 yaml parser doesn't allow comment-only or blank lines.  Strip them.\n *\n * @protected\n * @method stripYamlComments\n * @param fileStr {string} The string to strip comments from\n * @return {string} The string with comments stripped.\n */\nParser.stripYamlComments = function(fileStr) {\n  // First replace removes comment-only lines\n  // Second replace removes blank lines\n  return fileStr.replace(/^\\s*#.*/mg,'').replace(/^\\s*[\\n|\\r]+/mg,'');\n};\n\n/**\n * Parses the environment variable to the boolean equivalent.\n * Defaults to false\n *\n * @param {String} content - Environment variable value\n * @return {boolean} - Boolean value fo the passed variable value\n */\nParser.booleanParser = function(filename, content) {\n  return content === 'true';\n};\n\n/**\n * Parses the environment variable to the number equivalent.\n * Defaults to undefined\n *\n * @param {String} content - Environment variable value\n * @return {Number} - Number value fo the passed variable value\n */\nParser.numberParser = function(filename, content) {\n  const numberValue = Number(content);\n  return Number.isNaN(numberValue) ? undefined : numberValue;\n};\n\nvar order = ['js', 'cjs', 'ts', 'json', 'json5', 'hjson', 'toml', 'coffee', 'iced', 'yaml', 'yml', 'cson', 'properties', 'xml',\n  'boolean', 'number'];\nvar definitions = {\n  cjs: Parser.jsParser,\n  coffee: Parser.coffeeParser,\n  cson: Parser.csonParser,\n  hjson: Parser.hjsonParser,\n  iced: Parser.icedParser,\n  js: Parser.jsParser,\n  json: Parser.jsonParser,\n  json5: Parser.json5Parser,\n  properties: Parser.propertiesParser,\n  toml: Parser.tomlParser,\n  ts: Parser.tsParser,\n  xml: Parser.xmlParser,\n  yaml: Parser.yamlParser,\n  yml: Parser.yamlParser,\n  boolean: Parser.booleanParser,\n  number: Parser.numberParser\n};\n\nParser.getParser = function(name) {\n  return definitions[name];\n};\n\nParser.setParser = function(name, parser) {\n  definitions[name] = parser;\n  if (order.indexOf(name) === -1) {\n    order.push(name);\n  }\n};\n\nParser.getFilesOrder = function(name) {\n  if (name) {\n    return order.indexOf(name);\n  }\n  return order;\n};\n\nParser.setFilesOrder = function(name, newIndex) {\n  if (Array.isArray(name)) {\n    return order = name;\n  }\n  if (typeof newIndex === 'number') {\n    var index = order.indexOf(name);\n    order.splice(newIndex, 0, name);\n    if (index > -1) {\n      order.splice(index >= newIndex ? index +1 : index, 1);\n    }\n  }\n  return order;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}