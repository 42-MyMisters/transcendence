{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useAtom, useAtomValue, useSetAtom } from \"jotai\";\nimport { gameInviteModalAtom, inviteModalAtom, passwordInputModalAtom, userInfoModalAtom } from \"../components/atom/ModalAtom\";\nimport { gameinviteFromAtom, isGameQuitAtom, isGameStartedAtom, isLoadingAtom } from \"../components/atom/GameAtom\";\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as chatAtom from \"../components/atom/ChatAtom\";\nimport { refreshTokenAtom } from \"../components/atom/LoginAtom\";\nimport { TFAAtom, UserAtom } from \"../components/atom/UserAtom\";\nimport { GetMyInfo, LogOut, RefreshToken } from \"../event/api.request\";\nimport { AdminLogPrinter, PressKey } from \"../event/event.util\";\nimport * as socket from \"../socket/chat.socket\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatWrapper(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const setUserInfoModal = useSetAtom(userInfoModalAtom);\n  const setInviteModal = useSetAtom(inviteModalAtom);\n  const [userInfo, setUserInfo] = useAtom(UserAtom);\n  const [isFirstLogin, setIsFirstLogin] = useAtom(chatAtom.isFirstLoginAtom);\n  const setHasLogin = useSetAtom(chatAtom.hasLoginAtom);\n  const [roomList, setRoomList] = useAtom(chatAtom.roomListAtom);\n  const [userList, setUserList] = useAtom(chatAtom.userListAtom);\n  const [dmHistoryList, setDmHistoryList] = useAtom(chatAtom.dmHistoryListAtom);\n  const [followingList, setFollowingList] = useAtom(chatAtom.followingListAtom);\n  const [blockList, setBlockList] = useAtom(chatAtom.blockListAtom);\n  const [focusRoom, setFocusRoom] = useAtom(chatAtom.focusRoomAtom);\n  const setSocketState = useSetAtom(chatAtom.socketStateAtom);\n  const setRefreshToken = useSetAtom(refreshTokenAtom);\n  const setGameInviteModal = useSetAtom(gameInviteModalAtom);\n  const [adminConsole, setAdminConsole] = useAtom(chatAtom.adminConsoleAtom);\n  const [passwordModal, setPasswordModal] = useAtom(passwordInputModalAtom);\n  const clickRoom = useAtomValue(chatAtom.clickRoomAtom);\n  const setTfa = useSetAtom(TFAAtom);\n  const isLoading = useAtomValue(isLoadingAtom);\n  const isGameStart = useAtomValue(isGameStartedAtom);\n  const isGameQuit = useAtomValue(isGameQuitAtom);\n  const setGameInviteFrom = useSetAtom(gameinviteFromAtom);\n  const setLeaderBoard = useSetAtom(chatAtom.leaderBoardAtom);\n  const navigate = useNavigate();\n  PressKey([\"F4\"], () => {\n    setAdminConsole(prev => !prev);\n  });\n  const logOutHandler = () => {\n    LogOut(adminConsole, setRefreshToken, navigate, \"/\");\n    setHasLogin(false);\n    setIsFirstLogin(true);\n  };\n  const quitRoomRelativeModal = () => {\n    setUserInfoModal(false);\n    setInviteModal(false);\n  };\n  async function getMyinfoHandler() {\n    const getMeResponse = await GetMyInfo(adminConsole, setUserInfo, setTfa, true);\n    if (getMeResponse === 401) {\n      const refreshResponse = await RefreshToken(adminConsole);\n      if (refreshResponse !== 201) {\n        logOutHandler();\n      } else {\n        const getMeResponse = await GetMyInfo(adminConsole, setUserInfo, setTfa, true);\n        if (getMeResponse === 401) {\n          logOutHandler();\n        } else {\n          socket.socket.connect();\n          setIsFirstLogin(false);\n        }\n      }\n    } else {\n      socket.socket.connect();\n      setIsFirstLogin(false);\n    }\n  }\n  useEffect(() => {\n    socket.socket.onAny(function (eventName) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      AdminLogPrinter(adminConsole, \"incoming \", eventName, args);\n    });\n    // catch all outgoing events\n    socket.socket.onAnyOutgoing(function (eventName) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      AdminLogPrinter(adminConsole, \"outgoing \", eventName, args);\n    });\n    socket.socket.on(\"connect\", () => {\n      if (socket.socket.connected) {\n        //This attribute describes whether the socket is currently connected to the server.\n        if (socket.socket.recovered) {\n          // any missed packets will be received\n        } else {\n          // new or unrecoverable session\n          AdminLogPrinter(adminConsole, \"socket connected : \" + socket.socket.id);\n        }\n      }\n      setSocketState(true);\n    });\n    //https://socket.io/docs/v4/client-socket-instance/#disconnect\n    socket.socket.on(\"disconnect\", reason => {\n      AdminLogPrinter(adminConsole, \"socket disconnected reason: \" + reason);\n      /**\n       *  BAD, will throw an error\n       *  socket.emit(\"disconnect\");\n      */\n      if (reason === \"io server disconnect\") {\n        // the disconnection was initiated by the server, you need to reconnect manually\n        AdminLogPrinter(adminConsole, 'socket disconnected by server');\n        socket.socket.removeAllListeners();\n      }\n      // else the socket will automatically try to reconnect\n      AdminLogPrinter(adminConsole, \"socket disconnected\");\n      setSocketState(false);\n    });\n    // the connection is denied by the server in a middleware function\n    socket.socket.on(\"connect_error\", err => {\n      if (err.message === \"unauthorized\") {\n        // handle each case\n      }\n      AdminLogPrinter(adminConsole, err.message); // prints the message associated with the error\n    });\n\n    socket.socket.on(\"multiple-login\", () => {\n      // \talert(`multiple login detected!`);\n      LogOut(adminConsole, setRefreshToken, navigate, \"/\", 'refresh', \"multiple-login\");\n      setHasLogin(false);\n      setIsFirstLogin(true);\n    });\n    return () => {\n      socket.socket.off(\"connect\");\n      socket.socket.off(\"disconnect\");\n      socket.socket.off(\"connect_error\");\n      socket.socket.offAny();\n      socket.socket.offAnyOutgoing();\n      socket.socket.off(\"multiple-login\");\n    };\n  }, []);\n  useEffect(() => {\n    socket.socket.on(\"logout\", () => {\n      LogOut(adminConsole, setRefreshToken, navigate, \"/\");\n      setHasLogin(false);\n      setIsFirstLogin(true);\n    });\n    socket.socket.on(\"leaderboard-update\", leaderBoard => {\n      leaderBoard.map((key, value) => {\n        if (key.totalGameCount === 0) {\n          key.winRate = 0;\n        } else {\n          key.winRate = Number((key.winGameCount / key.totalGameCount * 100).toFixed(2));\n        }\n      });\n      setLeaderBoard(leaderBoard);\n    });\n    return () => {\n      socket.socket.off(\"logout\");\n      socket.socket.off(\"leaderboard-update\");\n    };\n  }, []);\n  useEffect(() => {\n    socket.socket.on(\"dm-list\", (resDmUserList, allDmList) => {\n      const tempDmRoomList = {};\n      setDmHistoryList({\n        ...resDmUserList\n      });\n      setUserList(prevUserList => ({\n        ...prevUserList,\n        ...resDmUserList\n      }));\n      Object.entries(resDmUserList).forEach(_ref2 => {\n        let [dmUser] = _ref2;\n        tempDmRoomList[Number(dmUser)] = {\n          roomName: 'DM',\n          roomType: 'dm',\n          isJoined: true,\n          detail: {\n            userList: {\n              [Number(dmUser)]: {\n                userRoomPower: 'member',\n                userRoomStatus: 'normal'\n              },\n              [userInfo.uid]: {\n                userRoomPower: 'member',\n                userRoomStatus: 'normal'\n              }\n            },\n            messageList: [],\n            myRoomStatus: 'normal',\n            myRoomPower: 'member'\n          }\n        };\n      });\n      Object.entries(allDmList).forEach(atom => {\n        if (Number(atom[1].senderId) === userInfo.uid) {\n          var _tempDmRoomList$Numbe, _atom$, _atom$2, _atom$3, _tempDmRoomList$Numbe2, _atom$4;\n          // from me\n          const tempMessageList = (_tempDmRoomList$Numbe = tempDmRoomList[Number((_atom$ = atom[1]) === null || _atom$ === void 0 ? void 0 : _atom$.receiverId)].detail) === null || _tempDmRoomList$Numbe === void 0 ? void 0 : _tempDmRoomList$Numbe.messageList;\n          tempMessageList === null || tempMessageList === void 0 ? void 0 : tempMessageList.unshift({\n            userId: userInfo.uid,\n            userName: userInfo.nickname,\n            message: (_atom$2 = atom[1]) === null || _atom$2 === void 0 ? void 0 : _atom$2.message,\n            isMe: true,\n            number: tempMessageList.length\n          });\n          tempDmRoomList[Number((_atom$3 = atom[1]) === null || _atom$3 === void 0 ? void 0 : _atom$3.receiverId)] = {\n            roomName: 'DM',\n            roomType: 'dm',\n            isJoined: true,\n            detail: {\n              userList: {\n                ...((_tempDmRoomList$Numbe2 = tempDmRoomList[Number((_atom$4 = atom[1]) === null || _atom$4 === void 0 ? void 0 : _atom$4.receiverId)].detail) === null || _tempDmRoomList$Numbe2 === void 0 ? void 0 : _tempDmRoomList$Numbe2.userList)\n              },\n              myRoomPower: 'member',\n              myRoomStatus: 'normal',\n              messageList: tempMessageList\n            }\n          };\n        } else {\n          var _tempDmRoomList$Numbe3, _tempDmRoomList$Numbe4, _atom$5, _atom$6, _resDmUserList$Number, _atom$7, _atom$8, _atom$9, _tempDmRoomList$Numbe5, _tempDmRoomList$Numbe6, _atom$10;\n          // to me\n          if (atom[1].blockFromReceiver) {\n            return;\n          }\n          const tempMessageList = (_tempDmRoomList$Numbe3 = tempDmRoomList[Number((_atom$5 = atom[1]) === null || _atom$5 === void 0 ? void 0 : _atom$5.senderId)]) === null || _tempDmRoomList$Numbe3 === void 0 ? void 0 : (_tempDmRoomList$Numbe4 = _tempDmRoomList$Numbe3.detail) === null || _tempDmRoomList$Numbe4 === void 0 ? void 0 : _tempDmRoomList$Numbe4.messageList;\n          tempMessageList === null || tempMessageList === void 0 ? void 0 : tempMessageList.unshift({\n            userId: Number((_atom$6 = atom[1]) === null || _atom$6 === void 0 ? void 0 : _atom$6.senderId),\n            userName: (_resDmUserList$Number = resDmUserList[Number((_atom$7 = atom[1]) === null || _atom$7 === void 0 ? void 0 : _atom$7.senderId)]) === null || _resDmUserList$Number === void 0 ? void 0 : _resDmUserList$Number.userDisplayName,\n            message: (_atom$8 = atom[1]) === null || _atom$8 === void 0 ? void 0 : _atom$8.message,\n            isMe: false,\n            number: tempMessageList.length\n          });\n          tempDmRoomList[Number((_atom$9 = atom[1]) === null || _atom$9 === void 0 ? void 0 : _atom$9.senderId)] = {\n            roomName: 'DM',\n            roomType: 'dm',\n            isJoined: true,\n            detail: {\n              userList: {\n                ...((_tempDmRoomList$Numbe5 = tempDmRoomList[Number((_atom$10 = atom[1]) === null || _atom$10 === void 0 ? void 0 : _atom$10.senderId)]) === null || _tempDmRoomList$Numbe5 === void 0 ? void 0 : (_tempDmRoomList$Numbe6 = _tempDmRoomList$Numbe5.detail) === null || _tempDmRoomList$Numbe6 === void 0 ? void 0 : _tempDmRoomList$Numbe6.userList)\n              },\n              myRoomPower: 'member',\n              myRoomStatus: 'normal',\n              messageList: tempMessageList\n            }\n          };\n        }\n      });\n      setRoomList(prevRoomList => ({\n        ...prevRoomList,\n        ...tempDmRoomList\n      }));\n    });\n    return () => {\n      socket.socket.off(\"dm-list\");\n    };\n  }, [userInfo, roomList, dmHistoryList, userList]);\n  useEffect(() => {\n    socket.socket.on(\"room-list\", resRoomList => {\n      setRoomList(prevRoomList => ({\n        ...prevRoomList,\n        ...resRoomList\n      }));\n    });\n    socket.socket.on(\"follow-list\", resFollowingList => {\n      setFollowingList({\n        ...resFollowingList\n      });\n      setUserList(prevUserList => ({\n        ...resFollowingList,\n        ...prevUserList\n      }));\n    });\n    socket.socket.on(\"block-list\", resBlockList => {\n      setBlockList({\n        ...resBlockList\n      });\n    });\n    socket.socket.on(\"user-list\", resUserList => {\n      setUserList(prevUserList => ({\n        ...prevUserList,\n        ...resUserList\n      }));\n    });\n    return () => {\n      socket.socket.off(\"room-list\");\n      socket.socket.off(\"follow-list\");\n      socket.socket.off(\"block-list\");\n      socket.socket.off(\"user-list\");\n    };\n  }, [userList, roomList, followingList, blockList]);\n  useEffect(() => {\n    socket.socket.on(\"room-list-update\", _ref3 => {\n      let {\n        action,\n        roomId,\n        roomName,\n        roomType\n      } = _ref3;\n      switch (action) {\n        case 'new':\n          {\n            const newRoomList = {};\n            newRoomList[roomId] = {\n              roomName,\n              roomType,\n              isJoined: false\n            };\n            AdminLogPrinter(adminConsole, `room-list-update new: ${JSON.stringify(newRoomList)}`);\n            AdminLogPrinter(adminConsole, `room-list-update origin: ${JSON.stringify(roomList)}`);\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n            break;\n          }\n        case 'delete':\n          {\n            const newRoomList = {\n              ...roomList\n            };\n            delete newRoomList[roomId];\n            setRoomList({\n              ...newRoomList\n            });\n            if (focusRoom === roomId) {\n              setFocusRoom(-1);\n            }\n            if (passwordModal && roomId === clickRoom) {\n              setPasswordModal(false);\n            }\n            break;\n          }\n        case 'edit':\n          {\n            var _roomList$roomId;\n            const newRoomList = {};\n            newRoomList[roomId] = {\n              roomName,\n              roomType,\n              isJoined: (_roomList$roomId = roomList[roomId]) === null || _roomList$roomId === void 0 ? void 0 : _roomList$roomId.isJoined,\n              detail: roomList[roomId].detail || {}\n            };\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n            if (passwordModal && roomId === clickRoom) {\n              setPasswordModal(false);\n            }\n            break;\n          }\n      }\n    });\n    return () => {\n      socket.socket.off(\"room-list-update\");\n    };\n  }, [roomList, focusRoom, passwordModal, clickRoom]);\n  useEffect(() => {\n    socket.socket.on(\"room-clear\", () => {\n      quitRoomRelativeModal();\n      setRoomList({});\n      setFocusRoom(-1);\n    });\n    socket.socket.on(\"user-clear\", () => {\n      setUserList({});\n    });\n    return () => {\n      socket.socket.off(\"room-clear\");\n      socket.socket.off(\"user-clear\");\n    };\n  }, [roomList, userList, setRoomList, setUserList]);\n  useEffect(() => {\n    socket.socket.on(\"room-join\", _ref4 => {\n      let {\n        roomId,\n        roomName,\n        roomType,\n        roomUserList = {},\n        myPower,\n        status,\n        method = ''\n      } = _ref4;\n      switch (status) {\n        case 'ok':\n          {\n            AdminLogPrinter(adminConsole, `join [${roomName}]room`);\n            const newRoomList = {};\n            newRoomList[roomId] = {\n              roomName,\n              roomType,\n              isJoined: true,\n              detail: {\n                userList: {\n                  ...roomUserList\n                },\n                messageList: [],\n                myRoomStatus: 'normal',\n                myRoomPower: myPower\n              }\n            };\n            AdminLogPrinter(adminConsole, `room - join new: ${JSON.stringify(newRoomList)}`);\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n            if (method !== 'invite') {\n              setFocusRoom(roomId);\n            }\n            if (roomType === 'dm') {\n              const newDmUser = {};\n              newDmUser[roomId] = {\n                userDisplayName: userList[roomId].userDisplayName,\n                userProfileUrl: userList[roomId].userProfileUrl,\n                userStatus: userList[roomId].userStatus,\n                dmStatus: method === 'invite' ? 'unread' : 'read'\n              };\n              setDmHistoryList(prevDmHistoryList => ({\n                ...prevDmHistoryList,\n                ...newDmUser\n              }));\n              setUserList(prevUserList => ({\n                ...prevUserList,\n                ...newDmUser\n              }));\n            }\n            break;\n          }\n        case 'ko':\n          {\n            if (roomList[roomId].isJoined === false) {\n              alert(`fail to join[${roomName}]room`);\n            }\n            break;\n          }\n      }\n    });\n    return () => {\n      socket.socket.off(\"room-join\");\n    };\n  }, [roomList, userList, dmHistoryList]);\n  useEffect(() => {\n    socket.socket.on(\"room-in-action\", _ref5 => {\n      var _roomList$roomId2;\n      let {\n        roomId,\n        action,\n        targetId\n      } = _ref5;\n      if (((_roomList$roomId2 = roomList[roomId]) === null || _roomList$roomId2 === void 0 ? void 0 : _roomList$roomId2.isJoined) !== true) {\n        return;\n      }\n      switch (action) {\n        case 'newMember':\n          {\n            if (targetId === userInfo.uid) {\n              return;\n            } else {\n              var _roomList$roomId$deta;\n              const newUser = {};\n              newUser[targetId] = {\n                userRoomStatus: 'normal',\n                userRoomPower: 'member'\n              };\n              const newUserList = {\n                ...((_roomList$roomId$deta = roomList[roomId].detail) === null || _roomList$roomId$deta === void 0 ? void 0 : _roomList$roomId$deta.userList),\n                ...newUser\n              };\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              });\n            }\n            break;\n          }\n        case 'ban':\n        case 'leave':\n        case 'kick':\n          {\n            if (targetId === userInfo.uid) {\n              if (roomList[roomId].roomType === 'private') {\n                const newRoomList = {\n                  ...roomList\n                };\n                delete newRoomList[roomId];\n                setRoomList({\n                  ...newRoomList\n                });\n              } else {\n                const newRoomList = {};\n                newRoomList[roomId] = {\n                  roomName: roomList[roomId].roomName,\n                  roomType: roomList[roomId].roomType,\n                  isJoined: false\n                };\n                setRoomList({\n                  ...roomList,\n                  ...newRoomList\n                });\n              }\n              if (focusRoom === roomId) {\n                setFocusRoom(-1);\n                quitRoomRelativeModal();\n              }\n            } else {\n              var _roomList$roomId$deta2;\n              const newUserList = (_roomList$roomId$deta2 = roomList[roomId].detail) === null || _roomList$roomId$deta2 === void 0 ? void 0 : _roomList$roomId$deta2.userList;\n              delete newUserList[targetId];\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              });\n            }\n            break;\n          }\n        case 'mute':\n        case 'normal':\n          {\n            if (targetId === userInfo.uid) {\n              var _roomList$roomId$deta3, _roomList$roomId$deta4;\n              if (action === 'mute' && ((_roomList$roomId$deta3 = roomList[roomId].detail) === null || _roomList$roomId$deta3 === void 0 ? void 0 : _roomList$roomId$deta3.myRoomStatus) === 'mute') {\n                return;\n              }\n              const newUserList = (_roomList$roomId$deta4 = roomList[roomId].detail) === null || _roomList$roomId$deta4 === void 0 ? void 0 : _roomList$roomId$deta4.userList;\n              newUserList[targetId] = {\n                ...newUserList[targetId],\n                userRoomStatus: action\n              };\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              }, action);\n            } else {\n              var _roomList$roomId$deta5;\n              const newUserList = (_roomList$roomId$deta5 = roomList[roomId].detail) === null || _roomList$roomId$deta5 === void 0 ? void 0 : _roomList$roomId$deta5.userList;\n              newUserList[targetId] = {\n                ...newUserList[targetId],\n                userRoomStatus: action\n              };\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              });\n            }\n            break;\n          }\n        case 'owner':\n        case 'admin':\n          {\n            if (targetId === userInfo.uid) {\n              var _roomList$roomId$deta6;\n              const newUserList = (_roomList$roomId$deta6 = roomList[roomId].detail) === null || _roomList$roomId$deta6 === void 0 ? void 0 : _roomList$roomId$deta6.userList;\n              newUserList[targetId] = {\n                ...newUserList[targetId],\n                userRoomPower: action\n              };\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              }, undefined, action);\n            } else {\n              var _roomList$roomId$deta7;\n              const newUserList = (_roomList$roomId$deta7 = roomList[roomId].detail) === null || _roomList$roomId$deta7 === void 0 ? void 0 : _roomList$roomId$deta7.userList;\n              newUserList[targetId] = {\n                ...newUserList[targetId],\n                userRoomPower: action\n              };\n              socket.setNewDetailToNewRoom({\n                roomList,\n                setRoomList,\n                roomId,\n                newUserList\n              });\n            }\n            break;\n          }\n      }\n    });\n    return () => {\n      socket.socket.off(\"room-in-action\");\n    };\n  }, [roomList, userInfo, focusRoom]);\n  useEffect(() => {\n    socket.socket.on(\"user-update\", _ref6 => {\n      let {\n        userId,\n        userDisplayName,\n        userProfileUrl,\n        userStatus\n      } = _ref6;\n      const newUser = {};\n      newUser[userId] = {\n        userDisplayName,\n        userProfileUrl,\n        userStatus\n      };\n      AdminLogPrinter(adminConsole, `user-update: ${userDisplayName}: ${userStatus}`);\n      setUserList(prevUserList => ({\n        ...prevUserList,\n        ...newUser\n      }));\n    });\n    return () => {\n      socket.socket.off(\"user-update\");\n    };\n  }, [userList, isFirstLogin]);\n  useEffect(() => {\n    socket.socket.on(\"message\", _ref7 => {\n      let {\n        roomId,\n        from,\n        message\n      } = _ref7;\n      const block = blockList[from] ? true : false;\n      switch (block) {\n        case true:\n          {\n            AdminLogPrinter(adminConsole, `message from ${from} is blocked`);\n            break;\n          }\n        case false:\n          {\n            var _roomList$roomId$deta8, _roomList$roomId$deta9;\n            AdminLogPrinter(adminConsole, `message from ${from} is received: ${message}`);\n            const newMessageList = (_roomList$roomId$deta8 = roomList[roomId].detail) === null || _roomList$roomId$deta8 === void 0 ? void 0 : _roomList$roomId$deta8.messageList;\n            newMessageList.unshift({\n              userId: from,\n              userName: userList[from].userDisplayName,\n              message,\n              isMe: userInfo.uid === from ? true : false,\n              number: (_roomList$roomId$deta9 = roomList[roomId].detail) === null || _roomList$roomId$deta9 === void 0 ? void 0 : _roomList$roomId$deta9.messageList.length\n            });\n            const newDetail = {\n              ...roomList[roomId].detail,\n              messageList: [...newMessageList]\n            };\n            const newRoomList = {};\n            newRoomList[roomId] = {\n              roomName: roomList[roomId].roomName,\n              roomType: roomList[roomId].roomType,\n              isJoined: roomList[roomId].isJoined,\n              detail: newDetail\n            };\n            if (roomList[roomId].roomType === 'dm' && focusRoom !== roomId) {\n              const newDmUser = {};\n              newDmUser[roomId] = {\n                userDisplayName: userList[roomId].userDisplayName,\n                userProfileUrl: userList[roomId].userProfileUrl,\n                userStatus: userList[roomId].userStatus,\n                dmStatus: 'unread'\n              };\n              setUserList({\n                ...userList,\n                ...newDmUser\n              });\n            }\n            setRoomList({\n              ...roomList,\n              ...newRoomList\n            });\n            break;\n          }\n      }\n    });\n    return () => {\n      socket.socket.off(\"message\");\n    };\n  }, [roomList, blockList, userList, userInfo, focusRoom]);\n  useEffect(() => {\n    socket.socket.on(\"game-invite\", _ref8 => {\n      let {\n        userId\n      } = _ref8;\n      if (blockList[userId]) {\n        setTimeout(() => {\n          socket.emitGameInviteCheck({\n            adminConsole\n          }, userId, 'decline');\n        }, 5000);\n        return;\n      }\n      setGameInviteFrom(userId);\n      setGameInviteModal(true);\n    });\n    return () => {\n      socket.socket.off(\"game-invite\");\n    };\n  }, [blockList]);\n  useEffect(() => {\n    socket.socket.on(\"game-invite-check\", _ref9 => {\n      let {\n        targetId,\n        result\n      } = _ref9;\n      if (result === 'decline') {\n        alert(`${userList[targetId].userDisplayName} declined your game invite`);\n      }\n    });\n    return () => {\n      socket.socket.off(\"game-invite-check\");\n    };\n  }, [userList]);\n  async function firstLogin() {\n    if (isFirstLogin) {\n      await getMyinfoHandler();\n    }\n  }\n  useEffect(() => {\n    if (isLoading) {\n      socket.emitUserUpdate(adminConsole, 'inGame');\n      socket.emitGameUpdate(adminConsole, 'ready');\n    }\n  }, [isLoading]);\n  useEffect(() => {\n    var _userList$userInfo$ui;\n    if (isGameStart && ((_userList$userInfo$ui = userList[userInfo === null || userInfo === void 0 ? void 0 : userInfo.uid]) === null || _userList$userInfo$ui === void 0 ? void 0 : _userList$userInfo$ui.userStatus) === 'inGame') {\n      socket.emitGameUpdate(adminConsole, 'playing');\n    }\n  }, [isGameStart, userList, userInfo]);\n  useEffect(() => {\n    if (isGameQuit) {\n      socket.emitGameUpdate(adminConsole, 'end');\n      socket.emitUserUpdate(adminConsole, 'online');\n    }\n  }, [isGameQuit]);\n  useEffect(() => {\n    if (isFirstLogin) {\n      firstLogin();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n}\n_s(ChatWrapper, \"gw5Zno3oXCkHM4EGOukHOsFefUc=\", false, function () {\n  return [useSetAtom, useSetAtom, useAtom, useAtom, useSetAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useAtom, useSetAtom, useSetAtom, useSetAtom, useAtom, useAtom, useAtomValue, useSetAtom, useAtomValue, useAtomValue, useAtomValue, useSetAtom, useSetAtom, useNavigate];\n});\n_c = ChatWrapper;\nvar _c;\n$RefreshReg$(_c, \"ChatWrapper\");","map":{"version":3,"names":["useAtom","useAtomValue","useSetAtom","gameInviteModalAtom","inviteModalAtom","passwordInputModalAtom","userInfoModalAtom","gameinviteFromAtom","isGameQuitAtom","isGameStartedAtom","isLoadingAtom","useEffect","useNavigate","chatAtom","refreshTokenAtom","TFAAtom","UserAtom","GetMyInfo","LogOut","RefreshToken","AdminLogPrinter","PressKey","socket","Fragment","_Fragment","jsxDEV","_jsxDEV","ChatWrapper","_ref","_s","children","setUserInfoModal","setInviteModal","userInfo","setUserInfo","isFirstLogin","setIsFirstLogin","isFirstLoginAtom","setHasLogin","hasLoginAtom","roomList","setRoomList","roomListAtom","userList","setUserList","userListAtom","dmHistoryList","setDmHistoryList","dmHistoryListAtom","followingList","setFollowingList","followingListAtom","blockList","setBlockList","blockListAtom","focusRoom","setFocusRoom","focusRoomAtom","setSocketState","socketStateAtom","setRefreshToken","setGameInviteModal","adminConsole","setAdminConsole","adminConsoleAtom","passwordModal","setPasswordModal","clickRoom","clickRoomAtom","setTfa","isLoading","isGameStart","isGameQuit","setGameInviteFrom","setLeaderBoard","leaderBoardAtom","navigate","prev","logOutHandler","quitRoomRelativeModal","getMyinfoHandler","getMeResponse","refreshResponse","connect","onAny","eventName","_len","arguments","length","args","Array","_key","onAnyOutgoing","_len2","_key2","on","connected","recovered","id","reason","removeAllListeners","err","message","off","offAny","offAnyOutgoing","leaderBoard","map","key","value","totalGameCount","winRate","Number","winGameCount","toFixed","resDmUserList","allDmList","tempDmRoomList","prevUserList","Object","entries","forEach","_ref2","dmUser","roomName","roomType","isJoined","detail","userRoomPower","userRoomStatus","uid","messageList","myRoomStatus","myRoomPower","atom","senderId","_tempDmRoomList$Numbe","_atom$","_atom$2","_atom$3","_tempDmRoomList$Numbe2","_atom$4","tempMessageList","receiverId","unshift","userId","userName","nickname","isMe","number","_tempDmRoomList$Numbe3","_tempDmRoomList$Numbe4","_atom$5","_atom$6","_resDmUserList$Number","_atom$7","_atom$8","_atom$9","_tempDmRoomList$Numbe5","_tempDmRoomList$Numbe6","_atom$10","blockFromReceiver","userDisplayName","prevRoomList","resRoomList","resFollowingList","resBlockList","resUserList","_ref3","action","roomId","newRoomList","JSON","stringify","_roomList$roomId","_ref4","roomUserList","myPower","status","method","newDmUser","userProfileUrl","userStatus","dmStatus","prevDmHistoryList","alert","_ref5","_roomList$roomId2","targetId","_roomList$roomId$deta","newUser","newUserList","setNewDetailToNewRoom","_roomList$roomId$deta2","_roomList$roomId$deta3","_roomList$roomId$deta4","_roomList$roomId$deta5","_roomList$roomId$deta6","undefined","_roomList$roomId$deta7","_ref6","_ref7","from","block","_roomList$roomId$deta8","_roomList$roomId$deta9","newMessageList","newDetail","_ref8","setTimeout","emitGameInviteCheck","_ref9","result","firstLogin","emitUserUpdate","emitGameUpdate","_userList$userInfo$ui","_c","$RefreshReg$"],"sources":["/data/front/src/pages/ChatWrapper.tsx"],"sourcesContent":["\nimport { useAtom, useAtomValue, useSetAtom } from \"jotai\";\nimport {\n\tgameInviteModalAtom,\n\tinviteModalAtom,\n\tpasswordInputModalAtom,\n\tuserInfoModalAtom\n} from \"../components/atom/ModalAtom\";\n\nimport {\n\tgameinviteFromAtom,\n\tisGameQuitAtom,\n\tisGameStartedAtom,\n\tisLoadingAtom\n} from \"../components/atom/GameAtom\";\n\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as chatAtom from \"../components/atom/ChatAtom\";\nimport { refreshTokenAtom } from \"../components/atom/LoginAtom\";\nimport { TFAAtom, UserAtom } from \"../components/atom/UserAtom\";\nimport { GetMyInfo, LogOut, RefreshToken } from \"../event/api.request\";\nimport { AdminLogPrinter, PressKey } from \"../event/event.util\";\nimport type * as chatType from \"../socket/chat.dto\";\nimport * as socket from \"../socket/chat.socket\";\n\nexport default function ChatWrapper({ children }: { children: JSX.Element }) {\n\tconst setUserInfoModal = useSetAtom(userInfoModalAtom);\n\tconst setInviteModal = useSetAtom(inviteModalAtom);\n\tconst [userInfo, setUserInfo] = useAtom(UserAtom);\n\tconst [isFirstLogin, setIsFirstLogin] = useAtom(chatAtom.isFirstLoginAtom);\n\tconst setHasLogin = useSetAtom(chatAtom.hasLoginAtom);\n\tconst [roomList, setRoomList] = useAtom(chatAtom.roomListAtom);\n\tconst [userList, setUserList] = useAtom(chatAtom.userListAtom);\n\tconst [dmHistoryList, setDmHistoryList] = useAtom(chatAtom.dmHistoryListAtom);\n\tconst [followingList, setFollowingList] = useAtom(chatAtom.followingListAtom);\n\tconst [blockList, setBlockList] = useAtom(chatAtom.blockListAtom);\n\tconst [focusRoom, setFocusRoom] = useAtom(chatAtom.focusRoomAtom);\n\tconst setSocketState = useSetAtom(chatAtom.socketStateAtom);\n\tconst setRefreshToken = useSetAtom(refreshTokenAtom);\n\tconst setGameInviteModal = useSetAtom(gameInviteModalAtom);\n\tconst [adminConsole, setAdminConsole] = useAtom(chatAtom.adminConsoleAtom);\n\tconst [passwordModal, setPasswordModal] = useAtom(passwordInputModalAtom);\n\tconst clickRoom = useAtomValue(chatAtom.clickRoomAtom);\n\tconst setTfa = useSetAtom(TFAAtom);\n\tconst isLoading = useAtomValue(isLoadingAtom);\n\tconst isGameStart = useAtomValue(isGameStartedAtom);\n\tconst isGameQuit = useAtomValue(isGameQuitAtom);\n\tconst setGameInviteFrom = useSetAtom(gameinviteFromAtom);\n\tconst setLeaderBoard = useSetAtom(chatAtom.leaderBoardAtom);\n\tconst navigate = useNavigate();\n\n\tPressKey([\"F4\"], () => {\n\t\tsetAdminConsole((prev) => !prev);\n\t});\n\n\tconst logOutHandler = () => {\n\t\tLogOut(adminConsole, setRefreshToken, navigate, \"/\");\n\t\tsetHasLogin(false);\n\t\tsetIsFirstLogin(true);\n\t};\n\n\tconst quitRoomRelativeModal = () => {\n\t\tsetUserInfoModal(false);\n\t\tsetInviteModal(false);\n\t}\n\n\tasync function getMyinfoHandler() {\n\t\tconst getMeResponse = await GetMyInfo(adminConsole, setUserInfo, setTfa, true);\n\t\tif (getMeResponse === 401) {\n\t\t\tconst refreshResponse = await RefreshToken(adminConsole);\n\t\t\tif (refreshResponse !== 201) {\n\t\t\t\tlogOutHandler();\n\t\t\t} else {\n\t\t\t\tconst getMeResponse = await GetMyInfo(adminConsole, setUserInfo, setTfa, true);\n\t\t\t\tif (getMeResponse === 401) {\n\t\t\t\t\tlogOutHandler();\n\t\t\t\t} else {\n\t\t\t\t\tsocket.socket.connect();\n\t\t\t\t\tsetIsFirstLogin(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tsocket.socket.connect();\n\t\t\tsetIsFirstLogin(false);\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tsocket.socket.onAny((eventName, ...args) => {\n\t\t\tAdminLogPrinter(adminConsole, \"incoming \", eventName, args);\n\t\t});\n\t\t// catch all outgoing events\n\t\tsocket.socket.onAnyOutgoing((eventName, ...args) => {\n\t\t\tAdminLogPrinter(adminConsole, \"outgoing \", eventName, args);\n\t\t});\n\t\tsocket.socket.on(\"connect\", () => {\n\t\t\tif (socket.socket.connected) {\n\t\t\t\t//This attribute describes whether the socket is currently connected to the server.\n\t\t\t\tif (socket.socket.recovered) {\n\t\t\t\t\t// any missed packets will be received\n\t\t\t\t} else {\n\t\t\t\t\t// new or unrecoverable session\n\t\t\t\t\tAdminLogPrinter(adminConsole, \"socket connected : \" + socket.socket.id);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetSocketState(true);\n\t\t});\n\t\t//https://socket.io/docs/v4/client-socket-instance/#disconnect\n\t\tsocket.socket.on(\"disconnect\", (reason) => {\n\t\t\tAdminLogPrinter(adminConsole, \"socket disconnected reason: \" + reason);\n\t\t\t/**\n\t\t\t *  BAD, will throw an error\n\t\t\t *  socket.emit(\"disconnect\");\n\t\t\t*/\n\t\t\tif (reason === \"io server disconnect\") {\n\t\t\t\t// the disconnection was initiated by the server, you need to reconnect manually\n\t\t\t\tAdminLogPrinter(adminConsole, 'socket disconnected by server');\n\t\t\t\tsocket.socket.removeAllListeners();\n\t\t\t}\n\t\t\t// else the socket will automatically try to reconnect\n\t\t\tAdminLogPrinter(adminConsole, \"socket disconnected\");\n\t\t\tsetSocketState(false);\n\t\t});\n\t\t// the connection is denied by the server in a middleware function\n\t\tsocket.socket.on(\"connect_error\", (err) => {\n\t\t\tif (err.message === \"unauthorized\") {\n\t\t\t\t// handle each case\n\t\t\t}\n\t\t\tAdminLogPrinter(adminConsole, err.message); // prints the message associated with the error\n\t\t});\n\t\tsocket.socket.on(\"multiple-login\", () => {\n\t\t\t// \talert(`multiple login detected!`);\n\t\t\tLogOut(adminConsole, setRefreshToken, navigate, \"/\", 'refresh', \"multiple-login\");\n\t\t\tsetHasLogin(false);\n\t\t\tsetIsFirstLogin(true);\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"connect\");\n\t\t\tsocket.socket.off(\"disconnect\");\n\t\t\tsocket.socket.off(\"connect_error\");\n\t\t\tsocket.socket.offAny();\n\t\t\tsocket.socket.offAnyOutgoing();\n\t\t\tsocket.socket.off(\"multiple-login\");\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"logout\", () => {\n\t\t\tLogOut(adminConsole, setRefreshToken, navigate, \"/\");\n\t\t\tsetHasLogin(false);\n\t\t\tsetIsFirstLogin(true);\n\t\t});\n\t\tsocket.socket.on(\"leaderboard-update\", (leaderBoard: chatType.leaderboardDto[]) => {\n\t\t\tleaderBoard.map((key, value) => {\n\t\t\t\tif (key.totalGameCount === 0) {\n\t\t\t\t\tkey.winRate = 0;\n\t\t\t\t} else {\n\t\t\t\t\tkey.winRate = Number((key.winGameCount / key.totalGameCount * 100).toFixed(2));\n\t\t\t\t}\n\t\t\t});\n\t\t\tsetLeaderBoard(leaderBoard);\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"logout\");\n\t\t\tsocket.socket.off(\"leaderboard-update\");\n\t\t};\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"dm-list\", (resDmUserList, allDmList) => {\n\t\t\tconst tempDmRoomList: chatType.roomListDto = {};\n\n\t\t\tsetDmHistoryList({ ...resDmUserList });\n\t\t\tsetUserList((prevUserList) => ({ ...prevUserList, ...resDmUserList }));\n\t\t\tObject.entries(resDmUserList).forEach(([dmUser]) => {\n\t\t\t\ttempDmRoomList[Number(dmUser)] = {\n\t\t\t\t\troomName: 'DM',\n\t\t\t\t\troomType: 'dm',\n\t\t\t\t\tisJoined: true,\n\t\t\t\t\tdetail: {\n\t\t\t\t\t\tuserList: {\n\t\t\t\t\t\t\t[Number(dmUser)]: {\n\t\t\t\t\t\t\t\tuserRoomPower: 'member',\n\t\t\t\t\t\t\t\tuserRoomStatus: 'normal',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t[userInfo.uid]: {\n\t\t\t\t\t\t\t\tuserRoomPower: 'member',\n\t\t\t\t\t\t\t\tuserRoomStatus: 'normal',\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmessageList: [],\n\t\t\t\t\t\tmyRoomStatus: 'normal',\n\t\t\t\t\t\tmyRoomPower: 'member'\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tObject.entries(allDmList).forEach((atom: any[]) => {\n\t\t\t\tif (Number(atom[1].senderId!) === userInfo.uid) { // from me\n\t\t\t\t\tconst tempMessageList: chatType.roomMessageDto[] = tempDmRoomList[Number(atom[1]?.receiverId!)].detail?.messageList!;\n\t\t\t\t\ttempMessageList?.unshift({\n\t\t\t\t\t\tuserId: userInfo.uid,\n\t\t\t\t\t\tuserName: userInfo.nickname,\n\t\t\t\t\t\tmessage: atom[1]?.message!,\n\t\t\t\t\t\tisMe: true,\n\t\t\t\t\t\tnumber: tempMessageList.length\n\t\t\t\t\t});\n\t\t\t\t\ttempDmRoomList[Number(atom[1]?.receiverId!)] = {\n\t\t\t\t\t\troomName: 'DM',\n\t\t\t\t\t\troomType: 'dm',\n\t\t\t\t\t\tisJoined: true,\n\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\tuserList: { ...tempDmRoomList[Number(atom[1]?.receiverId!)].detail?.userList },\n\t\t\t\t\t\t\tmyRoomPower: 'member',\n\t\t\t\t\t\t\tmyRoomStatus: 'normal',\n\t\t\t\t\t\t\tmessageList: tempMessageList\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else { // to me\n\t\t\t\t\tif (atom[1].blockFromReceiver) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst tempMessageList: chatType.roomMessageDto[] = tempDmRoomList[Number(atom[1]?.senderId!)]?.detail?.messageList!;\n\t\t\t\t\ttempMessageList?.unshift({\n\t\t\t\t\t\tuserId: Number(atom[1]?.senderId!),\n\t\t\t\t\t\tuserName: resDmUserList[Number(atom[1]?.senderId!)]?.userDisplayName,\n\t\t\t\t\t\tmessage: atom[1]?.message!,\n\t\t\t\t\t\tisMe: false,\n\t\t\t\t\t\tnumber: tempMessageList.length\n\t\t\t\t\t});\n\t\t\t\t\ttempDmRoomList[Number(atom[1]?.senderId!)] = {\n\t\t\t\t\t\troomName: 'DM',\n\t\t\t\t\t\troomType: 'dm',\n\t\t\t\t\t\tisJoined: true,\n\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\tuserList: { ...tempDmRoomList[Number(atom[1]?.senderId!)]?.detail?.userList },\n\t\t\t\t\t\t\tmyRoomPower: 'member',\n\t\t\t\t\t\t\tmyRoomStatus: 'normal',\n\t\t\t\t\t\t\tmessageList: tempMessageList\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tsetRoomList((prevRoomList) => ({ ...prevRoomList, ...tempDmRoomList }));\n\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"dm-list\");\n\t\t};\n\t}, [userInfo, roomList, dmHistoryList, userList]);\n\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"room-list\", (resRoomList: chatType.roomListDto) => {\n\t\t\tsetRoomList((prevRoomList) => ({ ...prevRoomList, ...resRoomList }));\n\t\t});\n\t\tsocket.socket.on(\"follow-list\", (resFollowingList: chatType.userDto) => {\n\t\t\tsetFollowingList({ ...resFollowingList });\n\t\t\tsetUserList((prevUserList) => ({ ...resFollowingList, ...prevUserList }));\n\t\t});\n\t\tsocket.socket.on(\"block-list\", (resBlockList: chatType.userSimpleDto) => {\n\t\t\tsetBlockList({ ...resBlockList });\n\t\t});\n\t\tsocket.socket.on(\"user-list\", (resUserList: chatType.userDto) => {\n\t\t\tsetUserList((prevUserList) => ({ ...prevUserList, ...resUserList }))\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"room-list\");\n\t\t\tsocket.socket.off(\"follow-list\");\n\t\t\tsocket.socket.off(\"block-list\");\n\t\t\tsocket.socket.off(\"user-list\");\n\t\t}\n\t}, [userList, roomList, followingList, blockList]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"room-list-update\", ({\n\t\t\taction,\n\t\t\troomId,\n\t\t\troomName,\n\t\t\troomType,\n\t\t}: {\n\t\t\taction: 'new' | 'delete' | 'edit';\n\t\t\troomId: number;\n\t\t\troomName: string;\n\t\t\troomType: 'open' | 'protected' | 'private';\n\t\t}) => {\n\t\t\tswitch (action) {\n\t\t\t\tcase 'new': {\n\t\t\t\t\tconst newRoomList: chatType.roomListDto = {};\n\t\t\t\t\tnewRoomList[roomId] = {\n\t\t\t\t\t\troomName,\n\t\t\t\t\t\troomType,\n\t\t\t\t\t\tisJoined: false,\n\t\t\t\t\t};\n\t\t\t\t\tAdminLogPrinter(adminConsole, `room-list-update new: ${JSON.stringify(newRoomList)}`);\n\t\t\t\t\tAdminLogPrinter(adminConsole, `room-list-update origin: ${JSON.stringify(roomList)}`);\n\t\t\t\t\tsetRoomList({ ...roomList, ...newRoomList });\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'delete': {\n\t\t\t\t\tconst newRoomList: chatType.roomListDto = { ...roomList };\n\t\t\t\t\tdelete newRoomList[roomId];\n\t\t\t\t\tsetRoomList({ ...newRoomList });\n\t\t\t\t\tif (focusRoom === roomId) {\n\t\t\t\t\t\tsetFocusRoom(-1);\n\t\t\t\t\t}\n\t\t\t\t\tif (passwordModal && roomId === clickRoom) {\n\t\t\t\t\t\tsetPasswordModal(false);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'edit': {\n\t\t\t\t\tconst newRoomList: chatType.roomListDto = {};\n\t\t\t\t\tnewRoomList[roomId] = {\n\t\t\t\t\t\troomName,\n\t\t\t\t\t\troomType,\n\t\t\t\t\t\tisJoined: roomList[roomId]?.isJoined,\n\t\t\t\t\t\tdetail: roomList[roomId].detail || {} as chatType.roomDetailDto,\n\t\t\t\t\t};\n\t\t\t\t\tsetRoomList({ ...roomList, ...newRoomList });\n\t\t\t\t\tif (passwordModal && roomId === clickRoom) {\n\t\t\t\t\t\tsetPasswordModal(false);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"room-list-update\");\n\t\t};\n\t}, [roomList, focusRoom, passwordModal, clickRoom]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"room-clear\", () => {\n\t\t\tquitRoomRelativeModal();\n\t\t\tsetRoomList({});\n\t\t\tsetFocusRoom(-1);\n\t\t});\n\t\tsocket.socket.on(\"user-clear\", () => {\n\t\t\tsetUserList({});\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"room-clear\");\n\t\t\tsocket.socket.off(\"user-clear\");\n\t\t};\n\t}, [roomList, userList, setRoomList, setUserList]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"room-join\", ({\n\t\t\troomId,\n\t\t\troomName,\n\t\t\troomType,\n\t\t\troomUserList = {},\n\t\t\tmyPower,\n\t\t\tstatus,\n\t\t\tmethod = ''\n\t\t}: {\n\t\t\troomId: number,\n\t\t\troomName: string,\n\t\t\troomType: 'open' | 'protected' | 'private' | 'dm',\n\t\t\troomUserList: chatType.userInRoomListDto,\n\t\t\tmyPower: chatType.userRoomPower,\n\t\t\tstatus: 'ok' | 'ko',\n\t\t\tmethod?: 'invite' | ''\n\t\t}) => {\n\t\t\tswitch (status) {\n\t\t\t\tcase 'ok': {\n\t\t\t\t\tAdminLogPrinter(adminConsole, `join [${roomName}]room`);\n\t\t\t\t\tconst newRoomList: chatType.roomListDto = {};\n\t\t\t\t\tnewRoomList[roomId] = {\n\t\t\t\t\t\troomName,\n\t\t\t\t\t\troomType,\n\t\t\t\t\t\tisJoined: true,\n\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\tuserList: { ...roomUserList },\n\t\t\t\t\t\t\tmessageList: [],\n\t\t\t\t\t\t\tmyRoomStatus: 'normal',\n\t\t\t\t\t\t\tmyRoomPower: myPower\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tAdminLogPrinter(adminConsole, `room - join new: ${JSON.stringify(newRoomList)}`);\n\t\t\t\t\tsetRoomList({ ...roomList, ...newRoomList });\n\t\t\t\t\tif (method !== 'invite') {\n\t\t\t\t\t\tsetFocusRoom(roomId);\n\t\t\t\t\t}\n\t\t\t\t\tif (roomType === 'dm') {\n\t\t\t\t\t\tconst newDmUser: chatType.userDto = {};\n\t\t\t\t\t\tnewDmUser[roomId] = {\n\t\t\t\t\t\t\tuserDisplayName: userList[roomId].userDisplayName,\n\t\t\t\t\t\t\tuserProfileUrl: userList[roomId].userProfileUrl,\n\t\t\t\t\t\t\tuserStatus: userList[roomId].userStatus,\n\t\t\t\t\t\t\tdmStatus: method === 'invite' ? 'unread' : 'read',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsetDmHistoryList((prevDmHistoryList) => ({ ...prevDmHistoryList, ...newDmUser }));\n\t\t\t\t\t\tsetUserList((prevUserList) => ({ ...prevUserList, ...newDmUser }));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'ko': {\n\t\t\t\t\tif (roomList[roomId].isJoined === false) {\n\t\t\t\t\t\talert(`fail to join[${roomName}]room`);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"room-join\");\n\t\t};\n\t}, [roomList, userList, dmHistoryList]);\n\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"room-in-action\", ({\n\t\t\troomId,\n\t\t\taction,\n\t\t\ttargetId\n\t\t}: {\n\t\t\troomId: number;\n\t\t\taction: 'ban' | 'kick' | 'mute' | 'admin' | 'normal' | 'owner' | 'leave' | 'newMember';\n\t\t\ttargetId: number\n\t\t}) => {\n\t\t\tif (roomList[roomId]?.isJoined !== true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch (action) {\n\t\t\t\tcase 'newMember': {\n\t\t\t\t\tif (targetId === userInfo.uid) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst newUser: chatType.userInRoomListDto = {};\n\t\t\t\t\t\tnewUser[targetId] = {\n\t\t\t\t\t\t\tuserRoomStatus: 'normal',\n\t\t\t\t\t\t\tuserRoomPower: 'member'\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = { ...roomList[roomId].detail?.userList!, ...newUser };\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList })\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'ban':\n\t\t\t\tcase 'leave':\n\t\t\t\tcase 'kick': {\n\t\t\t\t\tif (targetId === userInfo.uid) {\n\t\t\t\t\t\tif (roomList[roomId].roomType === 'private') {\n\t\t\t\t\t\t\tconst newRoomList: chatType.roomListDto = { ...roomList };\n\t\t\t\t\t\t\tdelete newRoomList[roomId];\n\t\t\t\t\t\t\tsetRoomList({ ...newRoomList });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst newRoomList: chatType.roomListDto = {};\n\t\t\t\t\t\t\tnewRoomList[roomId] = {\n\t\t\t\t\t\t\t\troomName: roomList[roomId].roomName,\n\t\t\t\t\t\t\t\troomType: roomList[roomId].roomType,\n\t\t\t\t\t\t\t\tisJoined: false,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetRoomList({ ...roomList, ...newRoomList });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (focusRoom === roomId) {\n\t\t\t\t\t\t\tsetFocusRoom(-1);\n\t\t\t\t\t\t\tquitRoomRelativeModal();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n\t\t\t\t\t\tdelete newUserList[targetId];\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList });\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'mute':\n\t\t\t\tcase 'normal': {\n\t\t\t\t\tif (targetId === userInfo.uid) {\n\t\t\t\t\t\tif (action === 'mute' && roomList[roomId].detail?.myRoomStatus === 'mute') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n\t\t\t\t\t\tnewUserList[targetId] = { ...newUserList[targetId], userRoomStatus: action };\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList }, action);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n\t\t\t\t\t\tnewUserList[targetId] = { ...newUserList[targetId], userRoomStatus: action };\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList });\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'owner':\n\t\t\t\tcase 'admin': {\n\t\t\t\t\tif (targetId === userInfo.uid) {\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n\t\t\t\t\t\tnewUserList[targetId] = { ...newUserList[targetId], userRoomPower: action };\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList }, undefined, action);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst newUserList: chatType.userInRoomListDto = roomList[roomId].detail?.userList!;\n\t\t\t\t\t\tnewUserList[targetId] = { ...newUserList[targetId], userRoomPower: action };\n\t\t\t\t\t\tsocket.setNewDetailToNewRoom({ roomList, setRoomList, roomId, newUserList });\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"room-in-action\");\n\t\t}\n\t}, [roomList, userInfo, focusRoom]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"user-update\", ({\n\t\t\tuserId,\n\t\t\tuserDisplayName,\n\t\t\tuserProfileUrl,\n\t\t\tuserStatus\n\t\t}: {\n\t\t\tuserId: number,\n\t\t\tuserDisplayName: string\n\t\t\tuserProfileUrl: string;\n\t\t\tuserStatus: 'online' | 'offline' | 'inGame';\n\t\t}) => {\n\t\t\tconst newUser: chatType.userDto = {};\n\t\t\tnewUser[userId] = {\n\t\t\t\tuserDisplayName,\n\t\t\t\tuserProfileUrl,\n\t\t\t\tuserStatus,\n\t\t\t};\n\t\t\tAdminLogPrinter(adminConsole, `user-update: ${userDisplayName}: ${userStatus}`);\n\t\t\tsetUserList((prevUserList) => ({ ...prevUserList, ...newUser }));\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"user-update\");\n\t\t}\n\t}, [userList, isFirstLogin]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"message\", ({\n\t\t\troomId,\n\t\t\tfrom,\n\t\t\tmessage\n\t\t}: {\n\t\t\troomId: number,\n\t\t\tfrom: number,\n\t\t\tmessage: string\n\t\t}) => {\n\t\t\tconst block = blockList[from] ? true : false;\n\t\t\tswitch (block) {\n\t\t\t\tcase true: {\n\t\t\t\t\tAdminLogPrinter(adminConsole, `message from ${from} is blocked`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase false: {\n\t\t\t\t\tAdminLogPrinter(adminConsole, `message from ${from} is received: ${message}`);\n\t\t\t\t\tconst newMessageList: chatType.roomMessageDto[] = roomList[roomId].detail?.messageList!;\n\t\t\t\t\tnewMessageList.unshift({\n\t\t\t\t\t\tuserId: from,\n\t\t\t\t\t\tuserName: userList[from].userDisplayName,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tisMe: userInfo.uid === from ? true : false,\n\t\t\t\t\t\tnumber: roomList[roomId].detail?.messageList.length!\n\t\t\t\t\t});\n\t\t\t\t\tconst newDetail: Partial<chatType.roomDetailDto> = { ...roomList[roomId].detail, messageList: [...newMessageList] };\n\t\t\t\t\tconst newRoomList: chatType.roomListDto = {};\n\t\t\t\t\tnewRoomList[roomId] = {\n\t\t\t\t\t\troomName: roomList[roomId].roomName,\n\t\t\t\t\t\troomType: roomList[roomId].roomType,\n\t\t\t\t\t\tisJoined: roomList[roomId].isJoined,\n\t\t\t\t\t\tdetail: newDetail as chatType.roomDetailDto\n\t\t\t\t\t};\n\t\t\t\t\tif (roomList[roomId].roomType === 'dm' && focusRoom !== roomId) {\n\t\t\t\t\t\tconst newDmUser: chatType.userDto = {};\n\t\t\t\t\t\tnewDmUser[roomId] = {\n\t\t\t\t\t\t\tuserDisplayName: userList[roomId].userDisplayName,\n\t\t\t\t\t\t\tuserProfileUrl: userList[roomId].userProfileUrl,\n\t\t\t\t\t\t\tuserStatus: userList[roomId].userStatus,\n\t\t\t\t\t\t\tdmStatus: 'unread',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsetUserList({ ...userList, ...newDmUser });\n\t\t\t\t\t}\n\t\t\t\t\tsetRoomList({ ...roomList, ...newRoomList });\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"message\");\n\t\t};\n\t}, [roomList, blockList, userList, userInfo, focusRoom]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"game-invite\", ({\n\t\t\tuserId\n\t\t}: {\n\t\t\tuserId: number\n\t\t}) => {\n\t\t\tif (blockList[userId]) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsocket.emitGameInviteCheck({ adminConsole }, userId, 'decline');\n\t\t\t\t}, 5000);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetGameInviteFrom(userId);\n\t\t\tsetGameInviteModal(true);\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"game-invite\");\n\t\t};\n\t}, [blockList]);\n\n\tuseEffect(() => {\n\t\tsocket.socket.on(\"game-invite-check\", ({\n\t\t\ttargetId,\n\t\t\tresult\n\t\t}: {\n\t\t\ttargetId: number\n\t\t\tresult: 'accept' | 'decline'\n\t\t}) => {\n\t\t\tif (result === 'decline') {\n\t\t\t\talert(`${userList[targetId].userDisplayName} declined your game invite`);\n\t\t\t}\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.socket.off(\"game-invite-check\");\n\t\t};\n\t}, [userList]);\n\n\tasync function firstLogin() {\n\t\tif (isFirstLogin) {\n\t\t\tawait getMyinfoHandler();\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (isLoading) {\n\t\t\tsocket.emitUserUpdate(adminConsole, 'inGame');\n\t\t\tsocket.emitGameUpdate(adminConsole, 'ready');\n\t\t}\n\t}, [isLoading]);\n\n\tuseEffect(() => {\n\t\tif (isGameStart && userList[userInfo?.uid]?.userStatus === 'inGame') {\n\t\t\tsocket.emitGameUpdate(adminConsole, 'playing');\n\t\t}\n\t}, [isGameStart, userList, userInfo]);\n\n\tuseEffect(() => {\n\t\tif (isGameQuit) {\n\t\t\tsocket.emitGameUpdate(adminConsole, 'end');\n\t\t\tsocket.emitUserUpdate(adminConsole, 'online');\n\t\t}\n\t}, [isGameQuit]);\n\n\tuseEffect(() => {\n\t\tif (isFirstLogin) {\n\t\t\tfirstLogin();\n\t\t}\n\t}, []);\n\n\n\treturn (\n\t\t<>\n\t\t\t{children}\n\t\t</>\n\t);\n}\n"],"mappings":";AACA,SAASA,OAAO,EAAEC,YAAY,EAAEC,UAAU,QAAQ,OAAO;AACzD,SACCC,mBAAmB,EACnBC,eAAe,EACfC,sBAAsB,EACtBC,iBAAiB,QACX,8BAA8B;AAErC,SACCC,kBAAkB,EAClBC,cAAc,EACdC,iBAAiB,EACjBC,aAAa,QACP,6BAA6B;AAEpC,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,KAAKC,QAAQ,MAAM,6BAA6B;AACvD,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,OAAO,EAAEC,QAAQ,QAAQ,6BAA6B;AAC/D,SAASC,SAAS,EAAEC,MAAM,EAAEC,YAAY,QAAQ,sBAAsB;AACtE,SAASC,eAAe,EAAEC,QAAQ,QAAQ,qBAAqB;AAE/D,OAAO,KAAKC,MAAM,MAAM,uBAAuB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,eAAe,SAASC,WAAWA,CAAAC,IAAA,EAA0C;EAAAC,EAAA;EAAA,IAAzC;IAAEC;EAAoC,CAAC,GAAAF,IAAA;EAC1E,MAAMG,gBAAgB,GAAG7B,UAAU,CAACI,iBAAiB,CAAC;EACtD,MAAM0B,cAAc,GAAG9B,UAAU,CAACE,eAAe,CAAC;EAClD,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAGlC,OAAO,CAACgB,QAAQ,CAAC;EACjD,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpC,OAAO,CAACa,QAAQ,CAACwB,gBAAgB,CAAC;EAC1E,MAAMC,WAAW,GAAGpC,UAAU,CAACW,QAAQ,CAAC0B,YAAY,CAAC;EACrD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGzC,OAAO,CAACa,QAAQ,CAAC6B,YAAY,CAAC;EAC9D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG5C,OAAO,CAACa,QAAQ,CAACgC,YAAY,CAAC;EAC9D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG/C,OAAO,CAACa,QAAQ,CAACmC,iBAAiB,CAAC;EAC7E,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGlD,OAAO,CAACa,QAAQ,CAACsC,iBAAiB,CAAC;EAC7E,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGrD,OAAO,CAACa,QAAQ,CAACyC,aAAa,CAAC;EACjE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGxD,OAAO,CAACa,QAAQ,CAAC4C,aAAa,CAAC;EACjE,MAAMC,cAAc,GAAGxD,UAAU,CAACW,QAAQ,CAAC8C,eAAe,CAAC;EAC3D,MAAMC,eAAe,GAAG1D,UAAU,CAACY,gBAAgB,CAAC;EACpD,MAAM+C,kBAAkB,GAAG3D,UAAU,CAACC,mBAAmB,CAAC;EAC1D,MAAM,CAAC2D,YAAY,EAAEC,eAAe,CAAC,GAAG/D,OAAO,CAACa,QAAQ,CAACmD,gBAAgB,CAAC;EAC1E,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGlE,OAAO,CAACK,sBAAsB,CAAC;EACzE,MAAM8D,SAAS,GAAGlE,YAAY,CAACY,QAAQ,CAACuD,aAAa,CAAC;EACtD,MAAMC,MAAM,GAAGnE,UAAU,CAACa,OAAO,CAAC;EAClC,MAAMuD,SAAS,GAAGrE,YAAY,CAACS,aAAa,CAAC;EAC7C,MAAM6D,WAAW,GAAGtE,YAAY,CAACQ,iBAAiB,CAAC;EACnD,MAAM+D,UAAU,GAAGvE,YAAY,CAACO,cAAc,CAAC;EAC/C,MAAMiE,iBAAiB,GAAGvE,UAAU,CAACK,kBAAkB,CAAC;EACxD,MAAMmE,cAAc,GAAGxE,UAAU,CAACW,QAAQ,CAAC8D,eAAe,CAAC;EAC3D,MAAMC,QAAQ,GAAGhE,WAAW,EAAE;EAE9BS,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM;IACtB0C,eAAe,CAAEc,IAAI,IAAK,CAACA,IAAI,CAAC;EACjC,CAAC,CAAC;EAEF,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC3B5D,MAAM,CAAC4C,YAAY,EAAEF,eAAe,EAAEgB,QAAQ,EAAE,GAAG,CAAC;IACpDtC,WAAW,CAAC,KAAK,CAAC;IAClBF,eAAe,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAM2C,qBAAqB,GAAGA,CAAA,KAAM;IACnChD,gBAAgB,CAAC,KAAK,CAAC;IACvBC,cAAc,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,eAAegD,gBAAgBA,CAAA,EAAG;IACjC,MAAMC,aAAa,GAAG,MAAMhE,SAAS,CAAC6C,YAAY,EAAE5B,WAAW,EAAEmC,MAAM,EAAE,IAAI,CAAC;IAC9E,IAAIY,aAAa,KAAK,GAAG,EAAE;MAC1B,MAAMC,eAAe,GAAG,MAAM/D,YAAY,CAAC2C,YAAY,CAAC;MACxD,IAAIoB,eAAe,KAAK,GAAG,EAAE;QAC5BJ,aAAa,EAAE;MAChB,CAAC,MAAM;QACN,MAAMG,aAAa,GAAG,MAAMhE,SAAS,CAAC6C,YAAY,EAAE5B,WAAW,EAAEmC,MAAM,EAAE,IAAI,CAAC;QAC9E,IAAIY,aAAa,KAAK,GAAG,EAAE;UAC1BH,aAAa,EAAE;QAChB,CAAC,MAAM;UACNxD,MAAM,CAACA,MAAM,CAAC6D,OAAO,EAAE;UACvB/C,eAAe,CAAC,KAAK,CAAC;QACvB;MACD;IACD,CAAC,MAAM;MACNd,MAAM,CAACA,MAAM,CAAC6D,OAAO,EAAE;MACvB/C,eAAe,CAAC,KAAK,CAAC;IACvB;EACD;EAEAzB,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAAC8D,KAAK,CAAC,UAACC,SAAS,EAAc;MAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAJF,IAAI,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;MAAA;MACtCvE,eAAe,CAAC0C,YAAY,EAAE,WAAW,EAAEuB,SAAS,EAAEI,IAAI,CAAC;IAC5D,CAAC,CAAC;IACF;IACAnE,MAAM,CAACA,MAAM,CAACsE,aAAa,CAAC,UAACP,SAAS,EAAc;MAAA,SAAAQ,KAAA,GAAAN,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAG,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAJL,IAAI,CAAAK,KAAA,QAAAP,SAAA,CAAAO,KAAA;MAAA;MAC9C1E,eAAe,CAAC0C,YAAY,EAAE,WAAW,EAAEuB,SAAS,EAAEI,IAAI,CAAC;IAC5D,CAAC,CAAC;IACFnE,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,SAAS,EAAE,MAAM;MACjC,IAAIzE,MAAM,CAACA,MAAM,CAAC0E,SAAS,EAAE;QAC5B;QACA,IAAI1E,MAAM,CAACA,MAAM,CAAC2E,SAAS,EAAE;UAC5B;QAAA,CACA,MAAM;UACN;UACA7E,eAAe,CAAC0C,YAAY,EAAE,qBAAqB,GAAGxC,MAAM,CAACA,MAAM,CAAC4E,EAAE,CAAC;QACxE;MACD;MACAxC,cAAc,CAAC,IAAI,CAAC;IACrB,CAAC,CAAC;IACF;IACApC,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,YAAY,EAAGI,MAAM,IAAK;MAC1C/E,eAAe,CAAC0C,YAAY,EAAE,8BAA8B,GAAGqC,MAAM,CAAC;MACtE;AACH;AACA;AACA;MACG,IAAIA,MAAM,KAAK,sBAAsB,EAAE;QACtC;QACA/E,eAAe,CAAC0C,YAAY,EAAE,+BAA+B,CAAC;QAC9DxC,MAAM,CAACA,MAAM,CAAC8E,kBAAkB,EAAE;MACnC;MACA;MACAhF,eAAe,CAAC0C,YAAY,EAAE,qBAAqB,CAAC;MACpDJ,cAAc,CAAC,KAAK,CAAC;IACtB,CAAC,CAAC;IACF;IACApC,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,eAAe,EAAGM,GAAG,IAAK;MAC1C,IAAIA,GAAG,CAACC,OAAO,KAAK,cAAc,EAAE;QACnC;MAAA;MAEDlF,eAAe,CAAC0C,YAAY,EAAEuC,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC;;IACFhF,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,gBAAgB,EAAE,MAAM;MACxC;MACA7E,MAAM,CAAC4C,YAAY,EAAEF,eAAe,EAAEgB,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,gBAAgB,CAAC;MACjFtC,WAAW,CAAC,KAAK,CAAC;MAClBF,eAAe,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC;IACF,OAAO,MAAM;MACZd,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,SAAS,CAAC;MAC5BjF,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,YAAY,CAAC;MAC/BjF,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,eAAe,CAAC;MAClCjF,MAAM,CAACA,MAAM,CAACkF,MAAM,EAAE;MACtBlF,MAAM,CAACA,MAAM,CAACmF,cAAc,EAAE;MAC9BnF,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,gBAAgB,CAAC;IACpC,CAAC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN5F,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,QAAQ,EAAE,MAAM;MAChC7E,MAAM,CAAC4C,YAAY,EAAEF,eAAe,EAAEgB,QAAQ,EAAE,GAAG,CAAC;MACpDtC,WAAW,CAAC,KAAK,CAAC;MAClBF,eAAe,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC;IACFd,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,oBAAoB,EAAGW,WAAsC,IAAK;MAClFA,WAAW,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;QAC/B,IAAID,GAAG,CAACE,cAAc,KAAK,CAAC,EAAE;UAC7BF,GAAG,CAACG,OAAO,GAAG,CAAC;QAChB,CAAC,MAAM;UACNH,GAAG,CAACG,OAAO,GAAGC,MAAM,CAAC,CAACJ,GAAG,CAACK,YAAY,GAAGL,GAAG,CAACE,cAAc,GAAG,GAAG,EAAEI,OAAO,CAAC,CAAC,CAAC,CAAC;QAC/E;MACD,CAAC,CAAC;MACFxC,cAAc,CAACgC,WAAW,CAAC;IAC5B,CAAC,CAAC;IACF,OAAO,MAAM;MACZpF,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,QAAQ,CAAC;MAC3BjF,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,oBAAoB,CAAC;IACxC,CAAC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN5F,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,SAAS,EAAE,CAACoB,aAAa,EAAEC,SAAS,KAAK;MACzD,MAAMC,cAAoC,GAAG,CAAC,CAAC;MAE/CtE,gBAAgB,CAAC;QAAE,GAAGoE;MAAc,CAAC,CAAC;MACtCvE,WAAW,CAAE0E,YAAY,KAAM;QAAE,GAAGA,YAAY;QAAE,GAAGH;MAAc,CAAC,CAAC,CAAC;MACtEI,MAAM,CAACC,OAAO,CAACL,aAAa,CAAC,CAACM,OAAO,CAACC,KAAA,IAAc;QAAA,IAAb,CAACC,MAAM,CAAC,GAAAD,KAAA;QAC9CL,cAAc,CAACL,MAAM,CAACW,MAAM,CAAC,CAAC,GAAG;UAChCC,QAAQ,EAAE,IAAI;UACdC,QAAQ,EAAE,IAAI;UACdC,QAAQ,EAAE,IAAI;UACdC,MAAM,EAAE;YACPpF,QAAQ,EAAE;cACT,CAACqE,MAAM,CAACW,MAAM,CAAC,GAAG;gBACjBK,aAAa,EAAE,QAAQ;gBACvBC,cAAc,EAAE;cACjB,CAAC;cACD,CAAChG,QAAQ,CAACiG,GAAG,GAAG;gBACfF,aAAa,EAAE,QAAQ;gBACvBC,cAAc,EAAE;cACjB;YACD,CAAC;YACDE,WAAW,EAAE,EAAE;YACfC,YAAY,EAAE,QAAQ;YACtBC,WAAW,EAAE;UACd;QACD,CAAC;MACF,CAAC,CAAC;MAEFd,MAAM,CAACC,OAAO,CAACJ,SAAS,CAAC,CAACK,OAAO,CAAEa,IAAW,IAAK;QAClD,IAAItB,MAAM,CAACsB,IAAI,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAE,KAAKtG,QAAQ,CAACiG,GAAG,EAAE;UAAA,IAAAM,qBAAA,EAAAC,MAAA,EAAAC,OAAA,EAAAC,OAAA,EAAAC,sBAAA,EAAAC,OAAA;UAAE;UACjD,MAAMC,eAA0C,IAAAN,qBAAA,GAAGnB,cAAc,CAACL,MAAM,EAAAyB,MAAA,GAACH,IAAI,CAAC,CAAC,CAAC,cAAAG,MAAA,uBAAPA,MAAA,CAASM,UAAU,CAAE,CAAC,CAAChB,MAAM,cAAAS,qBAAA,uBAAnDA,qBAAA,CAAqDL,WAAY;UACpHW,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEE,OAAO,CAAC;YACxBC,MAAM,EAAEhH,QAAQ,CAACiG,GAAG;YACpBgB,QAAQ,EAAEjH,QAAQ,CAACkH,QAAQ;YAC3B7C,OAAO,GAAAoC,OAAA,GAAEJ,IAAI,CAAC,CAAC,CAAC,cAAAI,OAAA,uBAAPA,OAAA,CAASpC,OAAQ;YAC1B8C,IAAI,EAAE,IAAI;YACVC,MAAM,EAAEP,eAAe,CAACtD;UACzB,CAAC,CAAC;UACF6B,cAAc,CAACL,MAAM,EAAA2B,OAAA,GAACL,IAAI,CAAC,CAAC,CAAC,cAAAK,OAAA,uBAAPA,OAAA,CAASI,UAAU,CAAE,CAAC,GAAG;YAC9CnB,QAAQ,EAAE,IAAI;YACdC,QAAQ,EAAE,IAAI;YACdC,QAAQ,EAAE,IAAI;YACdC,MAAM,EAAE;cACPpF,QAAQ,EAAE;gBAAE,KAAAiG,sBAAA,GAAGvB,cAAc,CAACL,MAAM,EAAA6B,OAAA,GAACP,IAAI,CAAC,CAAC,CAAC,cAAAO,OAAA,uBAAPA,OAAA,CAASE,UAAU,CAAE,CAAC,CAAChB,MAAM,cAAAa,sBAAA,uBAAnDA,sBAAA,CAAqDjG,QAAQ;cAAC,CAAC;cAC9E0F,WAAW,EAAE,QAAQ;cACrBD,YAAY,EAAE,QAAQ;cACtBD,WAAW,EAAEW;YACd;UACD,CAAC;QACF,CAAC,MAAM;UAAA,IAAAQ,sBAAA,EAAAC,sBAAA,EAAAC,OAAA,EAAAC,OAAA,EAAAC,qBAAA,EAAAC,OAAA,EAAAC,OAAA,EAAAC,OAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,QAAA;UAAE;UACR,IAAI1B,IAAI,CAAC,CAAC,CAAC,CAAC2B,iBAAiB,EAAE;YAC9B;UACD;UACA,MAAMnB,eAA0C,IAAAQ,sBAAA,GAAGjC,cAAc,CAACL,MAAM,EAAAwC,OAAA,GAAClB,IAAI,CAAC,CAAC,CAAC,cAAAkB,OAAA,uBAAPA,OAAA,CAASjB,QAAQ,CAAE,CAAC,cAAAe,sBAAA,wBAAAC,sBAAA,GAA1CD,sBAAA,CAA4CvB,MAAM,cAAAwB,sBAAA,uBAAlDA,sBAAA,CAAoDpB,WAAY;UACnHW,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEE,OAAO,CAAC;YACxBC,MAAM,EAAEjC,MAAM,EAAAyC,OAAA,GAACnB,IAAI,CAAC,CAAC,CAAC,cAAAmB,OAAA,uBAAPA,OAAA,CAASlB,QAAQ,CAAE;YAClCW,QAAQ,GAAAQ,qBAAA,GAAEvC,aAAa,CAACH,MAAM,EAAA2C,OAAA,GAACrB,IAAI,CAAC,CAAC,CAAC,cAAAqB,OAAA,uBAAPA,OAAA,CAASpB,QAAQ,CAAE,CAAC,cAAAmB,qBAAA,uBAAzCA,qBAAA,CAA2CQ,eAAe;YACpE5D,OAAO,GAAAsD,OAAA,GAAEtB,IAAI,CAAC,CAAC,CAAC,cAAAsB,OAAA,uBAAPA,OAAA,CAAStD,OAAQ;YAC1B8C,IAAI,EAAE,KAAK;YACXC,MAAM,EAAEP,eAAe,CAACtD;UACzB,CAAC,CAAC;UACF6B,cAAc,CAACL,MAAM,EAAA6C,OAAA,GAACvB,IAAI,CAAC,CAAC,CAAC,cAAAuB,OAAA,uBAAPA,OAAA,CAAStB,QAAQ,CAAE,CAAC,GAAG;YAC5CX,QAAQ,EAAE,IAAI;YACdC,QAAQ,EAAE,IAAI;YACdC,QAAQ,EAAE,IAAI;YACdC,MAAM,EAAE;cACPpF,QAAQ,EAAE;gBAAE,KAAAmH,sBAAA,GAAGzC,cAAc,CAACL,MAAM,EAAAgD,QAAA,GAAC1B,IAAI,CAAC,CAAC,CAAC,cAAA0B,QAAA,uBAAPA,QAAA,CAASzB,QAAQ,CAAE,CAAC,cAAAuB,sBAAA,wBAAAC,sBAAA,GAA1CD,sBAAA,CAA4C/B,MAAM,cAAAgC,sBAAA,uBAAlDA,sBAAA,CAAoDpH,QAAQ;cAAC,CAAC;cAC7E0F,WAAW,EAAE,QAAQ;cACrBD,YAAY,EAAE,QAAQ;cACtBD,WAAW,EAAEW;YACd;UACD,CAAC;QACF;MACD,CAAC,CAAC;MACFrG,WAAW,CAAE0H,YAAY,KAAM;QAAE,GAAGA,YAAY;QAAE,GAAG9C;MAAe,CAAC,CAAC,CAAC;IAExE,CAAC,CAAC;IACF,OAAO,MAAM;MACZ/F,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,SAAS,CAAC;IAC7B,CAAC;EACF,CAAC,EAAE,CAACtE,QAAQ,EAAEO,QAAQ,EAAEM,aAAa,EAAEH,QAAQ,CAAC,CAAC;EAGjDhC,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,WAAW,EAAGqE,WAAiC,IAAK;MACpE3H,WAAW,CAAE0H,YAAY,KAAM;QAAE,GAAGA,YAAY;QAAE,GAAGC;MAAY,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC;IACF9I,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,aAAa,EAAGsE,gBAAkC,IAAK;MACvEnH,gBAAgB,CAAC;QAAE,GAAGmH;MAAiB,CAAC,CAAC;MACzCzH,WAAW,CAAE0E,YAAY,KAAM;QAAE,GAAG+C,gBAAgB;QAAE,GAAG/C;MAAa,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC;IACFhG,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,YAAY,EAAGuE,YAAoC,IAAK;MACxEjH,YAAY,CAAC;QAAE,GAAGiH;MAAa,CAAC,CAAC;IAClC,CAAC,CAAC;IACFhJ,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,WAAW,EAAGwE,WAA6B,IAAK;MAChE3H,WAAW,CAAE0E,YAAY,KAAM;QAAE,GAAGA,YAAY;QAAE,GAAGiD;MAAY,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC;IACF,OAAO,MAAM;MACZjJ,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,WAAW,CAAC;MAC9BjF,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,aAAa,CAAC;MAChCjF,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,YAAY,CAAC;MAC/BjF,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,WAAW,CAAC;IAC/B,CAAC;EACF,CAAC,EAAE,CAAC5D,QAAQ,EAAEH,QAAQ,EAAES,aAAa,EAAEG,SAAS,CAAC,CAAC;EAElDzC,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,kBAAkB,EAAEyE,KAAA,IAU/B;MAAA,IAVgC;QACrCC,MAAM;QACNC,MAAM;QACN9C,QAAQ;QACRC;MAMD,CAAC,GAAA2C,KAAA;MACA,QAAQC,MAAM;QACb,KAAK,KAAK;UAAE;YACX,MAAME,WAAiC,GAAG,CAAC,CAAC;YAC5CA,WAAW,CAACD,MAAM,CAAC,GAAG;cACrB9C,QAAQ;cACRC,QAAQ;cACRC,QAAQ,EAAE;YACX,CAAC;YACD1G,eAAe,CAAC0C,YAAY,EAAG,yBAAwB8G,IAAI,CAACC,SAAS,CAACF,WAAW,CAAE,EAAC,CAAC;YACrFvJ,eAAe,CAAC0C,YAAY,EAAG,4BAA2B8G,IAAI,CAACC,SAAS,CAACrI,QAAQ,CAAE,EAAC,CAAC;YACrFC,WAAW,CAAC;cAAE,GAAGD,QAAQ;cAAE,GAAGmI;YAAY,CAAC,CAAC;YAC5C;UACD;QACA,KAAK,QAAQ;UAAE;YACd,MAAMA,WAAiC,GAAG;cAAE,GAAGnI;YAAS,CAAC;YACzD,OAAOmI,WAAW,CAACD,MAAM,CAAC;YAC1BjI,WAAW,CAAC;cAAE,GAAGkI;YAAY,CAAC,CAAC;YAC/B,IAAIpH,SAAS,KAAKmH,MAAM,EAAE;cACzBlH,YAAY,CAAC,CAAC,CAAC,CAAC;YACjB;YACA,IAAIS,aAAa,IAAIyG,MAAM,KAAKvG,SAAS,EAAE;cAC1CD,gBAAgB,CAAC,KAAK,CAAC;YACxB;YACA;UACD;QACA,KAAK,MAAM;UAAE;YAAA,IAAA4G,gBAAA;YACZ,MAAMH,WAAiC,GAAG,CAAC,CAAC;YAC5CA,WAAW,CAACD,MAAM,CAAC,GAAG;cACrB9C,QAAQ;cACRC,QAAQ;cACRC,QAAQ,GAAAgD,gBAAA,GAAEtI,QAAQ,CAACkI,MAAM,CAAC,cAAAI,gBAAA,uBAAhBA,gBAAA,CAAkBhD,QAAQ;cACpCC,MAAM,EAAEvF,QAAQ,CAACkI,MAAM,CAAC,CAAC3C,MAAM,IAAI,CAAC;YACrC,CAAC;YACDtF,WAAW,CAAC;cAAE,GAAGD,QAAQ;cAAE,GAAGmI;YAAY,CAAC,CAAC;YAC5C,IAAI1G,aAAa,IAAIyG,MAAM,KAAKvG,SAAS,EAAE;cAC1CD,gBAAgB,CAAC,KAAK,CAAC;YACxB;YACA;UACD;MAAC;IAEH,CAAC,CAAC;IACF,OAAO,MAAM;MACZ5C,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,kBAAkB,CAAC;IACtC,CAAC;EACF,CAAC,EAAE,CAAC/D,QAAQ,EAAEe,SAAS,EAAEU,aAAa,EAAEE,SAAS,CAAC,CAAC;EAEnDxD,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,YAAY,EAAE,MAAM;MACpChB,qBAAqB,EAAE;MACvBtC,WAAW,CAAC,CAAC,CAAC,CAAC;MACfe,YAAY,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC;IACFlC,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,YAAY,EAAE,MAAM;MACpCnD,WAAW,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC;IACF,OAAO,MAAM;MACZtB,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,YAAY,CAAC;MAC/BjF,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,YAAY,CAAC;IAChC,CAAC;EACF,CAAC,EAAE,CAAC/D,QAAQ,EAAEG,QAAQ,EAAEF,WAAW,EAAEG,WAAW,CAAC,CAAC;EAElDjC,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,WAAW,EAAEgF,KAAA,IAgBxB;MAAA,IAhByB;QAC9BL,MAAM;QACN9C,QAAQ;QACRC,QAAQ;QACRmD,YAAY,GAAG,CAAC,CAAC;QACjBC,OAAO;QACPC,MAAM;QACNC,MAAM,GAAG;MASV,CAAC,GAAAJ,KAAA;MACA,QAAQG,MAAM;QACb,KAAK,IAAI;UAAE;YACV9J,eAAe,CAAC0C,YAAY,EAAG,SAAQ8D,QAAS,OAAM,CAAC;YACvD,MAAM+C,WAAiC,GAAG,CAAC,CAAC;YAC5CA,WAAW,CAACD,MAAM,CAAC,GAAG;cACrB9C,QAAQ;cACRC,QAAQ;cACRC,QAAQ,EAAE,IAAI;cACdC,MAAM,EAAE;gBACPpF,QAAQ,EAAE;kBAAE,GAAGqI;gBAAa,CAAC;gBAC7B7C,WAAW,EAAE,EAAE;gBACfC,YAAY,EAAE,QAAQ;gBACtBC,WAAW,EAAE4C;cACd;YACD,CAAC;YACD7J,eAAe,CAAC0C,YAAY,EAAG,oBAAmB8G,IAAI,CAACC,SAAS,CAACF,WAAW,CAAE,EAAC,CAAC;YAChFlI,WAAW,CAAC;cAAE,GAAGD,QAAQ;cAAE,GAAGmI;YAAY,CAAC,CAAC;YAC5C,IAAIQ,MAAM,KAAK,QAAQ,EAAE;cACxB3H,YAAY,CAACkH,MAAM,CAAC;YACrB;YACA,IAAI7C,QAAQ,KAAK,IAAI,EAAE;cACtB,MAAMuD,SAA2B,GAAG,CAAC,CAAC;cACtCA,SAAS,CAACV,MAAM,CAAC,GAAG;gBACnBR,eAAe,EAAEvH,QAAQ,CAAC+H,MAAM,CAAC,CAACR,eAAe;gBACjDmB,cAAc,EAAE1I,QAAQ,CAAC+H,MAAM,CAAC,CAACW,cAAc;gBAC/CC,UAAU,EAAE3I,QAAQ,CAAC+H,MAAM,CAAC,CAACY,UAAU;gBACvCC,QAAQ,EAAEJ,MAAM,KAAK,QAAQ,GAAG,QAAQ,GAAG;cAC5C,CAAC;cACDpI,gBAAgB,CAAEyI,iBAAiB,KAAM;gBAAE,GAAGA,iBAAiB;gBAAE,GAAGJ;cAAU,CAAC,CAAC,CAAC;cACjFxI,WAAW,CAAE0E,YAAY,KAAM;gBAAE,GAAGA,YAAY;gBAAE,GAAG8D;cAAU,CAAC,CAAC,CAAC;YACnE;YACA;UACD;QACA,KAAK,IAAI;UAAE;YACV,IAAI5I,QAAQ,CAACkI,MAAM,CAAC,CAAC5C,QAAQ,KAAK,KAAK,EAAE;cACxC2D,KAAK,CAAE,gBAAe7D,QAAS,OAAM,CAAC;YACvC;YACA;UACD;MAAC;IAEH,CAAC,CAAC;IACF,OAAO,MAAM;MACZtG,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,WAAW,CAAC;IAC/B,CAAC;EACF,CAAC,EAAE,CAAC/D,QAAQ,EAAEG,QAAQ,EAAEG,aAAa,CAAC,CAAC;EAGvCnC,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,gBAAgB,EAAE2F,KAAA,IAQ7B;MAAA,IAAAC,iBAAA;MAAA,IAR8B;QACnCjB,MAAM;QACND,MAAM;QACNmB;MAKD,CAAC,GAAAF,KAAA;MACA,IAAI,EAAAC,iBAAA,GAAAnJ,QAAQ,CAACkI,MAAM,CAAC,cAAAiB,iBAAA,uBAAhBA,iBAAA,CAAkB7D,QAAQ,MAAK,IAAI,EAAE;QACxC;MACD;MACA,QAAQ2C,MAAM;QACb,KAAK,WAAW;UAAE;YACjB,IAAImB,QAAQ,KAAK3J,QAAQ,CAACiG,GAAG,EAAE;cAC9B;YACD,CAAC,MAAM;cAAA,IAAA2D,qBAAA;cACN,MAAMC,OAAmC,GAAG,CAAC,CAAC;cAC9CA,OAAO,CAACF,QAAQ,CAAC,GAAG;gBACnB3D,cAAc,EAAE,QAAQ;gBACxBD,aAAa,EAAE;cAChB,CAAC;cACD,MAAM+D,WAAuC,GAAG;gBAAE,KAAAF,qBAAA,GAAGrJ,QAAQ,CAACkI,MAAM,CAAC,CAAC3C,MAAM,cAAA8D,qBAAA,uBAAvBA,qBAAA,CAAyBlJ,QAAQ,CAAC;gBAAE,GAAGmJ;cAAQ,CAAC;cACrGxK,MAAM,CAAC0K,qBAAqB,CAAC;gBAAExJ,QAAQ;gBAAEC,WAAW;gBAAEiI,MAAM;gBAAEqB;cAAY,CAAC,CAAC;YAC7E;YACA;UACD;QACA,KAAK,KAAK;QACV,KAAK,OAAO;QACZ,KAAK,MAAM;UAAE;YACZ,IAAIH,QAAQ,KAAK3J,QAAQ,CAACiG,GAAG,EAAE;cAC9B,IAAI1F,QAAQ,CAACkI,MAAM,CAAC,CAAC7C,QAAQ,KAAK,SAAS,EAAE;gBAC5C,MAAM8C,WAAiC,GAAG;kBAAE,GAAGnI;gBAAS,CAAC;gBACzD,OAAOmI,WAAW,CAACD,MAAM,CAAC;gBAC1BjI,WAAW,CAAC;kBAAE,GAAGkI;gBAAY,CAAC,CAAC;cAChC,CAAC,MAAM;gBACN,MAAMA,WAAiC,GAAG,CAAC,CAAC;gBAC5CA,WAAW,CAACD,MAAM,CAAC,GAAG;kBACrB9C,QAAQ,EAAEpF,QAAQ,CAACkI,MAAM,CAAC,CAAC9C,QAAQ;kBACnCC,QAAQ,EAAErF,QAAQ,CAACkI,MAAM,CAAC,CAAC7C,QAAQ;kBACnCC,QAAQ,EAAE;gBACX,CAAC;gBACDrF,WAAW,CAAC;kBAAE,GAAGD,QAAQ;kBAAE,GAAGmI;gBAAY,CAAC,CAAC;cAC7C;cACA,IAAIpH,SAAS,KAAKmH,MAAM,EAAE;gBACzBlH,YAAY,CAAC,CAAC,CAAC,CAAC;gBAChBuB,qBAAqB,EAAE;cACxB;YACD,CAAC,MAAM;cAAA,IAAAkH,sBAAA;cACN,MAAMF,WAAuC,IAAAE,sBAAA,GAAGzJ,QAAQ,CAACkI,MAAM,CAAC,CAAC3C,MAAM,cAAAkE,sBAAA,uBAAvBA,sBAAA,CAAyBtJ,QAAS;cAClF,OAAOoJ,WAAW,CAACH,QAAQ,CAAC;cAC5BtK,MAAM,CAAC0K,qBAAqB,CAAC;gBAAExJ,QAAQ;gBAAEC,WAAW;gBAAEiI,MAAM;gBAAEqB;cAAY,CAAC,CAAC;YAC7E;YACA;UACD;QACA,KAAK,MAAM;QACX,KAAK,QAAQ;UAAE;YACd,IAAIH,QAAQ,KAAK3J,QAAQ,CAACiG,GAAG,EAAE;cAAA,IAAAgE,sBAAA,EAAAC,sBAAA;cAC9B,IAAI1B,MAAM,KAAK,MAAM,IAAI,EAAAyB,sBAAA,GAAA1J,QAAQ,CAACkI,MAAM,CAAC,CAAC3C,MAAM,cAAAmE,sBAAA,uBAAvBA,sBAAA,CAAyB9D,YAAY,MAAK,MAAM,EAAE;gBAC1E;cACD;cACA,MAAM2D,WAAuC,IAAAI,sBAAA,GAAG3J,QAAQ,CAACkI,MAAM,CAAC,CAAC3C,MAAM,cAAAoE,sBAAA,uBAAvBA,sBAAA,CAAyBxJ,QAAS;cAClFoJ,WAAW,CAACH,QAAQ,CAAC,GAAG;gBAAE,GAAGG,WAAW,CAACH,QAAQ,CAAC;gBAAE3D,cAAc,EAAEwC;cAAO,CAAC;cAC5EnJ,MAAM,CAAC0K,qBAAqB,CAAC;gBAAExJ,QAAQ;gBAAEC,WAAW;gBAAEiI,MAAM;gBAAEqB;cAAY,CAAC,EAAEtB,MAAM,CAAC;YACrF,CAAC,MAAM;cAAA,IAAA2B,sBAAA;cACN,MAAML,WAAuC,IAAAK,sBAAA,GAAG5J,QAAQ,CAACkI,MAAM,CAAC,CAAC3C,MAAM,cAAAqE,sBAAA,uBAAvBA,sBAAA,CAAyBzJ,QAAS;cAClFoJ,WAAW,CAACH,QAAQ,CAAC,GAAG;gBAAE,GAAGG,WAAW,CAACH,QAAQ,CAAC;gBAAE3D,cAAc,EAAEwC;cAAO,CAAC;cAC5EnJ,MAAM,CAAC0K,qBAAqB,CAAC;gBAAExJ,QAAQ;gBAAEC,WAAW;gBAAEiI,MAAM;gBAAEqB;cAAY,CAAC,CAAC;YAC7E;YACA;UACD;QACA,KAAK,OAAO;QACZ,KAAK,OAAO;UAAE;YACb,IAAIH,QAAQ,KAAK3J,QAAQ,CAACiG,GAAG,EAAE;cAAA,IAAAmE,sBAAA;cAC9B,MAAMN,WAAuC,IAAAM,sBAAA,GAAG7J,QAAQ,CAACkI,MAAM,CAAC,CAAC3C,MAAM,cAAAsE,sBAAA,uBAAvBA,sBAAA,CAAyB1J,QAAS;cAClFoJ,WAAW,CAACH,QAAQ,CAAC,GAAG;gBAAE,GAAGG,WAAW,CAACH,QAAQ,CAAC;gBAAE5D,aAAa,EAAEyC;cAAO,CAAC;cAC3EnJ,MAAM,CAAC0K,qBAAqB,CAAC;gBAAExJ,QAAQ;gBAAEC,WAAW;gBAAEiI,MAAM;gBAAEqB;cAAY,CAAC,EAAEO,SAAS,EAAE7B,MAAM,CAAC;YAChG,CAAC,MAAM;cAAA,IAAA8B,sBAAA;cACN,MAAMR,WAAuC,IAAAQ,sBAAA,GAAG/J,QAAQ,CAACkI,MAAM,CAAC,CAAC3C,MAAM,cAAAwE,sBAAA,uBAAvBA,sBAAA,CAAyB5J,QAAS;cAClFoJ,WAAW,CAACH,QAAQ,CAAC,GAAG;gBAAE,GAAGG,WAAW,CAACH,QAAQ,CAAC;gBAAE5D,aAAa,EAAEyC;cAAO,CAAC;cAC3EnJ,MAAM,CAAC0K,qBAAqB,CAAC;gBAAExJ,QAAQ;gBAAEC,WAAW;gBAAEiI,MAAM;gBAAEqB;cAAY,CAAC,CAAC;YAC7E;YACA;UACD;MAAC;IAEH,CAAC,CAAC;IACF,OAAO,MAAM;MACZzK,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,gBAAgB,CAAC;IACpC,CAAC;EACF,CAAC,EAAE,CAAC/D,QAAQ,EAAEP,QAAQ,EAAEsB,SAAS,CAAC,CAAC;EAEnC5C,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,aAAa,EAAEyG,KAAA,IAU1B;MAAA,IAV2B;QAChCvD,MAAM;QACNiB,eAAe;QACfmB,cAAc;QACdC;MAMD,CAAC,GAAAkB,KAAA;MACA,MAAMV,OAAyB,GAAG,CAAC,CAAC;MACpCA,OAAO,CAAC7C,MAAM,CAAC,GAAG;QACjBiB,eAAe;QACfmB,cAAc;QACdC;MACD,CAAC;MACDlK,eAAe,CAAC0C,YAAY,EAAG,gBAAeoG,eAAgB,KAAIoB,UAAW,EAAC,CAAC;MAC/E1I,WAAW,CAAE0E,YAAY,KAAM;QAAE,GAAGA,YAAY;QAAE,GAAGwE;MAAQ,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC;IACF,OAAO,MAAM;MACZxK,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,aAAa,CAAC;IACjC,CAAC;EACF,CAAC,EAAE,CAAC5D,QAAQ,EAAER,YAAY,CAAC,CAAC;EAE5BxB,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,SAAS,EAAE0G,KAAA,IAQtB;MAAA,IARuB;QAC5B/B,MAAM;QACNgC,IAAI;QACJpG;MAKD,CAAC,GAAAmG,KAAA;MACA,MAAME,KAAK,GAAGvJ,SAAS,CAACsJ,IAAI,CAAC,GAAG,IAAI,GAAG,KAAK;MAC5C,QAAQC,KAAK;QACZ,KAAK,IAAI;UAAE;YACVvL,eAAe,CAAC0C,YAAY,EAAG,gBAAe4I,IAAK,aAAY,CAAC;YAChE;UACD;QACA,KAAK,KAAK;UAAE;YAAA,IAAAE,sBAAA,EAAAC,sBAAA;YACXzL,eAAe,CAAC0C,YAAY,EAAG,gBAAe4I,IAAK,iBAAgBpG,OAAQ,EAAC,CAAC;YAC7E,MAAMwG,cAAyC,IAAAF,sBAAA,GAAGpK,QAAQ,CAACkI,MAAM,CAAC,CAAC3C,MAAM,cAAA6E,sBAAA,uBAAvBA,sBAAA,CAAyBzE,WAAY;YACvF2E,cAAc,CAAC9D,OAAO,CAAC;cACtBC,MAAM,EAAEyD,IAAI;cACZxD,QAAQ,EAAEvG,QAAQ,CAAC+J,IAAI,CAAC,CAACxC,eAAe;cACxC5D,OAAO;cACP8C,IAAI,EAAEnH,QAAQ,CAACiG,GAAG,KAAKwE,IAAI,GAAG,IAAI,GAAG,KAAK;cAC1CrD,MAAM,GAAAwD,sBAAA,GAAErK,QAAQ,CAACkI,MAAM,CAAC,CAAC3C,MAAM,cAAA8E,sBAAA,uBAAvBA,sBAAA,CAAyB1E,WAAW,CAAC3C;YAC9C,CAAC,CAAC;YACF,MAAMuH,SAA0C,GAAG;cAAE,GAAGvK,QAAQ,CAACkI,MAAM,CAAC,CAAC3C,MAAM;cAAEI,WAAW,EAAE,CAAC,GAAG2E,cAAc;YAAE,CAAC;YACnH,MAAMnC,WAAiC,GAAG,CAAC,CAAC;YAC5CA,WAAW,CAACD,MAAM,CAAC,GAAG;cACrB9C,QAAQ,EAAEpF,QAAQ,CAACkI,MAAM,CAAC,CAAC9C,QAAQ;cACnCC,QAAQ,EAAErF,QAAQ,CAACkI,MAAM,CAAC,CAAC7C,QAAQ;cACnCC,QAAQ,EAAEtF,QAAQ,CAACkI,MAAM,CAAC,CAAC5C,QAAQ;cACnCC,MAAM,EAAEgF;YACT,CAAC;YACD,IAAIvK,QAAQ,CAACkI,MAAM,CAAC,CAAC7C,QAAQ,KAAK,IAAI,IAAItE,SAAS,KAAKmH,MAAM,EAAE;cAC/D,MAAMU,SAA2B,GAAG,CAAC,CAAC;cACtCA,SAAS,CAACV,MAAM,CAAC,GAAG;gBACnBR,eAAe,EAAEvH,QAAQ,CAAC+H,MAAM,CAAC,CAACR,eAAe;gBACjDmB,cAAc,EAAE1I,QAAQ,CAAC+H,MAAM,CAAC,CAACW,cAAc;gBAC/CC,UAAU,EAAE3I,QAAQ,CAAC+H,MAAM,CAAC,CAACY,UAAU;gBACvCC,QAAQ,EAAE;cACX,CAAC;cACD3I,WAAW,CAAC;gBAAE,GAAGD,QAAQ;gBAAE,GAAGyI;cAAU,CAAC,CAAC;YAC3C;YACA3I,WAAW,CAAC;cAAE,GAAGD,QAAQ;cAAE,GAAGmI;YAAY,CAAC,CAAC;YAC5C;UACD;MAAC;IAEH,CAAC,CAAC;IACF,OAAO,MAAM;MACZrJ,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,SAAS,CAAC;IAC7B,CAAC;EACF,CAAC,EAAE,CAAC/D,QAAQ,EAAEY,SAAS,EAAET,QAAQ,EAAEV,QAAQ,EAAEsB,SAAS,CAAC,CAAC;EAExD5C,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,aAAa,EAAEiH,KAAA,IAI1B;MAAA,IAJ2B;QAChC/D;MAGD,CAAC,GAAA+D,KAAA;MACA,IAAI5J,SAAS,CAAC6F,MAAM,CAAC,EAAE;QACtBgE,UAAU,CAAC,MAAM;UAChB3L,MAAM,CAAC4L,mBAAmB,CAAC;YAAEpJ;UAAa,CAAC,EAAEmF,MAAM,EAAE,SAAS,CAAC;QAChE,CAAC,EAAE,IAAI,CAAC;QACR;MACD;MACAxE,iBAAiB,CAACwE,MAAM,CAAC;MACzBpF,kBAAkB,CAAC,IAAI,CAAC;IACzB,CAAC,CAAC;IACF,OAAO,MAAM;MACZvC,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,aAAa,CAAC;IACjC,CAAC;EACF,CAAC,EAAE,CAACnD,SAAS,CAAC,CAAC;EAEfzC,SAAS,CAAC,MAAM;IACfW,MAAM,CAACA,MAAM,CAACyE,EAAE,CAAC,mBAAmB,EAAEoH,KAAA,IAMhC;MAAA,IANiC;QACtCvB,QAAQ;QACRwB;MAID,CAAC,GAAAD,KAAA;MACA,IAAIC,MAAM,KAAK,SAAS,EAAE;QACzB3B,KAAK,CAAE,GAAE9I,QAAQ,CAACiJ,QAAQ,CAAC,CAAC1B,eAAgB,4BAA2B,CAAC;MACzE;IACD,CAAC,CAAC;IACF,OAAO,MAAM;MACZ5I,MAAM,CAACA,MAAM,CAACiF,GAAG,CAAC,mBAAmB,CAAC;IACvC,CAAC;EACF,CAAC,EAAE,CAAC5D,QAAQ,CAAC,CAAC;EAEd,eAAe0K,UAAUA,CAAA,EAAG;IAC3B,IAAIlL,YAAY,EAAE;MACjB,MAAM6C,gBAAgB,EAAE;IACzB;EACD;EAEArE,SAAS,CAAC,MAAM;IACf,IAAI2D,SAAS,EAAE;MACdhD,MAAM,CAACgM,cAAc,CAACxJ,YAAY,EAAE,QAAQ,CAAC;MAC7CxC,MAAM,CAACiM,cAAc,CAACzJ,YAAY,EAAE,OAAO,CAAC;IAC7C;EACD,CAAC,EAAE,CAACQ,SAAS,CAAC,CAAC;EAEf3D,SAAS,CAAC,MAAM;IAAA,IAAA6M,qBAAA;IACf,IAAIjJ,WAAW,IAAI,EAAAiJ,qBAAA,GAAA7K,QAAQ,CAACV,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEiG,GAAG,CAAC,cAAAsF,qBAAA,uBAAvBA,qBAAA,CAAyBlC,UAAU,MAAK,QAAQ,EAAE;MACpEhK,MAAM,CAACiM,cAAc,CAACzJ,YAAY,EAAE,SAAS,CAAC;IAC/C;EACD,CAAC,EAAE,CAACS,WAAW,EAAE5B,QAAQ,EAAEV,QAAQ,CAAC,CAAC;EAErCtB,SAAS,CAAC,MAAM;IACf,IAAI6D,UAAU,EAAE;MACflD,MAAM,CAACiM,cAAc,CAACzJ,YAAY,EAAE,KAAK,CAAC;MAC1CxC,MAAM,CAACgM,cAAc,CAACxJ,YAAY,EAAE,QAAQ,CAAC;IAC9C;EACD,CAAC,EAAE,CAACU,UAAU,CAAC,CAAC;EAEhB7D,SAAS,CAAC,MAAM;IACf,IAAIwB,YAAY,EAAE;MACjBkL,UAAU,EAAE;IACb;EACD,CAAC,EAAE,EAAE,CAAC;EAGN,oBACC3L,OAAA,CAAAF,SAAA;IAAAM,QAAA,EACEA;EAAQ,iBACP;AAEL;AAACD,EAAA,CA1nBuBF,WAAW;EAAA,QACTzB,UAAU,EACZA,UAAU,EACDF,OAAO,EACCA,OAAO,EAC3BE,UAAU,EACEF,OAAO,EACPA,OAAO,EACGA,OAAO,EACPA,OAAO,EACfA,OAAO,EACPA,OAAO,EAClBE,UAAU,EACTA,UAAU,EACPA,UAAU,EACGF,OAAO,EACLA,OAAO,EAC/BC,YAAY,EACfC,UAAU,EACPD,YAAY,EACVA,YAAY,EACbA,YAAY,EACLC,UAAU,EACbA,UAAU,EAChBU,WAAW;AAAA;AAAA6M,EAAA,GAxBL9L,WAAW;AAAA,IAAA8L,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}